<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Poetry&#39;s Blog</title>
  
  <subtitle>Choose a gesture to allow yourself to live irreplaceable.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.poetries.top/"/>
  <updated>2018-11-28T12:50:38.997Z</updated>
  <id>http://blog.poetries.top/</id>
  
  <author>
    <name>Poetry</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>babel升级7.xx总结</title>
    <link href="http://blog.poetries.top/2018/11/28/babel7-update/"/>
    <id>http://blog.poetries.top/2018/11/28/babel7-update/</id>
    <published>2018-11-28T06:40:08.000Z</published>
    <updated>2018-11-28T12:50:38.997Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、自动升级"><a href="#一、自动升级" class="headerlink" title="一、自动升级"></a>一、自动升级</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx babel-upgrade --write --install</span><br></pre></td></tr></table></figure><h2 id="二、手动升级"><a href="#二、手动升级" class="headerlink" title="二、手动升级"></a>二、手动升级</h2><h3 id="2-1-安装依赖"><a href="#2-1-安装依赖" class="headerlink" title="2.1 安装依赖"></a>2.1 安装依赖</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Babel-loader 8.x</span></span><br><span class="line"><span class="string">"babel-loader"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Babel-core 7.x</span></span><br><span class="line"><span class="string">"@babel/core"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Env</span></span><br><span class="line"><span class="string">"@babel/preset-env"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Runtime</span></span><br><span class="line"><span class="string">"@babel/runtime"</span></span><br><span class="line"><span class="string">"@babel/plugin-transform-runtime"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// React</span></span><br><span class="line"><span class="string">"@babel/preset-react"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Stage 0</span></span><br><span class="line"><span class="string">"@babel/plugin-proposal-function-bind"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Stage 1</span></span><br><span class="line"><span class="string">"@babel/plugin-proposal-export-default-from"</span></span><br><span class="line"><span class="string">"@babel/plugin-proposal-logical-assignment-operators"</span></span><br><span class="line"><span class="string">"@babel/plugin-proposal-optional-chaining"</span></span><br><span class="line"><span class="string">"@babel/plugin-proposal-pipeline-operator"</span></span><br><span class="line"><span class="string">"@babel/plugin-proposal-nullish-coalescing-operator"</span></span><br><span class="line"><span class="string">"@babel/plugin-proposal-do-expressions"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Stage 2</span></span><br><span class="line"><span class="string">"@babel/plugin-proposal-decorators"</span></span><br><span class="line"><span class="string">"@babel/plugin-proposal-function-sent"</span></span><br><span class="line"><span class="string">"@babel/plugin-proposal-export-namespace-from"</span></span><br><span class="line"><span class="string">"@babel/plugin-proposal-numeric-separator"</span></span><br><span class="line"><span class="string">"@babel/plugin-proposal-throw-expressions"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Stage 3</span></span><br><span class="line"><span class="string">"@babel/plugin-syntax-dynamic-import"</span></span><br><span class="line"><span class="string">"@babel/plugin-syntax-import-meta"</span></span><br><span class="line"><span class="string">"@babel/plugin-proposal-class-properties"</span></span><br><span class="line"><span class="string">"@babel/plugin-proposal-json-strings"</span></span><br></pre></td></tr></table></figure><h3 id="2-2-修改-babelrc"><a href="#2-2-修改-babelrc" class="headerlink" title="2.2 修改.babelrc"></a>2.2 修改.babelrc</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"presets"</span>: [</span><br><span class="line">    [<span class="string">"@babel/preset-env"</span>, &#123;</span><br><span class="line">      <span class="string">"targets"</span>: &#123;</span><br><span class="line">        <span class="string">"browsers"</span>: [</span><br><span class="line">          <span class="string">"last 2 versions"</span>,</span><br><span class="line">          <span class="string">"Firefox ESR"</span>,</span><br><span class="line">          <span class="string">"&gt; 1%"</span>,</span><br><span class="line">          <span class="string">"ie &gt;= 9"</span>,</span><br><span class="line">          <span class="string">"iOS &gt;= 8"</span>,</span><br><span class="line">          <span class="string">"Android &gt;= 4"</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;], <span class="string">"@babel/preset-react"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"plugins"</span>: [</span><br><span class="line">    <span class="string">"@babel/plugin-transform-runtime"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"@babel/plugin-proposal-function-bind"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"@babel/plugin-proposal-export-default-from"</span>,</span><br><span class="line">    <span class="string">"@babel/plugin-proposal-logical-assignment-operators"</span>,</span><br><span class="line">    [<span class="string">"@babel/plugin-proposal-optional-chaining"</span>, &#123; <span class="string">"loose"</span>: <span class="literal">false</span> &#125;],</span><br><span class="line">    [<span class="string">"@babel/plugin-proposal-pipeline-operator"</span>, &#123; <span class="string">"proposal"</span>: <span class="string">"minimal"</span> &#125;],</span><br><span class="line">    [<span class="string">"@babel/plugin-proposal-nullish-coalescing-operator"</span>, &#123; <span class="string">"loose"</span>: <span class="literal">false</span> &#125;],</span><br><span class="line">    <span class="string">"@babel/plugin-proposal-do-expressions"</span>,</span><br><span class="line"></span><br><span class="line">    [<span class="string">"@babel/plugin-proposal-decorators"</span>, &#123; <span class="string">"legacy"</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">    <span class="string">"@babel/plugin-proposal-function-sent"</span>,</span><br><span class="line">    <span class="string">"@babel/plugin-proposal-export-namespace-from"</span>,</span><br><span class="line">    <span class="string">"@babel/plugin-proposal-numeric-separator"</span>,</span><br><span class="line">    <span class="string">"@babel/plugin-proposal-throw-expressions"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"@babel/plugin-syntax-dynamic-import"</span>,</span><br><span class="line">    <span class="string">"@babel/plugin-syntax-import-meta"</span>,</span><br><span class="line">    [<span class="string">"@babel/plugin-proposal-class-properties"</span>, &#123; <span class="string">"loose"</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">    <span class="string">"@babel/plugin-proposal-json-strings"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"comments"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"compact"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、更多参考"><a href="#三、更多参考" class="headerlink" title="三、更多参考"></a>三、更多参考</h2><ul><li><a href="https://juejin.im/post/5bfe541bf265da6179748834?utm_source=gold_browser_extension" target="_blank" rel="noopener">webpack - babel 篇</a></li><li><a href="https://segmentfault.com/a/1190000016458913" target="_blank" rel="noopener">babel 升级到7.X采坑总结</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、自动升级&quot;&gt;&lt;a href=&quot;#一、自动升级&quot; class=&quot;headerlink&quot; title=&quot;一、自动升级&quot;&gt;&lt;/a&gt;一、自动升级&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="babel" scheme="http://blog.poetries.top/tags/babel/"/>
    
  </entry>
  
  <entry>
    <title>Nginx中常用的模块整理</title>
    <link href="http://blog.poetries.top/2018/11/27/nginx-module-summary/"/>
    <id>http://blog.poetries.top/2018/11/27/nginx-module-summary/</id>
    <published>2018-11-27T02:40:24.000Z</published>
    <updated>2018-11-28T12:50:39.021Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一部分-基础模块"><a href="#第一部分-基础模块" class="headerlink" title="第一部分 基础模块"></a>第一部分 基础模块</h1><h2 id="一、性能相关配置"><a href="#一、性能相关配置" class="headerlink" title="一、性能相关配置"></a>一、性能相关配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">worker_processes number | auto；</span><br></pre></td></tr></table></figure><blockquote><p><code>worker</code>进程的数量；通常应该为当前主机的<code>cpu</code>的物理核心数。多于<code>8</code>个的话建议写<code>8</code>，超过<code>8</code>个性能不会提升，稳定性降低</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">worker_cpu_affinity auto [cpumask] <span class="comment">#将work进程绑定在固定cpu上提高缓存命中率 </span></span><br><span class="line"><span class="comment"># 例：</span></span><br><span class="line">worker_cpu_affinity 0001 0010 0100 1000;</span><br><span class="line">worker_cpu_affinity 0101 1010;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">worker_priority number</span><br><span class="line"><span class="comment"># 指定worker进程的nice值，设定worker进程优先级： [-20,20]</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">worker_rlimit_nofile number</span><br><span class="line">worker <span class="comment"># 进程所能够打开的文件数量上限,默认较小，生产中需要调大如65535。系统资源通过配置修改/etc/security/limits.conf 例：root soft nofile 65535，或命令修改ulimit -n，修改后需重启服务或系统生效。</span></span><br></pre></td></tr></table></figure><h2 id="二、时间驱动events相关的配置"><a href="#二、时间驱动events相关的配置" class="headerlink" title="二、时间驱动events相关的配置"></a>二、时间驱动events相关的配置</h2><ul><li>每个<code>worker</code>进程所能够打开的最大并发连接数数量，如<code>10240</code></li><li>总最大并发数： <code>worker_processes * worker_connections</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">worker_connections number</span><br></pre></td></tr></table></figure><ul><li>指明并发连接请求的处理方法,默认自动选择最优方法不用调整</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use method</span><br><span class="line"><span class="comment"># 如：use epoll;</span></span><br></pre></td></tr></table></figure><ul><li><code>on</code>指由各个<code>worker</code>轮流处理新请求</li><li><code>Off</code>指每个新请求的到达都会通知(唤醒)所有的<code>worker</code>进程，但只有一个进程可获得连接，造成“惊群”，影响性能，默认<code>on</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 处理新的连接请求的方法</span></span><br><span class="line">accept_mutex on | off <span class="comment"># 互斥；</span></span><br></pre></td></tr></table></figure><h2 id="三、http核心模块相关配置ngx-http-core-module"><a href="#三、http核心模块相关配置ngx-http-core-module" class="headerlink" title="三、http核心模块相关配置ngx_http_core_module"></a>三、http核心模块相关配置ngx_http_core_module</h2><h3 id="3-1web服务模板"><a href="#3-1web服务模板" class="headerlink" title="3.1web服务模板"></a>3.1web服务模板</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server &#123; ... &#125;</span><br><span class="line"><span class="comment"># 配置一个虚拟主机</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen address[:PORT]|PORT;</span><br><span class="line">    server_name SERVER_NAME; <span class="comment"># 指令指向不同的主机名</span></span><br><span class="line">    root /PATH/TO/DOCUMENT_ROOT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2套接字相关配置"><a href="#3-2套接字相关配置" class="headerlink" title="3.2套接字相关配置"></a>3.2套接字相关配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listen address[:port] [default_server] [ssl] [http2 | spdy] [backlog=number] [rcvbuf=size] [sndbuf=size]</span><br></pre></td></tr></table></figure><ul><li><code>default_server</code> 设定为默认虚拟主机</li><li><code>ssl</code> 限制仅能够通过<code>ssl</code>连接提供服务</li><li><code>backlog=number</code> 超过并发连接数后，新请求进入后援队列的长度</li><li><code>rcvbuf=size</code> 接收缓冲区大小</li><li><code>sndbuf=size</code> 发送缓冲区大小</li></ul><h3 id="3-3-server-name"><a href="#3-3-server-name" class="headerlink" title="3.3 server_name"></a>3.3 server_name</h3><ul><li>支持*通配任意长度的任意字符</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server_name *.magedu.com www.magedu.*</span><br></pre></td></tr></table></figure><ul><li>支持<code>~</code>起始的字符做正则表达式模式匹配，性能原因慎用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server_name ~^www\d+\.magedu\.com$   #\d 表示 [0-9]</span><br></pre></td></tr></table></figure><p><strong>匹配优先级机制从高到低：</strong></p><ul><li>首先是字符串精确匹配 如： <code>www.magedu.com</code></li><li>左侧<code>*</code>通配符 如： <code>*.magedu.com</code></li><li>右侧<code>*</code>通配符 如： <code>www.magedu.*</code></li><li>正则表达式 如： <code>~^.*\.magedu\.com$</code></li><li><code>default_server</code></li></ul><h3 id="3-4-延迟发送选项"><a href="#3-4-延迟发送选项" class="headerlink" title="3.4 延迟发送选项"></a>3.4 延迟发送选项</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tcp_nodelay on | off;</span><br><span class="line">tcp_nopush  on | off;</span><br></pre></td></tr></table></figure><ul><li>在<code>keep alived</code>模式下的连接是否启用<code>TCP_NODELAY</code>选项。</li><li><code>tcp_nopush</code>必须在<code>sendfile</code>为<code>on</code>时才有效，当为<code>off</code>时，延迟发送，合并多个请求后再发送</li><li>默认<code>On</code>时，不延迟发送</li><li>可用于： <code>http</code>, <code>server</code>, <code>location</code></li></ul><h3 id="3-5-sendfile"><a href="#3-5-sendfile" class="headerlink" title="3.5 sendfile"></a>3.5 sendfile</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sendfile on | off;</span><br></pre></td></tr></table></figure><blockquote><p>是否启用<code>sendfile</code>功能，在内核中封装报文直接发送。如用来进行下载等应用磁盘IO重负载应用可设置为<code>off</code>，以平衡磁盘与网络IO处理速度降低系统负载，如图片显示不正常把这个改为<code>off</code>。默认<code>Off</code></p></blockquote><h3 id="3-6-隐藏版本信息"><a href="#3-6-隐藏版本信息" class="headerlink" title="3.6 隐藏版本信息"></a>3.6 隐藏版本信息</h3><blockquote><p>是否在响应报文的<code>Server</code>首部显示<code>nginx</code>版本</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server_tokens on | off | build | string</span><br></pre></td></tr></table></figure><h3 id="3-7-location匹配"><a href="#3-7-location匹配" class="headerlink" title="3.7 location匹配"></a>3.7 location匹配</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">location [ = | ~ | ~* | ^~ ] uri &#123; ... &#125;</span><br><span class="line">location @name &#123; ... &#125;</span><br></pre></td></tr></table></figure><blockquote><p>在一个<code>server</code>中<code>location</code>配置段可存在多个，用于实现从<code>uri</code>到文件系统的路径映射； <code>ngnix</code>会根据用户请求的<code>URI</code>来检查定义的所有<code>location</code>，并找出一个最佳匹配，而后应用其配置 </p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;...</span><br><span class="line">    server_name www.magedu.com;</span><br><span class="line">    location /images/ &#123;</span><br><span class="line">        root /data/imgs/;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">http://www.magedu.com/images/logo.jpg</span><br><span class="line">--&gt; /data/imgs/images/logo.jpg</span><br></pre></td></tr></table></figure><ul><li><code>=</code>：对<code>URI</code>做精确匹配； </li><li><code>^~</code>：对<code>URI</code>的最左边部分做匹配检查，不区分字符大小写</li><li><code>~</code>：对<code>URI</code>做正则表达式模式匹配，区分字符大小写</li><li><code>~*</code>：对<code>URI</code>做正则表达式模式匹配，不区分字符大小写<br>不带符号：匹配起始于此<code>uri</code>的所有的<code>uri</code><br>匹配优先级从高到低：</li><li><code>=</code>, <code>^~</code>, <code>～/～*</code>, 不带符号</li></ul><p><strong>路径别名alias path</strong></p><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># http://www.magedu.com/bbs/index.php</span></span><br><span class="line"></span><br><span class="line">location /bbs/ &#123;</span><br><span class="line">    <span class="built_in">alias</span> /web/forum/;</span><br><span class="line">&#125; <span class="comment"># --&gt; /web/forum/index.html</span></span><br><span class="line">location /bbs/ &#123;</span><br><span class="line">    root /web/forum/;</span><br><span class="line">&#125;     <span class="comment"># --&gt; /web/forum/bbs/index.html</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><blockquote><p><code>location</code>中使用<code>root</code>指令和<code>alias</code>指令的意义不同    </p></blockquote><ul><li><code>root</code>，相当于追加在<code>root</code>目录后面  </li><li><code>alias</code>，相当于对<code>location</code>中的<code>url</code>进行替换</li></ul><h3 id="3-8-错误页面显示"><a href="#3-8-错误页面显示" class="headerlink" title="3.8 错误页面显示"></a>3.8 错误页面显示</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error_page code ... [=[response]] uri;</span><br></pre></td></tr></table></figure><p><strong>模块：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ngx_http_core_module</span><br></pre></td></tr></table></figure><ul><li>定义错误页， 以指定的响应状态码进行响应</li><li>可用位置： <code>http</code>, <code>server</code>, <code>location</code>, <code>if in location</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">error_page 404 /404.html</span><br><span class="line">error_page 404 =200 /404.html  <span class="comment">#防止404页面被劫持</span></span><br></pre></td></tr></table></figure><h3 id="3-9-长连接相关配置"><a href="#3-9-长连接相关配置" class="headerlink" title="3.9 长连接相关配置"></a>3.9 长连接相关配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keepalive_timeout timeout [header_timeout];</span><br></pre></td></tr></table></figure><ul><li>设定保持连接超时时长， <code>0</code>表示禁止长连接， 默认为<code>75s</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keepalive_requests number;</span><br></pre></td></tr></table></figure><ul><li>在一次长连接上所允许请求的资源的最大数量，默认为<code>100</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keepalive_disable none | browser ...</span><br></pre></td></tr></table></figure><ul><li>对哪种浏览器禁用长连接</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">send_timeout time;</span><br></pre></td></tr></table></figure><ul><li>向客户端发送响应报文的超时时长，此处是指两次写操作之间的间隔时长，而非<br>整个响应过程的传输时长</li></ul><h3 id="3-10-请求报文缓存"><a href="#3-10-请求报文缓存" class="headerlink" title="3.10 请求报文缓存"></a>3.10 请求报文缓存</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client_body_buffer_size size;</span><br></pre></td></tr></table></figure><blockquote><p>用于接收每个客户端请求报文的body部分的缓冲区大小；默认为<code>16k</code>；超出此大小时，其将被暂存到磁盘上的由<code>client_body_temp_path</code>指令所定义的位置</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client_body_temp_path path [level1 [level2 [level3]]];</span><br></pre></td></tr></table></figure><blockquote><p>设定用于存储客户端请求报文的<code>body</code>部分的临时存储路径及子目录结构和数量<br>目录名为<code>16</code>进制的数字；</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client_body_temp_path /var/tmp/client_body 1 2 2</span><br></pre></td></tr></table></figure><ul><li><code>1</code>级目录占1位<code>16</code>进制，即<code>2^4=16个目录</code>0-f`</li><li><code>2</code>级目录占2位<code>16</code>进制，即<code>2^8=256</code>个目录 <code>00-ff</code></li><li><code>3</code>级目录占2位<code>16</code>进制， 即<code>2^8=256</code>个目录 <code>00--ff</code> </li></ul><h3 id="3-11-对客户端进行限制相关配置"><a href="#3-11-对客户端进行限制相关配置" class="headerlink" title="3.11 对客户端进行限制相关配置"></a>3.11 对客户端进行限制相关配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">limit_rate rate;</span><br></pre></td></tr></table></figure><blockquote><p>限制响应给客户端的传输速率，单位是<code>bytes/second</code> 默认<code>0</code>表示无限制</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">limit_except method ... &#123; ... &#125;</span><br></pre></td></tr></table></figure><blockquote><p>仅用于<code>location</code>限制客户端使用除了指定的请求方法之外的其它方法<br><code>method:GET</code>, <code>HEAD</code>, <code>POST</code>, <code>PUT</code>, <code>DELETE</code>，<code>MKCOL</code>, <code>COPY</code>, <code>MOVE</code>, <code>OPTIONS</code>, <code>PROPFIND</code>,<br><code>PROPPATCH</code>, <code>LOCK</code>, <code>UNLOCK</code>, <code>PATCH</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例：</span></span><br><span class="line">limit_except GET &#123;</span><br><span class="line">    allow 192.168.1.0/24;</span><br><span class="line">    deny all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>除了<code>GET</code>和<code>HEAD</code> 之外其它方法仅允许<code>192.168.1.0/24</code>网段主机使用</p></blockquote><h2 id="四、访问控制模块ngx-http-access-module"><a href="#四、访问控制模块ngx-http-access-module" class="headerlink" title="四、访问控制模块ngx_http_access_module"></a>四、访问控制模块ngx_http_access_module</h2><blockquote><p>实现基于<code>ip</code>的访问控制功能</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">allow address | CIDR | unix: | all;</span><br><span class="line">deny address | CIDR | unix: | all;</span><br><span class="line">http, server, location, limit_except</span><br></pre></td></tr></table></figure><blockquote><p>自上而下检查，一旦匹配，将生效，条件严格的置前</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#示例：</span></span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">    deny 192.168.1.1;</span><br><span class="line">    allow 192.168.1.0/24;</span><br><span class="line">    allow 10.1.1.0/16;</span><br><span class="line">    allow 2001:0db8::/32;</span><br><span class="line">    deny all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、用户认证模块ngx-http-auth-basic-module"><a href="#五、用户认证模块ngx-http-auth-basic-module" class="headerlink" title="五、用户认证模块ngx_http_auth_basic_module"></a>五、用户认证模块ngx_http_auth_basic_module</h2><blockquote><p>实现基于用户的访问控制，使用<code>basic</code>机制进行用户认证</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">auth_basic string | off;</span><br><span class="line">auth_basic_user_file file;</span><br><span class="line">location /admin/ &#123;</span><br><span class="line">    auth_basic <span class="string">"Admin Area"</span>;</span><br><span class="line">    auth_basic_user_file /etc/nginx/.ngxpasswd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>用户口令：</strong></p><ul><li>明文文本：格式<code>name:password:comment</code></li><li>加密文本：由<code>htpasswd</code>命令实现 <code>httpd-tools</code>所提供</li><li><code>htpasswd</code> [<code>-c</code>第一次创建时使用] [<code>-D</code>删除用户] <code>passwdfile</code>   <code>username</code></li></ul><p>六、状态查看模块ngx_http_stub_status_module</p><blockquote><p>用于输出nginx的基本状态信息</p></blockquote><ul><li><code>Active connections</code>:当前状态，活动状态的连接数</li><li><code>accepts</code>：统计总值，已经接受的客户端请求的总数</li><li><code>handled</code>：统计总值，已经处理完成的客户端请求的总数</li><li><code>requests</code>：统计总值，客户端发来的总的请求数</li><li><code>Reading</code>：当前状态，正在读取客户端请求报文首部的连接的连接数</li><li><code>Writing</code>：当前状态，正在向客户端发送响应报文过程中的连接数</li><li><code>Waiting</code>：当前状态，正在等待客户端发出请求的空闲连接数 </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：</span></span><br><span class="line"></span><br><span class="line">location /status &#123;</span><br><span class="line">    stub_status;</span><br><span class="line">    allow 172.16.0.0/16;</span><br><span class="line">    deny all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、日志记录模块ngx-http-log-module"><a href="#七、日志记录模块ngx-http-log-module" class="headerlink" title="七、日志记录模块ngx_http_log_module"></a>七、日志记录模块ngx_http_log_module</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log_format name string</span><br></pre></td></tr></table></figure><ul><li><code>string</code>可以使用<code>nginx</code>核心模块及其它模块内嵌的变量</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">access_log path [format [buffer=size] [gzip[=level]] [flush=time] [if=condition]];</span><br><span class="line">access_log off;</span><br></pre></td></tr></table></figure><ul><li>访问日志文件路径，格式及相关的缓冲的配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">buffer=size</span><br><span class="line">flush=time</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line">log_format compression <span class="string">'$remote_addr-$remote_user [$time_local] '</span></span><br><span class="line">                         <span class="string">'"$request" $status $bytes_sent '</span></span><br><span class="line">                         <span class="string">'"$http_referer" "$http_user_agent" "$gzip_ratio"'</span>;</span><br><span class="line">access_log /spool/logs/nginx-access.log compression buffer=32k; </span><br><span class="line">json格式日志示例;log_format json <span class="string">'&#123;"@timestamp":"$time_iso8601",'</span></span><br><span class="line">                                 <span class="string">'"client_ip":"$remote_addr",'</span></span><br><span class="line">                                 <span class="string">'"size":$body_bytes_sent,'</span></span><br><span class="line">                                 <span class="string">'"responsetime":$request_time,'</span></span><br><span class="line">                                 <span class="string">'"upstreamtime":"$upstream_response_time",'</span></span><br><span class="line">                                 <span class="string">'"upstreamhost":"$upstream_addr",'</span></span><br><span class="line">                                 <span class="string">'"http_host":"$host",'</span></span><br><span class="line">                                 <span class="string">'"method":"$request_method",'</span></span><br><span class="line">                                 <span class="string">'"request_uri":"$request_uri",'</span></span><br><span class="line">                                 <span class="string">'"xff":"$http_x_forwarded_for",'</span></span><br><span class="line">                                 <span class="string">'"referrer":"$http_referer",'</span></span><br><span class="line">                                 <span class="string">'"agent":"$http_user_agent",'</span></span><br><span class="line">                                 <span class="string">'"status":"$status"&#125;'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open_log_file_cache max=N [inactive=time] [min_uses=N] [valid=time];</span><br></pre></td></tr></table></figure><ul><li><code>open_log_file_cache off</code>; 缓存各日志文件相关的元数据信息</li><li><code>max</code>：缓存的最大文件描述符数量</li><li><code>min_uses</code>：在<code>inactive</code>指定的时长内访问大于等于此值方可被当作活动项</li><li><code>inactive</code>：非活动时长</li><li><code>valid</code>：验正缓存中各缓存项是否为活动项的时间间隔</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例: </span></span><br><span class="line">open_log_file_cache max=1000 inactive=20s  valid=1m;</span><br></pre></td></tr></table></figure><h2 id="八、压缩相关选项ngx-http-gzip-module"><a href="#八、压缩相关选项ngx-http-gzip-module" class="headerlink" title="八、压缩相关选项ngx_http_gzip_module"></a>八、压缩相关选项ngx_http_gzip_module</h2><ul><li><code>gzip on | off</code>;  #启用或禁用<code>gzip</code>压缩</li><li><code>gzip_comp_level level</code>;  #压缩比由低到高： <code>1</code> 到 <code>9</code> 默认： <code>1</code></li><li><code>gzip_disable regex</code> …;  #匹配到客户端浏览器不执行压缩</li><li><code>gzip_min_length length</code>;  #启用压缩功能的响应报文大小阈值 </li><li><code>gzip_http_version 1.0 | 1.1</code>; #设定启用压缩功能时，协议的最小版本 默认：<code>1.1</code></li><li><code>gzip_buffers number size</code>;<br>支持实现压缩功能时缓冲区数量及每个缓存区的大小<br>默认： <code>32 4k</code> 或 <code>16 8k</code></li><li><code>gzip_types mime-type</code> …;<br>指明仅对哪些类型的资源执行压缩操作；即压缩过滤器<br>默认包含有<code>text/html</code>，不用显示指定，否则出错</li><li><code>gzip_vary on | off;</code><br>如果启用压缩，是否在响应报文首部插入<code>“Vary: AcceptEncoding</code></li><li><code>gzip_proxied off</code> | <code>expired</code> | <code>no-cache</code> | <code>no-store</code>|<br><code>private</code> | <code>no_last_modified</code> | <code>no_etag</code>| <code>auth</code> | <code>any</code> …;</li></ul><blockquote><p><code>nginx</code>对于代理服务器请求的响应报文，在何种条件下启用压缩功能</p></blockquote><ul><li><code>off</code>：对被代理的请求不启用压缩</li><li><code>expired</code>,<code>no-cache</code>, <code>no-store</code>， <code>private</code>：对代理服务器请求的响应报文首部<code>Cache-Control</code>值任何一个，启用压缩功能</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：</span></span><br><span class="line">gzip on;</span><br><span class="line">gzip_comp_level 6;</span><br><span class="line">gzip_http_version 1.1;</span><br><span class="line">gzip_vary on;</span><br><span class="line">gzip_min_length 1024;</span><br><span class="line">gzip_buffers 16 8k;</span><br><span class="line">gzip_proxied any;</span><br><span class="line">gzip_disable <span class="string">"MSIE[1-6]\.(?!.*SV1)"</span>;</span><br><span class="line">gzip_types text/xml text/plain text/css application/javascript application/xml application/json;</span><br></pre></td></tr></table></figure><h2 id="九、https模块ngx-http-ssl-module模块："><a href="#九、https模块ngx-http-ssl-module模块：" class="headerlink" title="九、https模块ngx_http_ssl_module模块："></a>九、https模块ngx_http_ssl_module模块：</h2><ul><li><code>ssl on | off</code>; 为指定虚拟机启用<code>HTTPS protocol</code>， 建议用<code>listen</code>指令代替</li><li><code>ssl_certificate file</code>; 当前虚拟主机使用PEM格式的证书文件</li><li><code>ssl_certificate_key fil</code>; 当前虚拟主机上与其证书匹配的私钥文件</li><li><code>ssl_protocols [SSLv2] [SSLv3] [TLSv1] [TLSv1.1] [TLSv1.2]</code>; 支持<code>ssl</code>协议版本，默认为后三个</li><li><code>ssl_session_cache off | none | [builtin[:size]][shared:name:size]</code>;<ul><li><code>builtin[:size]</code>：使用<code>OpenSSL</code>内建缓存，为每<code>worker</code>进程私有</li><li><code>[shared:name:size]</code>：在各<code>worker</code>之间使用一个共享的缓存 </li></ul></li><li><code>ssl_session_timeout time</code>;<ul><li>客户端连接可以复用<code>ssl session cache</code>中缓存的<code>ssl</code>参数的有效时长，默认<code>5m</code></li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name www.magedu.com;</span><br><span class="line">    root /vhosts/ssl/htdocs;</span><br><span class="line">    ssl on;</span><br><span class="line">    ssl_certificate /etc/nginx/ssl/nginx.crt;</span><br><span class="line">    ssl_certificate_key /etc/nginx/ssl/nginx.key;</span><br><span class="line">    ssl_session_cache shared:sslcache:20m;</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十、重定向模块ngx-http-rewrite-module"><a href="#十、重定向模块ngx-http-rewrite-module" class="headerlink" title="十、重定向模块ngx_http_rewrite_module"></a>十、重定向模块ngx_http_rewrite_module</h2><ol><li><strong>rewrite regex replacement [flag]</strong></li></ol><blockquote><p>将用户请求的<code>URI</code>基于<code>regex</code>所描述的模式进行检查，匹配到时将其替换为<code>replacement</code>指定的新的<code>URI</code>。注意：如果在同一级配置块中存在多个<code>rewrite</code>规则，那么会自下而下逐个检查；被某条件规则替换完成后，会重新一轮的替换检查</p></blockquote><ul><li>隐含有循环机制,但不超过<code>10</code>次；如果超过，提示<code>500</code>响应码，<code>[flag]</code>所表示的标志位用于控制此循环机制</li><li>如果<code>replacement</code>是以<code>http://</code>或<code>https://</code>开头，则替换结果会直接以重向返回给客户端 <code>[flag]</code>：</li><li><code>last</code>：重写完成后停止对当前<code>URI</code>在当前<code>location</code>中后续的其它重写操作，而后对新的URI启动新一轮重写检查；提前重启新一轮循环</li><li><code>break</code>：重写完成后停止对当前<code>URI</code>在当前<code>location</code>中后续的其它重写操作，而后直接跳转至重写规则配置块之后的其它配置；结束循环，建议在<code>location</code>中使用</li><li><code>redirect</code>：临时重定向，重写完成后以临时重定向方式直接返回重写后生成的新URI给客户端，由客户端重新发起请求；不能以<code>http://</code>或<code>https://</code>开头，使用相对路径，状态码： <code>302</code></li><li><code>permanent</code>:重写完成后以永久重定向方式直接返回重写后生成的新URI给客户端，由客户端重新发起请求，状态码：<code>301</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例：</span></span><br><span class="line">rewrite ^/zz/(.*\.html)$  /zhengzhou/<span class="variable">$1</span> <span class="built_in">break</span>;</span><br><span class="line">rewrite ^/zz/(.*\.html)$  https://www.dianping/zhengzhou/<span class="variable">$1</span> permanent;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>return</strong></li></ol><blockquote><p>停止处理，并返回给客户端指定的响应码</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">return</span> code [text];</span><br><span class="line"><span class="built_in">return</span> code URL;</span><br><span class="line"><span class="built_in">return</span> URL;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>rewrite_log on | off;</strong></li></ol><blockquote><p>是否开启重写日志, 发送至<code>error_log（notice level）</code></p></blockquote><ol start="4"><li><strong>set $variable value;</strong></li></ol><ul><li>用户自定义变量</li><li>注意：变量定义和调用都要以<code>$</code>开头</li></ul><ol start="5"><li><strong>if (condition) { … }</strong></li></ol><blockquote><p>引入新的上下文,条件满足时，执行配置块中的配置指令； <code>server</code>, <code>location</code></p></blockquote><p><strong>比较操作符</strong>：</p><ul><li><code>==</code> 相同</li><li><code>!=</code> 不同</li><li><code>~：</code>模式匹配，区分字符大小写</li><li><code>~*</code>：模式匹配，不区分字符大小写</li><li><code>!~</code>：模式不匹配，区分字符大小写</li><li><code>!~*</code>：模式不匹配，不区分字符大小写<br>文件及目录存在性判断：</li><li><code>-e</code>, <code>!-e</code> 存在（包括文件，目录，软链接）</li><li><code>-f</code>, <code>!-f</code> 文件</li><li><code>-d</code>, <code>!-d</code> 目录</li><li><code>-x</code>, <code>!-x</code> 执行 </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 浏览器分流示例：</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~ Chrom) &#123;</span><br><span class="line">rewrite ^(.*)$  /chrome/<span class="variable">$1</span> <span class="built_in">break</span>;                                                 </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~ MSIE) &#123;</span><br><span class="line">rewrite ^(.*)$  /IE/<span class="variable">$1</span> <span class="built_in">break</span>;                                                      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十一、引用模块ngx-http-referer-module"><a href="#十一、引用模块ngx-http-referer-module" class="headerlink" title="十一、引用模块ngx_http_referer_module"></a>十一、引用模块ngx_http_referer_module</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valid_referers none|blocked|server_names|string ...;</span><br></pre></td></tr></table></figure><blockquote><p>定义<code>referer</code>首部的合法可用值，不能匹配的将是非法值,用于防盗链，</p></blockquote><ul><li><code>none</code>：请求报文首部没有<code>referer</code>首部,比如直接在浏览器打开一个图片</li><li><code>blocked</code>：请求报文有<code>referer</code>首部，但无有效值，伪装的头部信息。</li><li><code>server_names</code>：参数，其可以有值作为主机名或主机名模式</li><li><code>arbitrary_string</code>：任意字符串，但可使用<code>*</code>作通配符</li><li><code>regular expression</code>：被指定的正则表达式模式匹配到的字符串,要使用<code>~</code>开头，</li><li>例如： <code>~.*\.magedu\.com</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例：</span></span><br><span class="line">location ~*^.+\.(jpg|gif|png|swf|flv|wma|wmv|asf|mp3|mmf|zip|rar)$ &#123;</span><br><span class="line">valid_referers none blocked server_names *.magedu.com</span><br><span class="line">*.mageedu.com magedu.* mageedu.* ~\.magedu\.;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$invalid_referer</span>) &#123;</span><br><span class="line"><span class="built_in">return</span> 403;</span><br><span class="line"><span class="built_in">break</span>；</span><br><span class="line">&#125;</span><br><span class="line">access_log off;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十二、反向代理模块ngx-http-proxy-module"><a href="#十二、反向代理模块ngx-http-proxy-module" class="headerlink" title="十二、反向代理模块ngx_http_proxy_module"></a>十二、反向代理模块ngx_http_proxy_module</h2><h3 id="12-1-proxy-pass-URL"><a href="#12-1-proxy-pass-URL" class="headerlink" title="12.1 proxy_pass URL"></a>12.1 proxy_pass URL</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Context:location, if in location, limit_except</span><br></pre></td></tr></table></figure><blockquote><p>注意： <code>proxy_pass</code>后面的路径不带<code>uri</code>时，其会将<code>location</code>的<code>uri</code>传递给后端主机</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    ...</span><br><span class="line">    server_name HOSTNAME;</span><br><span class="line">    location /uri/ &#123;</span><br><span class="line">    proxy_pass http://host[:port]; </span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上面示例： <code>http://HOSTNAME/uri --&gt; http://host/uri</code></li><li><code>http://host[:port]/</code> 意味着： <code>http://HOSTNAME/uri --&gt; http://host/</code></li><li>注意：如果<code>location</code>定义其<code>uri</code>时使用了正则表达式的模式，则<code>proxy_pass</code>之后必须不能使用<code>uri</code>; </li><li>用户请求时传递的<code>uri</code>将直接附加代理到的服务的之后</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    ...</span><br><span class="line">    server_name HOSTNAME;</span><br><span class="line">    location ~|~* /uri/ &#123;</span><br><span class="line">    proxy_pass http://host; 不能加/</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># http://HOSTNAME/uri/ --&gt; http://host/uri/</span></span><br></pre></td></tr></table></figure><h3 id="12-2-proxy-set-header-field-value"><a href="#12-2-proxy-set-header-field-value" class="headerlink" title="12.2 proxy_set_header field value"></a>12.2 proxy_set_header field value</h3><blockquote><p>设定发往后端主机的请求报文的请求首部的值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Context: http, server, location</span><br></pre></td></tr></table></figure><ul><li>后端记录日志记录真实请求服务器<code>IP</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">proxy_set_headerHost<span class="variable">$host</span>；</span><br><span class="line">proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br></pre></td></tr></table></figure><p><strong>标准格式如下</strong>：</p><ul><li><code>X-Forwarded-For: client1, proxy1, proxy2</code></li></ul><p>如后端是<code>Apache</code>服务器应更改日志格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%h -----&gt; %&#123;X-Real-IP&#125;i</span><br></pre></td></tr></table></figure><h3 id="12-3-proxy-cache-path"><a href="#12-3-proxy-cache-path" class="headerlink" title="12.3 proxy_cache_path"></a>12.3 proxy_cache_path</h3><blockquote><p>定义可用于<code>proxy</code>功能的缓存； <code>Context:http</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义可用于proxy功能的缓存； Context:http</span></span><br><span class="line">proxy_cache_path path [levels=levels] [use_temp_path=on|off]</span><br><span class="line">keys_zone=name:size [inactive=time] [max_size=size]</span><br><span class="line">[manager_files=number] [manager_sleep=time]</span><br><span class="line">[manager_threshold=time] [loader_files=number] [loader_sleep=time]</span><br><span class="line">[loader_threshold=time] [purger=on|off] [purger_files=number]</span><br><span class="line">[purger_sleep=time] [purger_threshold=time];</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例：</span></span><br><span class="line">proxy_cache_path /data/nginx/cache（属主要为nginx） levels=1:2 keys_zone=nginxcache:20m inactive=2m</span><br></pre></td></tr></table></figure><h3 id="12-4-调用缓存"><a href="#12-4-调用缓存" class="headerlink" title="12.4 调用缓存"></a>12.4 调用缓存</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_cache zone | off; <span class="comment">#默认off</span></span><br></pre></td></tr></table></figure><blockquote><p>指明调用的缓存，或关闭缓存机制； <code>Context: http</code>,<code>server</code>, <code>location</code></p></blockquote><h3 id="12-5-proxy-cache-key-string"><a href="#12-5-proxy-cache-key-string" class="headerlink" title="12.5 proxy_cache_key string"></a>12.5 proxy_cache_key string</h3><blockquote><p>缓存中用于“键”的内容</p></blockquote><ul><li>默认值： <code>proxy_cache_key $scheme$proxy_host$request_uri;</code></li></ul><h3 id="12-6-proxy-cache-valid-code-…-time"><a href="#12-6-proxy-cache-valid-code-…-time" class="headerlink" title="12.6 proxy_cache_valid [code …] time;"></a>12.6 proxy_cache_valid [code …] time;</h3><blockquote><p>定义对特定响应码的响应内容的缓存时</p></blockquote><blockquote><p>定义在<code>http{...}</code>中</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例:</span></span><br><span class="line">proxy_cache_valid 200 302 10m;</span><br><span class="line">proxy_cache_valid 404 1m; </span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例：</span></span><br><span class="line"><span class="comment"># 在http配置定义缓存信</span></span><br><span class="line">proxy_cache_path /var/cache/nginx/proxy_cache</span><br><span class="line">levels=1:1:1 keys_zone=proxycache:20m</span><br><span class="line">inactive=120s max_size=1g;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用缓存功能，需要定义在相应的配置段，如server&#123;...&#125;；</span></span><br><span class="line">proxy_cache proxycache;</span><br><span class="line">proxy_cache_key <span class="variable">$request_uri</span>;</span><br><span class="line">proxy_cache_valid 200 302 301 1h;</span><br><span class="line">proxy_cache_valid any 1m;</span><br></pre></td></tr></table></figure><h3 id="12-7-proxy-cache-use-stale"><a href="#12-7-proxy-cache-use-stale" class="headerlink" title="12.7 proxy_cache_use_stale"></a>12.7 proxy_cache_use_stale</h3><blockquote><p>在被代理的后端服务器出现哪种情况下，可以直接使用过期的缓存响应客户端</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">proxy_cache_use_stale error | timeout |</span><br><span class="line">invalid_header | updating | http_500 | http_502 |</span><br><span class="line">http_503 | http_504 | http_403 | http_404 | off ..</span><br></pre></td></tr></table></figure><h3 id="12-8-proxy-cache-methods-GET-HEAD-POST"><a href="#12-8-proxy-cache-methods-GET-HEAD-POST" class="headerlink" title="12.8 proxy_cache_methods GET | HEAD | POST"></a>12.8 proxy_cache_methods GET | HEAD | POST</h3><blockquote><p>对哪些客户端请求方法对应的响应进行缓存， <code>GET</code>和<code>HEAD</code>方法总是被缓存</p></blockquote><h3 id="12-9-proxy-hide-header-field"><a href="#12-9-proxy-hide-header-field" class="headerlink" title="12.9 proxy_hide_header field;"></a>12.9 proxy_hide_header field;</h3><blockquote><p>用于隐藏后端服务器特定的响应首部</p></blockquote><h3 id="12-10-proxy-connect-timeout-time"><a href="#12-10-proxy-connect-timeout-time" class="headerlink" title="12.10  proxy_connect_timeout time;"></a>12.10  proxy_connect_timeout time;</h3><blockquote><p>定义与后端服务器建立连接的超时时长，如超时会出现<code>502</code>错误，默认为<code>60s</code>，一般不建议超出<code>75s</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_connect_timeout time;</span><br></pre></td></tr></table></figure><h3 id="12-11-proxy-send-timeout-time"><a href="#12-11-proxy-send-timeout-time" class="headerlink" title="12.11 proxy_send_timeout time"></a>12.11 proxy_send_timeout time</h3><blockquote><p>把请求发送给后端服务器的超时时长；默认为<code>60s</code></p></blockquote><h3 id="12-12-proxy-read-timeout-time"><a href="#12-12-proxy-read-timeout-time" class="headerlink" title="12.12 proxy_read_timeout time;"></a>12.12 proxy_read_timeout time;</h3><blockquote><p>等待后端服务器发送响应报文的超时时长， 默认为60s</p></blockquote><h2 id="十三、首部信息"><a href="#十三、首部信息" class="headerlink" title="十三、首部信息"></a>十三、首部信息</h2><p>添加自定义首部</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add_header name value [always];</span><br></pre></td></tr></table></figure><p>添加自定义响应信息的尾部</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add_header X-Via <span class="variable">$server_addr</span>;</span><br><span class="line">add_header X-Cache <span class="variable">$upstream_cache_status</span>;</span><br><span class="line">add_header X-Accel <span class="variable">$server_name</span>;</span><br><span class="line">add_trailer name value [always];</span><br></pre></td></tr></table></figure><h2 id="十四、-hph-相关模块ngx-http-fastcgi-module"><a href="#十四、-hph-相关模块ngx-http-fastcgi-module" class="headerlink" title="十四、 hph 相关模块ngx_http_fastcgi_module"></a>十四、 hph 相关模块ngx_http_fastcgi_module</h2><p><strong>fastcgi_pass address</strong></p><ul><li><code>address</code>为后端的<code>fastcgi server</code>的地址</li><li>可用位置：<code>location</code>, <code>if in location</code></li></ul><p><strong>fastcgi_index name</strong></p><ul><li><code>fastcgi</code>默认的主页资源</li><li>示例： <code>fastcgi_index index.php</code></li></ul><p><strong>fastcgi_param parameter value [if_not_empty];</strong></p><ul><li>设置传递给 <code>FastCGI</code>服务器的参数值，可以是文本，变量或组合</li></ul><p>示例1：</p><ul><li>在后端服务器先配置<code>fpm server</code>和<code>mariadb-server</code></li><li>在前端<code>nginx</code>服务上做以下配置：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">location ~* \.php$ &#123;</span><br><span class="line">    fastcgi_pass <span class="comment"># 后端fpm服务器IP:9000;</span></span><br><span class="line">    fastcgi_index index.php;</span><br><span class="line">    fastcgi_param SCRIPT_FILENAME</span><br><span class="line">/usr/share/nginx/html<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">    include     fastcgi.conf;    </span><br><span class="line">    …    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例2：</p><ul><li>通过<code>/pm_status</code>和<code>/ping</code>来获取<code>fpm server</code>状态信息（真实服务器端<code>php-fpm</code>配置文件中将这两项<br>注释掉）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location ~* ^/(status|ping)$ &#123;</span><br><span class="line">    include fastcgi_params;</span><br><span class="line">    fastcgi_pass <span class="comment"># 后端fpm服务器IP:9000;</span></span><br><span class="line">    fastcgi_param SCRIPT_FILENAME <span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">    include     fastcgi.conf; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>fastcgi 缓存相关</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fastcgi_cache_path path [levels=levels] [use_temp_path=on|off]</span><br><span class="line">keys_zone=name:size [inactive=time] [max_size=size]</span><br><span class="line">[manager_files=number] [manager_sleep=time] [manager_threshold=time]</span><br><span class="line">[loader_files=number] [loader_sleep=time] [loader_threshold=time]</span><br><span class="line">[purger=on|off] [purger_files=number] [purger_sleep=time]</span><br><span class="line">[purger_threshold=time];</span><br></pre></td></tr></table></figure><ul><li>定义<code>fastcgi</code>的缓存；</li><li><code>path</code> 缓存位置为磁盘上的文件系统</li><li><code>max_size=size</code><ul><li>磁盘<code>path</code>路径中用于缓存数据的缓存空间上限</li></ul></li><li><code>levels=levels</code>：缓存目录的层级数量，以及每一级的目录数量</li><li><code>levels=ONE:TWO:THREE</code></li><li>示例： <code>leves=1:2:2</code></li><li><code>keys_zone=name:size</code><ul><li><code>k/v</code>映射的内存空间的名称及大小</li></ul></li><li><code>inactive=time</code> 非活动时长</li></ul><h2 id="十五、代理模块ngx-http-upstream-module模块"><a href="#十五、代理模块ngx-http-upstream-module模块" class="headerlink" title="十五、代理模块ngx_http_upstream_module模块"></a>十五、代理模块ngx_http_upstream_module模块</h2><blockquote><p>用于将多个服务器定义成服务器组，而由<code>proxy_pass</code>,<code>fastcgi_pass</code>等指令进行引用</p></blockquote><h3 id="15-1-upstream-name-…"><a href="#15-1-upstream-name-…" class="headerlink" title="15.1 upstream name { … }"></a>15.1 upstream name { … }</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义后端服务器组，会引入一个新的上下文</span></span><br><span class="line"><span class="comment"># 默认调度算法是wrr</span></span><br><span class="line"></span><br><span class="line">Context: http</span><br><span class="line">upstream httpdsrvs &#123;</span><br><span class="line">server ...</span><br><span class="line">server...</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="15-2-server-address-parameters"><a href="#15-2-server-address-parameters" class="headerlink" title="15.2 server address [parameters];"></a>15.2 server address [parameters];</h3><blockquote><p>在<code>upstream</code>上下文中<code>server</code>成员，以及相关的参数； <code>Context:upstream</code></p></blockquote><p><strong>address的表示格式</strong></p><ul><li><code>unix:/PATH/TO/SOME_SOCK_FILE</code></li><li><code>IP[:PORT]</code></li><li><code>HOSTNAME[:PORT]</code></li><li><strong>parameters</strong>：<ul><li><code>weight=number</code>     权重，默认为<code>1</code>    </li><li><code>max_conns</code>     连接后端报务器最大并发活动连接数， <code>1.11.5</code>后支持    </li><li><code>max_fails=number</code>     失败尝试最大次数；超出此处指定的次数时    </li><li><code>server</code>将被标记为不可用,默认为<code>1</code></li><li><code>fail_timeout=time</code> 后端服务器标记为不可用状态的连接超时时<br>长，默认<code>10s</code></li><li><code>backup</code> 将服务器标记为“备用”，即所有服务器均不可用时才启用</li><li><code>down</code> 标记为“不可用”，配合<code>ip_hash</code>使用，实现灰度发布</li></ul></li></ul><h3 id="15-3-ip-hash-源地址hash调度方法"><a href="#15-3-ip-hash-源地址hash调度方法" class="headerlink" title="15.3 ip_hash 源地址hash调度方法"></a>15.3 ip_hash 源地址hash调度方法</h3><h3 id="15-4-least-conn"><a href="#15-4-least-conn" class="headerlink" title="15.4 least_conn"></a>15.4 least_conn</h3><blockquote><p>最少连接调度算法，当<code>server</code>拥有不同的权重时其为<code>wlc</code>，当所有后端主机连接数相同时，则使用<code>wrr</code>，适用于长连接</p></blockquote><h3 id="15-5-hash-key-consistent"><a href="#15-5-hash-key-consistent" class="headerlink" title="15.5 hash key [consistent]"></a>15.5 hash key [consistent]</h3><blockquote><p>基于指定的<code>key</code>的<code>hash</code>表来实现对请求的调度，此处的<code>key</code>可以直接文本、变量或二者组合</p></blockquote><ul><li>作用：将请求分类，同一类请求将发往同一个<code>upstream</code></li></ul><blockquote><p><code>server</code>，使用<code>consistent</code>参数， 将使用<code>ketama</code>一致性<code>hash</code>算法，适用于后端是<code>Cache</code>服务器（如<code>varnish</code>）时使用</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">hash</span> <span class="variable">$request_uri</span> consistent;</span><br><span class="line"><span class="built_in">hash</span> <span class="variable">$remote_addr</span>;</span><br></pre></td></tr></table></figure><h3 id="15-6-keepalive"><a href="#15-6-keepalive" class="headerlink" title="15.6 keepalive"></a>15.6 keepalive</h3><ul><li><code>keepalive</code> 连接<code>数N</code>;</li><li>为每个<code>worker</code>进程保留的空闲的长连接数量,可节约<code>nginx</code>端口，并减少连接管理的消耗</li></ul><h3 id="15-7-health-check-parameters"><a href="#15-7-health-check-parameters" class="headerlink" title="15.7 health_check [parameters]"></a>15.7 health_check [parameters]</h3><blockquote><p>健康状态检测机制；只能用于<code>location</code>上下文</p></blockquote><p><strong>常用参数：</strong></p><ul><li><code>interval=time</code>检测的频率，默认为<code>5</code>秒</li><li><code>fails=number</code>：判定服务器不可用的失败检测次数；默认为<code>1</code>次</li><li><code>passes=number</code>：判定服务器可用的失败检测次数；默认为<code>1</code>次</li><li><code>uri=uri</code>：做健康状态检测测试的目标<code>uri</code>；默认为<code>/</code></li><li><code>match=NAME</code>：健康状态检测的结果评估调用此处指定的<code>match</code>配置块</li><li><strong>注意</strong>：仅对<code>nginx plus</code>有效</li></ul><h3 id="15-8-match-name-…"><a href="#15-8-match-name-…" class="headerlink" title="15.8 match name { … }"></a>15.8 match name { … }</h3><blockquote><p>对<code>backend server</code>做健康状态检测时，定义其结果判断机制；</p></blockquote><p>只能用于<code>http</code>上下文</p><p><strong>常用的参数</strong>：</p><ul><li><code>status code[ code ...]</code>: 期望的响应状态码</li><li><code>header HEADER[operator value]</code>：期望存在响应首<br>部，也可对期望的响应首部的值基于比较操作符和值进行比较</li><li><code>body</code>：期望响应报文的主体部分应该有的内容</li><li>注意：仅对<code>nginx plus</code>有效</li></ul><h3 id="十六、ngx-stream-core-module模块"><a href="#十六、ngx-stream-core-module模块" class="headerlink" title="十六、ngx_stream_core_module模块"></a>十六、ngx_stream_core_module模块</h3><blockquote><p>模拟反代基于<code>tcp</code>或<code>udp</code>的服务连接，即工作于传输层的反代或调度器</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">stream &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义stream相关的服务； Context:main</span></span><br><span class="line"></span><br><span class="line">stream &#123;</span><br><span class="line">    upstream telnetsrvs &#123;</span><br><span class="line">        server 192.168.22.2:23;</span><br><span class="line">        server 192.168.22.3:23;</span><br><span class="line">        least_conn;</span><br><span class="line">    &#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 10.1.0.6:23;</span><br><span class="line">    proxy_pass telnetsrvs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line">listen address:port [ssl] [udp] [proxy_protocol]</span><br><span class="line">[backlog=number] [<span class="built_in">bind</span>] [ipv6only=on|off] [reuseport]</span><br><span class="line">[so_keepalive=on|off|[keepidle]:[keepintvl]:[keepcnt]];</span><br></pre></td></tr></table></figure><h2 id="十七、ngx-stream-proxy-module模块"><a href="#十七、ngx-stream-proxy-module模块" class="headerlink" title="十七、ngx_stream_proxy_module模块"></a>十七、ngx_stream_proxy_module模块</h2><blockquote><p>可实现代理基于·TCP·， ·UDP (1.9.13)·, ·UNIX-domain·</p></blockquote><p><strong>sockets的数据流</strong></p><ul><li><code>proxy_pass address</code>;指定后端服务器地址</li><li><code>proxy_timeout timeout</code>;无数据传输时，保持连接状态的超时时长<br>默认为<code>10m</code></li><li><code>proxy_connect_timeout time</code>;设置<code>nginx</code>与被代理的服务器尝试建立连接的超时时长<br>默认为<code>60s</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line">    upstream telnetsrvs &#123;</span><br><span class="line">        server 192.168.10.130:23;</span><br><span class="line">        server 192.168.10.131:23;</span><br><span class="line">        <span class="built_in">hash</span> <span class="variable">$remote_addr</span> consistent;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 172.16.100.10:2323;</span><br><span class="line">        proxy_pass telnetsrvs;</span><br><span class="line">        proxy_timeout 60s;</span><br><span class="line">        proxy_connect_timeout 10s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>linux对于nginx做的内核优化(/etc/sysctl.conf)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">fs.file-max = 999999</span><br><span class="line">net.ipv4.ip_forward = 0</span><br><span class="line">net.ipv4.conf.default.rp_filter = 1</span><br><span class="line">net.ipv4.conf.default.accept_source_route = 0</span><br><span class="line">kernel.sysrq = 0</span><br><span class="line">kernel.core_uses_pid = 1</span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line">kernel.msgmnb = 65536</span><br><span class="line">kernel.msgmax = 65536</span><br><span class="line">kernel.shmmax = 68719476736</span><br><span class="line">kernel.shmall = 4294967296</span><br><span class="line">net.ipv4.tcp_max_tw_buckets = 6000</span><br><span class="line">net.ipv4.tcp_sack = 1</span><br><span class="line">net.ipv4.tcp_window_scaling = 1</span><br><span class="line">net.ipv4.tcp_rmem = 10240 87380 12582912</span><br><span class="line">net.ipv4.tcp_wmem = 10240 87380 12582912</span><br><span class="line">net.core.wmem_default = 8388608</span><br><span class="line">net.core.rmem_default = 8388608</span><br><span class="line">net.core.rmem_max = 16777216</span><br><span class="line">net.core.wmem_max = 16777216</span><br><span class="line">net.core.netdev_max_backlog = 262144</span><br><span class="line">net.core.somaxconn = 40960</span><br><span class="line">net.ipv4.tcp_max_orphans = 3276800</span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 262144</span><br><span class="line">net.ipv4.tcp_timestamps = 0</span><br><span class="line">net.ipv4.tcp_synack_retries = 1</span><br><span class="line">net.ipv4.tcp_syn_retries = 1</span><br><span class="line">net.ipv4.tcp_tw_recycle = 1</span><br><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line">net.ipv4.tcp_mem = 94500000 915000000 927000000</span><br><span class="line">net.ipv4.tcp_fin_timeout = 1</span><br><span class="line">net.ipv4.tcp_keepalive_time = 30</span><br><span class="line">net.ipv4.ip_local_port_range = 1024 65000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行sysctl  -p使内核修改生效</span></span><br></pre></td></tr></table></figure><h1 id="第二部分-功能详解"><a href="#第二部分-功能详解" class="headerlink" title="第二部分 功能详解"></a>第二部分 功能详解</h1><h2 id="一、proxy-pass"><a href="#一、proxy-pass" class="headerlink" title="一、proxy_pass"></a>一、proxy_pass</h2><blockquote><p>在<code>nginx</code>中配置<code>proxy_pass</code>代理转发时，如果在<code>proxy_pass</code>后面的<code>url</code>加<code>/</code>，表示绝对根路径；如果没有<code>/</code>，表示相对路径，把匹配的路径部分也给代理走。</p></blockquote><ul><li>假设下面四种情况分别用 <code>http://192.168.1.1/proxy/test.html</code> 进行访问</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一种：</span></span><br><span class="line"></span><br><span class="line">location /proxy/ &#123;</span><br><span class="line"></span><br><span class="line">    proxy_pass http://127.0.0.1/;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 代理到URL：http://127.0.0.1/test.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种（相对于第一种，最后少一个 / ）</span></span><br><span class="line"></span><br><span class="line">location /proxy/ &#123;</span><br><span class="line"></span><br><span class="line">    proxy_pass http://127.0.0.1;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 代理到URL：http://127.0.0.1/proxy/test.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三种：</span></span><br><span class="line"></span><br><span class="line">location /proxy/ &#123;</span><br><span class="line"></span><br><span class="line">    proxy_pass http://127.0.0.1/aaa/;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 代理到URL：http://127.0.0.1/aaa/test.html</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 第四种（相对于第三种，最后少一个 / ）</span></span><br><span class="line"></span><br><span class="line">location /proxy/ &#123;</span><br><span class="line"></span><br><span class="line">    proxy_pass http://127.0.0.1/aaa;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 代理到URL：http://127.0.0.1/aaatest.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第五种 配合upstream模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果一个域名可以解析到多个地址，那么这些地址会被轮流使用，此外，还可以把一个地址指定为 server group</span></span><br><span class="line"></span><br><span class="line">upstream fasf.com &#123;</span><br><span class="line"></span><br><span class="line">          server 10.*.*.20:17007 max_fails=2 fail_timeout=15s;</span><br><span class="line"></span><br><span class="line">          server 10.*.*.21:17007 max_fails=2 fail_timeout=15s down;</span><br><span class="line"></span><br><span class="line">          ip_hash;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">        listen       9000;</span><br><span class="line"></span><br><span class="line">        server_name  fsf-NGINX-P01;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line"></span><br><span class="line">                proxy_pass http://fasf.com;</span><br><span class="line"></span><br><span class="line">                proxy_read_timeout 300;</span><br><span class="line"></span><br><span class="line">                proxy_connect_timeout 90;</span><br><span class="line"></span><br><span class="line">                proxy_send_timeout 300;</span><br><span class="line"></span><br><span class="line">               proxy_set_header HTTP_X_FORWARDED_FOR <span class="variable">$remote_addr</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>X_Forward_For</code>字段表示该条<code>http</code>请求是有谁发起的？如果反向代理服务器不重写该请求头的话，那么后端真实服务器在处理时会认为所有的请求都来在反向代理服务器，如果后端有防攻击策略的话，那么机器就被封掉了(显示真实访问ip)</p></blockquote><h2 id="二、rewrite"><a href="#二、rewrite" class="headerlink" title="二、rewrite"></a>二、rewrite</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">syntax: rewrite regex replacement [flag]</span><br></pre></td></tr></table></figure><blockquote><p><code>rewrite</code>由<code>ngx_http_rewrite_module</code>标准模块支持是实现URL重定向的重要指令，他根据<code>regex</code>(正则表达式)来匹配内容跳转到<code>replacement</code>，结尾是<code>flag</code>标记</p></blockquote><p><strong>简单的小例子：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rewrite ^/(.*) http://www.baidu.com/ permanent;</span><br></pre></td></tr></table></figure><blockquote><p>匹配成功后跳转到百度，执行永久<code>301</code>跳转</p></blockquote><p><strong>常用正则表达式regex：</strong></p><ul><li><p><code>\</code> 将后面接着的字符标记为一个特殊字符或者一个原义字符或一个向后引用</p></li><li><p><code>^</code> 匹配输入字符串的起始位置</p></li><li><p><code>$</code> 匹配输入字符串的结束位置</p></li><li><p><code>*</code> 匹配前面的字符零次或者多次</p></li><li><p><code>+</code> 匹配前面字符串一次或者多次</p></li><li><p><code>?</code> 匹配前面字符串的零次或者一次</p></li><li><p><code>.</code> 匹配除“<code>\n</code>”之外的所有单个字符</p></li></ul><p><strong>rewrite 最后一项flag参数</strong></p><table><thead><tr><th>标记符号</th><th>说明</th></tr></thead><tbody><tr><td><code>last</code></td><td>本条规则匹配完成后继续向下匹配新的<code>location URI</code>规则</td></tr><tr><td><code>break</code></td><td>本条规则匹配完成后终止，不在匹配任何规则</td></tr><tr><td><code>redirect</code></td><td>返回<code>302</code>临时重定向</td></tr><tr><td><code>permanent</code></td><td>返回<code>301</code>永久重定向</td></tr></tbody></table><blockquote><p>在反向代理域名的使用，在<code>tomcat</code>中配置多个项目需要挂目录的使用案例</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">    listen 443;</span><br><span class="line"></span><br><span class="line">    server_name FLS-Nginx-P01;</span><br><span class="line"></span><br><span class="line">    ssl on;</span><br><span class="line"></span><br><span class="line">    ssl_certificate   cert/214837463560686.pem;</span><br><span class="line"></span><br><span class="line">    ssl_certificate_key  cert/214837463560686.key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>公网域名解析<code>fls.***.com</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">ssl_session_timeout 5m;</span><br><span class="line"></span><br><span class="line"> ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line"></span><br><span class="line"> ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line"></span><br><span class="line"> ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line"> location  = / &#123;</span><br><span class="line"></span><br><span class="line"> rewrite ^(.*)$ https://fls.***.com/fls/;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> location / &#123;</span><br><span class="line"></span><br><span class="line"> proxy_redirect http https;</span><br><span class="line"></span><br><span class="line"> proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line"></span><br><span class="line"> proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line"></span><br><span class="line"> proxy_set_header X-Forwarded_For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line"> proxy_pass http://10.0.3.4:8080;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="三、log-format"><a href="#三、log-format" class="headerlink" title="三、log_format"></a>三、log_format</h2><blockquote><p><code>nginx</code>服务器日志相关指令主要有两条：一条是<code>log_format</code>，用来设置日志格式；另外一条是<code>access_log</code>，用来指定日志文件的存放路径、格式和缓存大小，可以参加<code>ngx_http_log_module</code>。一般在<code>nginx</code>的配置文件中日记配置(<code>/usr/local/nginx/conf/nginx.conf</code>)</p></blockquote><ul><li><code>log_format</code>指令用来设置日志的记录格式，它的语法如下：</li><li><code>log_format name format {format ...}</code></li><li>其中<code>name</code>表示定义的格式名称，<code>format</code>表示定义的格式样式。</li><li><code>log_format</code>有一个默认的、无须设置的<code>combined</code>日志格式设置，相当于<code>Apache</code>的<code>combined</code>日志格式，其具体参数如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log_format combined &apos;$remote_addr-$remote_user [$time_local]&apos;</span><br></pre></td></tr></table></figure><ul><li><code>‘&quot;$request&quot;$status $body_bytes_sent’</code></li><li><code>‘&quot;$http_referer&quot; &quot;$http_user_agent&quot;’</code></li></ul><h2 id="四、ssl证书加密配置"><a href="#四、ssl证书加密配置" class="headerlink" title="四、ssl证书加密配置"></a>四、ssl证书加密配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">upstream fasf.com &#123;</span><br><span class="line"></span><br><span class="line">        server 10.5.1.*:17007 max_fails=2 fail_timeout=15s;</span><br><span class="line"></span><br><span class="line">        server 10.5.1.*:17007 max_fails=2 fail_timeout=15s down;</span><br><span class="line"></span><br><span class="line">        ip_hash;      <span class="comment"># ----同一ip会被分配给固定的后端服务器,解决session问题</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">    listen       443;</span><br><span class="line"></span><br><span class="line">    server_name fsfs-pi-P01;</span><br><span class="line"></span><br><span class="line">    ssl on;</span><br><span class="line"></span><br><span class="line">    ssl_certificate   214820781820381.pem;    <span class="comment">#证书路径:nginx.conf所在目录</span></span><br><span class="line"></span><br><span class="line">    ssl_certificate_key  214820781820381.key;</span><br><span class="line"></span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line"></span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line"></span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line"></span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line"> location / &#123;</span><br><span class="line"></span><br><span class="line">    proxy_pass http://fafs.com;</span><br><span class="line"></span><br><span class="line">    proxy_set_header HTTP_X_FORWARDED_FOR <span class="variable">$remote_addr</span>;</span><br><span class="line"></span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、sendfile"><a href="#五、sendfile" class="headerlink" title="五、sendfile"></a>五、sendfile</h2><blockquote><p><code>sendfile</code>: 设置为<code>on</code>表示启动高效传输文件的模式。<code>sendfile</code>可以让<code>Nginx</code>在传输文件时直接在磁盘和<code>tcp</code> <code>socket</code>之间传输数据。如果这个参数不开启，会先在用户空间（Nginx进程空间）申请一个<code>buffer</code>，用<code>read</code>函数把数据从磁盘读到<code>cache</code>，再从<code>cache</code>读取到用户空间的<code>buffer</code>，再用<code>write</code>函数把数据从用户空间的<code>buffer</code>写入到内核的<code>buffer</code>，最后到<code>tcp</code> <code>socket</code>。开启这个参数后可以让数据不用经过用户<code>buffer</code></p></blockquote><h2 id="六、keepalive-timeout"><a href="#六、keepalive-timeout" class="headerlink" title="六、keepalive_timeout"></a>六、keepalive_timeout</h2><blockquote><p>当上传一个发数据文件时，<code>nginx</code>往往会超时，此时需要调整<code>keepalive_timeout</code>参数，保持会话长链接</p></blockquote><h2 id="七、gzip"><a href="#七、gzip" class="headerlink" title="七、gzip"></a>七、gzip</h2><blockquote><p>如果你是个前端开发人员，你肯定知道线上环境要把<code>js</code>，<code>css</code>，图片等压缩，尽量减少文件的大小，提升响应速度，特别是对移动端，这个非常重要。</p></blockquote><ul><li><code>gzip</code>使用环境:<code>http</code>,<code>server</code>,<code>location</code>,<code>if(x)</code>,一般把它定义在<code>nginx.conf</code>的<code>http{…..}</code>之间</li></ul><p><strong>gzip on</strong></p><ul><li><code>on</code>为启用，<code>off</code>为关闭</li></ul><p><strong>gzip_min_length 1k</strong></p><blockquote><p>设置允许压缩的页面最小字节数，页面字节数从<code>header</code>头中的<code>Content-Length</code>中进行获取。默认值是<code>0</code>，不管页面多大都压缩。建议设置成大于1k的字节数，小于1k可能会越压越大。</p></blockquote><p><strong>gzip_buffers 4 16k</strong></p><blockquote><p>获取多少内存用于缓存压缩结果，<code>‘4 16k’</code>表示以<code>16k*4</code>为单位获得</p></blockquote><p><strong>gzip_comp_level 5</strong></p><blockquote><p><code>gzip</code>压缩比（1~9），越小压缩效果越差，但是越大处理越慢，所以一般取中间值;</p></blockquote><p><strong>gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php</strong></p><blockquote><p>对特定的<code>MIME</code>类型生效,其中<code>&#39;text/html’</code>被系统强制启用</p></blockquote><p><strong>gzip_http_version 1.1</strong></p><blockquote><p>识别<code>http</code>协议的版本,早起浏览器可能不支持<code>zip</code>自解压,用户会看到乱码</p></blockquote><p><strong>gzip_vary on</strong></p><ul><li>启用应答头<code>&quot;Vary: Accept-Encoding&quot;</code></li></ul><p><strong>gzip_proxied off</strong></p><blockquote><p><code>nginx</code>做为反向代理时启用,<code>off</code>(关闭所有代理结果的数据的压缩),<code>expired</code>(启用压缩,如果<code>header</code>头中包括<code>&quot;Expires&quot;</code>头信息),<code>no-cache</code>(启用压缩,<code>header</code>头中包含<code>&quot;Cache-Control:no-cache&quot;</code>),<code>no-store</code>(启用压缩,header头中包含<code>&quot;Cache-Control:no-store&quot;)</code>,<code>private</code>(启用压缩,<code>header</code>头中包含<code>&quot;Cache-Control:private&quot;</code>),<code>no_last_modefied</code>(启用压缩,h<code>eader</code>头中不包含<code>&quot;Last-Modified&quot;)</code>,<code>no_etag</code>(启用压缩,如果<code>header</code>头中不包含”<code>Etag</code>“头信息),<code>auth</code>(启用压缩,如果<code>header</code>头中包含”<code>Authorization</code>“头信息)</p></blockquote><p><strong>gzip_disable msie6</strong></p><blockquote><p>(<code>IE5.5</code>和<code>IE6 SP1</code>使用<code>msie6</code>参数来禁止<code>gzip</code>压缩 )指定哪些不需要<code>gzip</code>压缩的浏览器(将和<code>User-Agents</code>进行匹配),依赖于<code>PCRE</code>库</p></blockquote><blockquote><p>以上代码可以插入到 <code>http {...}</code>整个服务器的配置里，也可以插入到虚拟主机的 <code>server {...}</code>或者下面的<code>location</code>模块内</p></blockquote><h2 id="八、客户端上传文件限制"><a href="#八、客户端上传文件限制" class="headerlink" title="八、客户端上传文件限制"></a>八、客户端上传文件限制</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client_body_buffer_size 15M;</span><br></pre></td></tr></table></figure><blockquote><p>请求缓冲区在<code>NGINX</code>请求处理中起着重要作用。 在接收到请求时，<code>NGINX</code>将其写入这些缓冲区，此指令设置用于请求主体的缓冲区大小。 如果主体超过缓冲区大小，则完整主体或其一部分将写入临时文件。 如果<code>NGINX</code>配置为使用文件而不是内存缓冲区，则该指令会被忽略。 默认情况下，该指令为<code>32</code>位系统设置一个8k缓冲区，为<code>64</code>位系统设置一个<code>16k</code>缓冲区</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client_body_temp_path clientpath 3 2;</span><br></pre></td></tr></table></figure><blockquote><p>关于<code>client_body_temp</code>目录的作用，简单说就是如果客户端<code>POST</code>一个比较大的文件，长度超过了<code>nginx</code>缓冲区的大小，需要把这个文件的部分或者全部内容暂存到<code>client_body_temp</code>目录下的临时文件</p></blockquote><ul><li>后面的<code>level1，2，3</code>是什么意思？</li><li>因为如果所有上传的文件都放在一个文件夹下，不仅很容易文件名冲突，并且容易导致一个文件夹特别大。</li><li>所以有必要创建子目录</li><li>这里的<code>level1,2,3</code>如果有值就代表存在一级，二级，三级子目录。</li><li>目录名是由数字进行命名的，所以这里的具体的值就是代表目录名的数字位数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client_body_temp_path  /spool/nginx/client_temp 3 2;</span><br></pre></td></tr></table></figure><p>可能创建的文件路径为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/spool/nginx/client_temp/702/45/00000123457</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client_max_body_size 30M;</span><br></pre></td></tr></table></figure><blockquote><p>此指令设置<code>NGINX</code>能处理的最大请求主体大小。如果请求大于指定的大小，则<code>NGINX</code>发回<code>HTTP 413（Request Entity too large）</code>错误。 如果服务器处理大文件上传，则该指令非常重要</p></blockquote><h2 id="九、worker-processes和worker-connections"><a href="#九、worker-processes和worker-connections" class="headerlink" title="九、worker_processes和worker_connections"></a>九、worker_processes和worker_connections</h2><p><strong>worker_processes</strong>：</p><ul><li><p>操作系统启动多少个工作进程运行Nginx。注意是工作进程，不是有多少个nginx工程。在Nginx运行的时候，会启动两种进程，一种是主进程<code>master process</code>；一种是工作进程<code>worker process</code>。例如我在配置文件中将<code>worker_processes</code>设置为<code>4</code>，启动<code>Nginx</code>后，使用进程查看命令观察名字叫做<code>nginx</code>的进程信息，我会看到如下结果：<code>1</code>个<code>nginx</code>主进程，<code>master process</code>；还有四个工作进程，<code>worker process</code>。主进程负责监控端口，协调工作进程的工作状态，分配工作任务，工作进程负责进行任务处理。一般这个参数要和操作系统的CPU内核数成倍数。可以设置为<code>auto</code>自动识别<br><strong>worker_connections</strong>：</p></li><li><p>这个属性是指单个工作进程可以允许同时建立外部连接的数量。无论这个连接是外部主动建立的，还是内部建立的。这里需要注意的是，一个工作进程建立一个连接后，进程将打开一个文件副本。所以这个数量还受操作系统设定的，进程最大可打开的文件数有关。</p></li></ul><h2 id="十、stream模块"><a href="#十、stream模块" class="headerlink" title="十、stream模块"></a>十、stream模块</h2><ul><li><code>nginx</code>从<code>1.9.0</code>开始，新增加了一个<code>stream</code>模块，用来实现四层协议的转发、代理或者负载均衡等。这完全就是抢<code>HAproxy</code>份额的节奏，鉴于<code>nginx</code>在<code>7</code>层负载均衡和<code>web service</code>上的成功，和<code>nginx</code>良好的框架，<code>stream</code>模块前景一片光明</li><li><code>stream</code>模块默认没有编译到<code>nginx</code>， 编译<code>nginx</code>时候 <code>./configure –with-stream</code>即可</li><li><code>stream</code>模块用法和<code>http</code>模块差不多，关键的是语法几乎一致。熟悉<code>http</code>模块配置语法的上手更快<br>以下是一个配置了<code>tcp</code>负载均衡和<code>udp(dns)</code>负载均衡的例子, 有 <code>server</code>，<code>upstream</code>块，而且还有<code>server</code>，<br><code>hash</code>， <code>listen</code>， <code>proxy_pass</code>等指令，如果不看最外层的<code>stream</code>关键字，还以为是<code>http</code>模块呢,下例是四层反代邮箱协议的例子，直写了<code>25</code>端口，其他端口方法相同</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line"></span><br><span class="line">     upstream smtp &#123;</span><br><span class="line"></span><br><span class="line">     least_conn;    <span class="comment"># ------把请求转发给连接数较少的后端，能够达到更好的负载均衡效果</span></span><br><span class="line"></span><br><span class="line">     server 10.5.3.17:25 max_fails=2 fail_timeout=10s;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line"></span><br><span class="line">     listen        25;</span><br><span class="line"></span><br><span class="line">     proxy_pass    smtp;</span><br><span class="line"></span><br><span class="line">     proxy_timeout 3s;</span><br><span class="line"></span><br><span class="line">     proxy_connect_timeout 1s;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一部分-基础模块&quot;&gt;&lt;a href=&quot;#第一部分-基础模块&quot; class=&quot;headerlink&quot; title=&quot;第一部分 基础模块&quot;&gt;&lt;/a&gt;第一部分 基础模块&lt;/h1&gt;&lt;h2 id=&quot;一、性能相关配置&quot;&gt;&lt;a href=&quot;#一、性能相关配置&quot; class=&quot;
      
    
    </summary>
    
      <category term="Back-end" scheme="http://blog.poetries.top/categories/Back-end/"/>
    
    
      <category term="Nginx" scheme="http://blog.poetries.top/tags/Nginx/"/>
    
      <category term="模块" scheme="http://blog.poetries.top/tags/%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>Taro原理总结</title>
    <link href="http://blog.poetries.top/2018/11/26/taro-theory/"/>
    <id>http://blog.poetries.top/2018/11/26/taro-theory/</id>
    <published>2018-11-26T07:54:23.000Z</published>
    <updated>2018-11-28T12:50:39.025Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>来自掘金小册笔记</p></blockquote><h2 id="一、Taro-的安装与使用"><a href="#一、Taro-的安装与使用" class="headerlink" title="一、Taro 的安装与使用"></a>一、Taro 的安装与使用</h2><h3 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g @tarojs/cli</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taro -V</span><br></pre></td></tr></table></figure><h3 id="1-2-使用"><a href="#1-2-使用" class="headerlink" title="1.2 使用"></a>1.2 使用</h3><p>使用命令创建模板项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ taro init myApp</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/9/2/1659a045be8713ca" alt=""></p><h4 id="1-2-1-微信小程序"><a href="#1-2-1-微信小程序" class="headerlink" title="1.2.1 微信小程序"></a>1.2.1 微信小程序</h4><blockquote><p>选择微信小程序模式，需要自行下载并打开微信开发者工具，然后选择项目根目录进行预览</p></blockquote><p>微信小程序编译预览及打包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># npm script</span></span><br><span class="line">$ npm run dev:weapp</span><br><span class="line">$ npm run build:weapp</span><br></pre></td></tr></table></figure><h4 id="1-2-2-百度小程序"><a href="#1-2-2-百度小程序" class="headerlink" title="1.2.2 百度小程序"></a>1.2.2 百度小程序</h4><blockquote><p>选择百度小程序模式，需要自行下载并打开<a href="https://smartprogram.baidu.com/docs/develop/devtools/show_sur/" target="_blank" rel="noopener">百度开发者工具</a>，然后在项目编译完后选择项目根目录下 dist 目录进行预览</p></blockquote><p>百度小程序编译预览及打包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># npm script</span></span><br><span class="line">$ npm run dev:swan</span><br><span class="line">$ npm run build:swan</span><br></pre></td></tr></table></figure><h4 id="1-2-3-支付宝小程序"><a href="#1-2-3-支付宝小程序" class="headerlink" title="1.2.3 支付宝小程序"></a>1.2.3 支付宝小程序</h4><blockquote><p>选择支付宝小程序模式，需要自行下载并打开<a href="https://docs.alipay.com/mini/developer/getting-started/" target="_blank" rel="noopener">支付宝小程序开发者工具</a>，然后在项目编译完后选择项目根目录下 dist 目录进行预览</p></blockquote><p>支付宝小程序编译预览及打包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># npm script</span></span><br><span class="line">$ npm run dev:alipay</span><br><span class="line">$ npm run build:alipay</span><br></pre></td></tr></table></figure><h4 id="1-2-4-H5"><a href="#1-2-4-H5" class="headerlink" title="1.2.4 H5"></a>1.2.4 H5</h4><p>H5 编译预览及打包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># npm script</span></span><br><span class="line">$ npm run dev:h5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 仅限全局安装</span></span><br><span class="line">$ taro build --<span class="built_in">type</span> h5 --watch</span><br></pre></td></tr></table></figure><h4 id="1-2-5-React-Native"><a href="#1-2-5-React-Native" class="headerlink" title="1.2.5 React Native"></a>1.2.5 React Native</h4><blockquote><p><code>React Native</code> 端运行需执行如下命令，<code>React Native</code> 端相关的运行说明请参见 <code>React Native</code> <a href="https://nervjs.github.io/taro/docs/react-native.html" target="_blank" rel="noopener">教程</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># npm script</span></span><br><span class="line">$ npm run dev:rn</span><br></pre></td></tr></table></figure><h3 id="1-3-更新-Taro"><a href="#1-3-更新-Taro" class="headerlink" title="1.3 更新 Taro"></a>1.3 更新 Taro</h3><blockquote><p><code>Taro</code> 提供了更新命令来更新 <code>CLI</code>工具自身和项目中 <code>Taro</code> 相关的依赖。</p></blockquote><p>更新 <code>taro-cli</code> 工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># taro</span></span><br><span class="line">$ taro update self</span><br><span class="line"><span class="comment"># npm</span></span><br></pre></td></tr></table></figure><blockquote><p>更新项目中 <code>Taro</code> 相关的依赖，这个需要在你的项目下执行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ taro update project</span><br></pre></td></tr></table></figure><h2 id="二、Taro-开发说明与注意事项"><a href="#二、Taro-开发说明与注意事项" class="headerlink" title="二、Taro 开发说明与注意事项"></a>二、Taro 开发说明与注意事项</h2><h3 id="2-1-微信小程序开发工具的配置"><a href="#2-1-微信小程序开发工具的配置" class="headerlink" title="2.1 微信小程序开发工具的配置"></a>2.1 微信小程序开发工具的配置</h3><blockquote><p>由于 <code>Taro</code> 编译后的代码已经经过了转义和压缩，因此还需要注意微信开发者工具的项目设置</p></blockquote><ul><li>设置关闭 <code>ES6</code> 转 <code>ES5</code> 功能</li><li>设置关闭上传代码时样式自动补全</li><li>设置关闭代码压缩上传</li></ul><p><img src="https://user-gold-cdn.xitu.io/2018/10/7/1664ea0616676b32" alt=""></p><h3 id="2-2-Taro-与-React-的差异"><a href="#2-2-Taro-与-React-的差异" class="headerlink" title="2.2 Taro 与 React 的差异"></a>2.2 Taro 与 React 的差异</h3><blockquote><p>由于微信小程序的限制，<code>React</code> 中某些写法和特性在 <code>Taro</code> 中还未能实现，后续将会逐渐完善。 截止到本小册发布前，<code>Taro</code> 的最新版本为 <code>1.1</code>，因此以下讲解默认版本为 <code>1.1</code></p></blockquote><h4 id="2-2-1-暂不支持在-render-之外的方法定义-JSX"><a href="#2-2-1-暂不支持在-render-之外的方法定义-JSX" class="headerlink" title="2.2.1 暂不支持在 render() 之外的方法定义 JSX"></a>2.2.1 暂不支持在 render() 之外的方法定义 JSX</h4><blockquote><p>由于微信小程序的 <code>template</code> 不能动态传值和传入函数，<code>Taro</code> 暂时也没办法支持在类方法中定义 <code>JSX</code></p></blockquote><p>无效情况</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  _render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">View</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">class App extends Component &#123;</span></span><br><span class="line"><span class="xml">  renderHeader(showHeader) &#123;</span></span><br><span class="line"><span class="xml">    return showHeader &amp;&amp; <span class="tag">&lt;<span class="name">Header</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">class App extends Component &#123;</span></span><br><span class="line"><span class="xml">  renderHeader = (showHeader) =&gt; &#123;</span></span><br><span class="line"><span class="xml">    return showHeader&amp; &amp; <span class="tag">&lt;<span class="name">Header</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;...</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><p>在 <code>render</code> 方法中定义</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; showHeader, showMain &#125; = <span class="keyword">this</span>.state</span><br><span class="line">    <span class="keyword">const</span> header = showHeader &amp;&amp; <span class="xml"><span class="tag">&lt;<span class="name">Header</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    const main = showMain &amp;&amp; <span class="tag">&lt;<span class="name">Main</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    return (</span></span><br><span class="line">      &lt;View&gt;</span><br><span class="line">        &#123;header&#125;</span><br><span class="line">        &#123;main&#125;</span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line"><span class="xml">    )</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;...</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-不能在包含-JSX-元素的-map-循环中使用-if-表达式"><a href="#2-2-2-不能在包含-JSX-元素的-map-循环中使用-if-表达式" class="headerlink" title="2.2.2 不能在包含 JSX 元素的 map 循环中使用 if 表达式"></a>2.2.2 不能在包含 JSX 元素的 map 循环中使用 if 表达式</h4><p>无效情况</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">numbers.map(<span class="function">(<span class="params">number</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> element = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">const</span> isOdd = number % <span class="number">2</span></span><br><span class="line">  <span class="keyword">if</span> (isOdd) &#123;</span><br><span class="line">    element = <span class="xml"><span class="tag">&lt;<span class="name">Custom</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">  return element</span></span><br><span class="line"><span class="xml">&#125;)</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">numbers.map((number) =&gt; &#123;</span></span><br><span class="line"><span class="xml">  let isOdd = false</span></span><br><span class="line"><span class="xml">  if (number % 2) &#123;</span></span><br><span class="line"><span class="xml">    isOdd = true</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">  return isOdd &amp;&amp; <span class="tag">&lt;<span class="name">Custom</span> /&gt;</span></span></span><br><span class="line"><span class="xml">&#125;)...</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><p>尽量在 <code>map</code> 循环中使用条件表达式或逻辑表达式。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">numbers.map(<span class="function">(<span class="params">number</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> isOdd = number % <span class="number">2</span></span><br><span class="line">  <span class="keyword">return</span> isOdd ? <span class="xml"><span class="tag">&lt;<span class="name">Custom</span> /&gt;</span> : null</span></span><br><span class="line"><span class="xml">&#125;)</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">numbers.map((number) =&gt; &#123;</span></span><br><span class="line"><span class="xml">  const isOdd = number % 2</span></span><br><span class="line"><span class="xml">  return isOdd &amp;&amp; <span class="tag">&lt;<span class="name">Custom</span> /&gt;</span></span></span><br><span class="line"><span class="xml">&#125;)...</span></span><br></pre></td></tr></table></figure><h4 id="2-2-3-不能使用-Array-map-之外的方法操作-JSX-数组"><a href="#2-2-3-不能使用-Array-map-之外的方法操作-JSX-数组" class="headerlink" title="2.2.3 不能使用 Array.map 之外的方法操作 JSX 数组"></a>2.2.3 不能使用 Array.map 之外的方法操作 JSX 数组</h4><blockquote><p>Taro 在小程序端实际上把 JSX 转换成了字符串模板，而一个原生 <code>JSX</code> 表达式实际上是一个 <code>React/Nerv</code> 元素(react - element)的构造器，因此在原生 JSX 中你可以对任何一组 React 元素进行操作。但在 Taro 中你只能使用 map 方法，Taro 转换成小程序中 <code>wx:for</code>…</p></blockquote><p>无效情况</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">test.push(<span class="xml"><span class="tag">&lt;<span class="name">View</span> /&gt;</span>)</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">numbers.forEach(numbers =&gt; &#123;</span></span><br><span class="line"><span class="xml">  if (someCase) &#123;</span></span><br><span class="line"><span class="xml">    a = <span class="tag">&lt;<span class="name">View</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;)</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">test.shift(<span class="tag">&lt;<span class="name">View</span> /&gt;</span>)</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">components.find(component =&gt; &#123;</span></span><br><span class="line"><span class="xml">  return component === <span class="tag">&lt;<span class="name">View</span> /&gt;</span></span></span><br><span class="line"><span class="xml">&#125;)</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">components.some(component =&gt; component.constructor.__proto__ === <span class="tag">&lt;<span class="name">View</span> /&gt;</span>.constructor)</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">numbers.filter(Boolean).map((number) =&gt; &#123;</span></span><br><span class="line"><span class="xml">  const element = <span class="tag">&lt;<span class="name">View</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  return <span class="tag">&lt;<span class="name">View</span> /&gt;</span></span></span><br><span class="line"><span class="xml">&#125;)...</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><p>先处理好需要遍历的数组，然后再用处理好的数组调用 map 方法。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">numbers.filter(isOdd).map(<span class="function">(<span class="params">number</span>) =&gt;</span> &lt;View /&gt;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; array.length; index++) &#123;</span><br><span class="line">  <span class="comment">// do you thing with array</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> element = array.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">View</span> /&gt;</span></span></span><br><span class="line"><span class="xml">&#125;)...</span></span><br></pre></td></tr></table></figure><h4 id="2-2-4-不能在-JSX-参数中使用匿名函数"><a href="#2-2-4-不能在-JSX-参数中使用匿名函数" class="headerlink" title="2.2.4 不能在 JSX 参数中使用匿名函数"></a>2.2.4 不能在 JSX 参数中使用匿名函数</h4><p>无效情况</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;View onClick=&#123;() =&gt; <span class="keyword">this</span>.handleClick()&#125; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;View onClick=&#123;(e) =&gt; <span class="keyword">this</span>.handleClick(e)&#125; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;View onClick=&#123;() =&gt; (&#123;&#125;)&#125; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;View onClick=&#123;<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;&#125; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;View onClick=&#123;<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;<span class="keyword">this</span>.handleClick(e)&#125;&#125; /&gt;...</span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><p>使用 <code>bind</code> 或 类参数绑定函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;View onClick=&#123;this.props.hanldeClick.bind(this)&#125; /&gt;</span><br></pre></td></tr></table></figure><h4 id="2-2-5-不能在-JSX-参数中使用对象展开符"><a href="#2-2-5-不能在-JSX-参数中使用对象展开符" class="headerlink" title="2.2.5 不能在 JSX 参数中使用对象展开符"></a>2.2.5 不能在 JSX 参数中使用对象展开符</h4><blockquote><p>微信小程序组件要求每一个传入组件的参数都必须预先设定好，而对象展开符则是动态传入不固定数量的参数。所以 <code>Taro</code> 没有办法支持该功能</p></blockquote><p>无效情况</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;View &#123;...this.props&#125; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;View &#123;...props&#125; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;Custom &#123;...props&#125; /&gt;</span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><p>开发者自行赋值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">render () &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; id, title &#125; = obj</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">id</span>=<span class="string">&#123;id&#125;</span> <span class="attr">title</span>=<span class="string">&#123;title&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">&#125;...</span></span><br></pre></td></tr></table></figure><h4 id="2-2-6-不允许在-JSX-参数（props）中传入-JSX-元素"><a href="#2-2-6-不允许在-JSX-参数（props）中传入-JSX-元素" class="headerlink" title="2.2.6 不允许在 JSX 参数（props）中传入 JSX 元素"></a>2.2.6 不允许在 JSX 参数（props）中传入 JSX 元素</h4><blockquote><p>由于微信小程序内置的组件化的系统不能通过属性（props） 传函数，而 props 传递函数可以说是 React 体系的根基之一，我们只能自己实现一套组件化系统。而自制的组件化系统不能使用内置组件化的 slot 功能。两权相害取其轻，我们暂时只能不支持该功能…</p></blockquote><p>无效情况</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Custom child=&#123;&lt;View /&gt;&#125; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;Custom child=&#123;() =&gt; <span class="xml"><span class="tag">&lt;<span class="name">View</span> /&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line">&lt;Custom child=&#123;function () &#123; &lt;View /&gt; &#125;&#125; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;Custom child=&#123;ary.map(a =&gt; &lt;View /&gt;)&#125; /&gt;...</span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><blockquote><p>通过 <code>props</code> 传值在 <code>JSX</code> 模板中预先判定显示内容，或通过 <code>props.children</code> 来嵌套子组件</p></blockquote><h4 id="2-2-7-不支持无状态组件（Stateless-Component"><a href="#2-2-7-不支持无状态组件（Stateless-Component" class="headerlink" title="2.2.7 不支持无状态组件（Stateless Component)"></a>2.2.7 不支持无状态组件（Stateless Component)</h4><blockquote><p>由于微信的 <code>template</code> 能力有限，不支持动态传值和函数，<code>Taro</code> 暂时只支持一个文件自定义一个组件。为了避免开发者疑惑，暂时不支持定义 <code>Stateless Component</code></p></blockquote><p>无效情况</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">View</span> /&gt;</span></span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">function Test (ary) &#123;</span></span><br><span class="line"><span class="xml">  return ary.map(() =&gt; <span class="tag">&lt;<span class="name">View</span> /&gt;</span>)</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">const Test = () =&gt; &#123;</span></span><br><span class="line"><span class="xml">  return <span class="tag">&lt;<span class="name">View</span> /&gt;</span></span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">const Test = function () &#123;</span></span><br><span class="line"><span class="xml">  return <span class="tag">&lt;<span class="name">View</span> /&gt;</span></span></span><br><span class="line"><span class="xml">&#125;...</span></span><br></pre></td></tr></table></figure><p><strong>解决方案</strong></p><p>使用 <code>class</code> 定义组件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View /&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-命名规范"><a href="#2-3-命名规范" class="headerlink" title="2.3 命名规范"></a>2.3 命名规范</h3><blockquote><p>Taro 函数命名使用驼峰命名法，如<code>onClick</code>，由于微信小程序的 WXML 不支持传递函数，函数名编译后会以字符串的形式绑定在 WXML 上，囿于 WXML 的限制，函数名有三项限制</p></blockquote><ul><li>方法名不能含有数字</li><li>方法名不能以下划线开头或结尾</li><li>方法名的长度不能大于 <code>20</code></li></ul><p>请遵守以上规则，否则编译后的代码在微信小程序中会报以下错误</p><p><img src="https://user-gold-cdn.xitu.io/2018/10/7/1664ea05f7c23984" alt=""></p><h3 id="2-4-推荐安装-ESLint-编辑器插件"><a href="#2-4-推荐安装-ESLint-编辑器插件" class="headerlink" title="2.4 推荐安装 ESLint 编辑器插件"></a>2.4 推荐安装 ESLint 编辑器插件</h3><blockquote><p>Taro 有些写法跟 React 有些差异，可以通过安装 ESLint 相关的编辑器插件来获得人性化的提示。由于不同编辑器安装的插件有所不同，具体安装方法请自行搜索，这里不再赘述。 如下图，就是安装插件后获得的提示</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/10/7/1664ea06098d0a4c" alt=""></p><p><img src="https://user-gold-cdn.xitu.io/2018/10/7/1664ea0608d0d42e" alt=""></p><h3 id="2-5-最佳编码方式"><a href="#2-5-最佳编码方式" class="headerlink" title="2.5 最佳编码方式"></a>2.5 最佳编码方式</h3><p><strong>组件传递函数属性名以 on 开头</strong></p><blockquote><p>在 <code>Taro</code> 中，父组件要往子组件传递函数，属性名必须以<code>on</code> 开头</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用 Custom 组件，传入 handleEvent 函数，属性名为 `onTrigger`</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  handleEvent () &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Custom onTrigger=&#123;<span class="keyword">this</span>.handleEvent&#125;&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Custom</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;...</span><br></pre></td></tr></table></figure><blockquote><p>这是因为，微信小程序端组件化是不能直接传递函数类型给子组件的，在 Taro 中是借助组件的事件机制来实现这一特性，而小程序中传入事件的时候属性名写法为 <code>bindmyevent</code> 或者 <code>bind:myevent</code></p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 当自定义组件触发“myevent”事件时，调用“onMyEvent”方法 --&gt;</span><br><span class="line">&lt;component-tag-name bindmyevent=<span class="string">"onMyEvent"</span> /&gt;</span><br><span class="line">&lt;!-- 或者可以写成 --&gt;</span><br><span class="line">&lt;component-tag-name bind:myevent=<span class="string">"onMyEvent"</span> /&gt;</span><br></pre></td></tr></table></figure><blockquote><p>所以 <code>Taro</code>中约定组件传递函数属性名以 <code>on</code> 开头，同时这也和内置组件的事件绑定写法保持一致了…</p></blockquote><p><strong>小程序端不要在组件中打印传入的函数</strong></p><blockquote><p>前面已经提到小程序端的组件传入函数的原理，所以在小程序端不要在组件中打印传入的函数，因为拿不到结果，但是 <code>this.props.onXxx &amp;&amp; this.props.onXxx()</code> 这种判断函数是否传入来进行调用的写法是完全支持的…</p></blockquote><p><strong>小程序端不要将在模板中用到的数据设置为 undefined</strong></p><ul><li>由于小程序不支持将 <code>data</code> 中任何一项的 <code>value</code> 设为 <code>undefined</code> ，在 <code>setState</code> 的时候也请避免这么用。你可以使用 <code>null</code> 来替代。</li><li>小程序端不要在组件中打印 <code>this.props.children</code><br>在微信小程序端是通过<code>&lt;slot /&gt;</code> 来实现往自定义组件中传入元素的，而 <code>Taro</code> 利用 <code>this.props.children</code> 在编译时实现了这一功能， <code>this.props.children</code> 会直接被编译成 <code>&lt;slot /&gt;</code> 标签，所以它在小程序端属于语法糖的存在，请不要在组件中打印它…</li></ul><p><strong>组件 state 与 props 里字段重名的问题</strong></p><blockquote><p>不要在 <code>state</code>与 <code>props</code> 上用同名的字段，因为这些被字段在微信小程序中都会挂在 <code>data</code> 上</p></blockquote><p><strong>小程序中页面生命周期 componentWillMount 不一致问题</strong></p><blockquote><p>由于微信小程序里页面在 <code>onLoad</code> 时才能拿到页面的路由参数，而页面 <code>onLoad</code> 前组件都已经 <code>attached</code> 了。因此页面的 <code>componentWillMount</code> 可能会与预期不太一致。例如：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误写法</span></span><br><span class="line">render () &#123;</span><br><span class="line">  <span class="comment">// 在 willMount 之前无法拿到路由参数</span></span><br><span class="line">  <span class="keyword">const</span> abc = <span class="keyword">this</span>.$router.params.abc</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Custom</span> <span class="attr">adc</span>=<span class="string">&#123;abc&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// 正确写法</span></span><br><span class="line"><span class="xml">componentWillMount () &#123;</span></span><br><span class="line"><span class="xml">  const abc = this.$router.params.abc</span></span><br><span class="line"><span class="xml">  this.setState(&#123;</span></span><br><span class="line"><span class="xml">    abc</span></span><br><span class="line"><span class="xml">  &#125;)</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">render () &#123;</span></span><br><span class="line"><span class="xml">  // 增加一个兼容判断</span></span><br><span class="line">  return this.state.abc &amp;&amp; &lt;Custom adc=&#123;abc&#125; /&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于不需要等到页面 <code>willMount</code> 之后取路由参数的页面则没有任何影响…</p><p><strong>JS 编码必须用单引号</strong></p><blockquote><p>在 <code>Taro</code> 中，<code>JS</code> 代码里必须书写单引号，特别是 <code>JSX</code> 中，如果出现双引号，可能会导致编译错误</p></blockquote><p><strong>process.env 的使用</strong></p><blockquote><p>不要以解构的方式来获取通过 <code>env</code>配置的 <code>process.env</code> 环境变量，请直接以完整书写的方式 <code>process.env.NODE_ENV</code>来进行使用</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误写法，不支持</span></span><br><span class="line"><span class="keyword">const</span> &#123; NODE_ENV = <span class="string">'development'</span> &#125; = process.env</span><br><span class="line"><span class="keyword">if</span> (NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确写法</span></span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;...</span><br></pre></td></tr></table></figure><p><strong>预加载</strong></p><blockquote><p>在微信小程序中，从调用 <code>Taro.navigateTo</code>、<code>Taro.redirectTo</code> 或 <code>Taro.switchTab</code> 后，到页面触发<code>componentWillMount</code> 会有一定延时。因此一些网络请求可以提前到发起跳转前一刻去请求</p></blockquote><p>Taro 提供了 <code>componentWillPreload</code> 钩子，它接收页面跳转的参数作为参数。可以把需要预加载的内容通过 <code>return</code> 返回，然后在页面触发 <code>componentWillMount</code> 后即可通过 <code>this.$preloadData</code> 获取到预加载的内容。…</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  componentWillMount () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'isFetching: '</span>, <span class="keyword">this</span>.isFetching)</span><br><span class="line">    <span class="keyword">this</span>.$preloadData</span><br><span class="line">      .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'res: '</span>, res)</span><br><span class="line">        <span class="keyword">this</span>.isFetching = <span class="literal">false</span></span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillPreload (params) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.fetchData(params.url)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fetchData () &#123;</span><br><span class="line">    <span class="keyword">this</span>.isFetching = <span class="literal">true</span></span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;...</span><br></pre></td></tr></table></figure><h2 id="三、Taro-设计思想及架构"><a href="#三、Taro-设计思想及架构" class="headerlink" title="三、Taro 设计思想及架构"></a>三、Taro 设计思想及架构</h2><blockquote><p>在 Taro 中采用的是编译原理的思想，所谓编译原理，就是一个对输入的源代码进行语法分析，语法树构建，随后对语法树进行转换操作再解析生成目标代码的过程。</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/10/8/1665182480dfc020" alt=""></p><h3 id="3-1-抹平多端差异"><a href="#3-1-抹平多端差异" class="headerlink" title="3.1 抹平多端差异"></a>3.1 抹平多端差异</h3><blockquote><p>基于编译原理，我们已经可以将 Taro 源码编译成不同端上可以运行的代码了，但是这对于实现多端开发还是远远不够。因为不同的平台都有自己的特性，每一个平台都不尽相同，这些差异主要体现在不同的组件标准与不同的 API 标准以及不同的运行机制上</p></blockquote><p>以小程序和 Web 端为例</p><p><img src="https://user-gold-cdn.xitu.io/2018/10/8/1665182486f397d9" alt=""></p><p><img src="https://user-gold-cdn.xitu.io/2018/10/8/1665182487386fef" alt=""></p><ul><li>可以看出小程序和 Web 端上组件标准与 API 标准有很大差异，这些差异仅仅通过代码编译手段是无法抹平的，例如你不能直接在编译时将小程序的 <code>&lt;view /&gt;</code> 直接编译成 <code>&lt;div /&gt;</code>，因为他们虽然看上去有些类似，但是他们的组件属性有很大不同的，仅仅依靠代码编译，无法做到一致，同理，众多 <code>API</code> 也面临一样的情况。针对这样的情况，<code>Taro</code> 采用了定制一套运行时标准来抹平不同平台之间的差异。</li><li>这一套标准主要以三个部分组成，包括标准运行时框架、标准基础组件库、标准端能力 API，其中运行时框架和 API 对应 <code>@taro/taro</code>，组件库对应 <code>@tarojs/components</code>，通过在不同端实现这些标准，从而达到去差异化的目的…</li></ul><p><img src="https://user-gold-cdn.xitu.io/2018/10/8/16651824884a5682" alt=""></p><p><img src="https://user-gold-cdn.xitu.io/2018/10/8/16651824b8ac59a4" alt=""></p><h2 id="四、CLI-原理及不同端的运行机制"><a href="#四、CLI-原理及不同端的运行机制" class="headerlink" title="四、CLI 原理及不同端的运行机制"></a>四、CLI 原理及不同端的运行机制</h2><h3 id="4-1-taro-cli-包"><a href="#4-1-taro-cli-包" class="headerlink" title="4.1 taro-cli 包"></a>4.1 taro-cli 包</h3><h4 id="4-1-1-Taro-命令"><a href="#4-1-1-Taro-命令" class="headerlink" title="4.1.1 Taro 命令"></a>4.1.1 Taro 命令</h4><blockquote><p><code>taro-cli</code> 包位于 <code>Taro</code> 工程的 <code>Packages</code> 目录下，通过 <code>npm install -g @tarojs/cli</code> 全局安装后，将会生成一个 <code>Taro</code> 命令。主要负责项目初始化、编译、构建等。直接在命令行输入 <code>Taro</code> ，会看到如下提示…</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">➜ taro</span><br><span class="line">👽 Taro v0<span class="number">.0</span><span class="number">.63</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Usage: taro &lt;command&gt; [options]</span><br><span class="line"></span><br><span class="line">  Options:</span><br><span class="line"></span><br><span class="line">    -V, --version       output the version number</span><br><span class="line">    -h, --help          output usage information</span><br><span class="line"></span><br><span class="line">  Commands:</span><br><span class="line"></span><br><span class="line">    init [projectName]  Init a project <span class="keyword">with</span> <span class="keyword">default</span> templete</span><br><span class="line">    build               Build a project <span class="keyword">with</span> options</span><br><span class="line">    update              Update packages <span class="keyword">of</span> taro</span><br><span class="line">    help [cmd]          display help <span class="keyword">for</span> [cmd]...</span><br></pre></td></tr></table></figure><p>里面包含了 Taro 所有命令用法及作用。</p><h4 id="4-1-2-包管理与发布"><a href="#4-1-2-包管理与发布" class="headerlink" title="4.1.2 包管理与发布"></a>4.1.2 包管理与发布</h4><ul><li>首先，我们需要了解 <code>taro-cli</code> 包与 <code>Taro</code> 工程的关系。</li><li>将 <code>Taro</code> 工程 <code>Clone</code> 之后，可以看到工程的目录结构如下，整体结构还是比较清晰的：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── CHANGELOG.md</span><br><span class="line">├── LICENSE</span><br><span class="line">├── README.md</span><br><span class="line">├── build</span><br><span class="line">├── docs</span><br><span class="line">├── lerna-debug.log</span><br><span class="line">├── lerna.json        // Lerna 配置文件</span><br><span class="line">├── package.json</span><br><span class="line">├── packages</span><br><span class="line">│   ├── eslint-config-taro</span><br><span class="line">│   ├── eslint-plugin-taro</span><br><span class="line">│   ├── postcss-plugin-constparse</span><br><span class="line">│   ├── postcss-pxtransform</span><br><span class="line">│   ├── taro</span><br><span class="line">│   ├── taro-async-await</span><br><span class="line">│   ├── taro-cli</span><br><span class="line">│   ├── taro-components</span><br><span class="line">│   ├── taro-components-rn</span><br><span class="line">│   ├── taro-h5</span><br><span class="line">│   ├── taro-plugin-babel</span><br><span class="line">│   ├── taro-plugin-csso</span><br><span class="line">│   ├── taro-plugin-sass</span><br><span class="line">│   ├── taro-plugin-uglifyjs</span><br><span class="line">│   ├── taro-redux</span><br><span class="line">│   ├── taro-redux-h5</span><br><span class="line">│   ├── taro-rn</span><br><span class="line">│   ├── taro-rn-runner</span><br><span class="line">│   ├── taro-router</span><br><span class="line">│   ├── taro-transformer-wx</span><br><span class="line">│   ├── taro-weapp</span><br><span class="line">│   └── taro-webpack-runner</span><br><span class="line">└── yarn.lock...</span><br></pre></td></tr></table></figure><blockquote><p><code>Taro</code> 项目主要是由一系列 <code>NPM</code> 包组成，位于工程的 <code>Packages</code> 目录下。它的包管理方式和 <code>Babel</code> 项目一样，将整个项目作为一个 <code>monorepo</code> 来进行管理，并且同样使用了包管理工具 <code>Lerna</code></p></blockquote><p><code>Packages</code> 目录下十几个包中，最常用的项目初始化与构建的命令行工具 <code>Taro CLI</code> 就是其中一个。在 <code>Taro</code> 工程根目录运行 <code>lerna publish</code> 命令之后，<code>lerna.json</code> 里面配置好的所有的包会被发布到 <code>NPM</code> 上</p><h4 id="4-1-3-taro-cli-包的目录结构如下"><a href="#4-1-3-taro-cli-包的目录结构如下" class="headerlink" title="4.1.3 taro-cli 包的目录结构如下"></a>4.1.3 taro-cli 包的目录结构如下</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">./</span><br><span class="line">├── bin        <span class="comment">// 命令行</span></span><br><span class="line">│   ├── taro              <span class="comment">// taro 命令</span></span><br><span class="line">│   ├── taro-build        <span class="comment">// taro build 命令</span></span><br><span class="line">│   ├── taro-update       <span class="comment">// taro update 命令</span></span><br><span class="line">│   └── taro-init         <span class="comment">// taro init 命令</span></span><br><span class="line">├── package.json</span><br><span class="line">├── node_modules</span><br><span class="line">├── src</span><br><span class="line">│   ├── build.js        <span class="comment">// taro build 命令调用，根据 type 类型调用不同的脚本</span></span><br><span class="line">│   ├── config</span><br><span class="line">│   │   ├── babel.js        <span class="comment">// Babel 配置</span></span><br><span class="line">│   │   ├── babylon.js      <span class="comment">// JavaScript 解析器 babylon 配置</span></span><br><span class="line">│   │   ├── browser_list.js <span class="comment">// autoprefixer browsers 配置</span></span><br><span class="line">│   │   ├── index.js        <span class="comment">// 目录名及入口文件名相关配置</span></span><br><span class="line">│   │   └── uglify.js</span><br><span class="line">│   ├── creator.js</span><br><span class="line">│   ├── h5.js       <span class="comment">// 构建h5 平台代码</span></span><br><span class="line">│   ├── project.js  <span class="comment">// taro init 命令调用，初始化项目</span></span><br><span class="line">│   ├── rn.js       <span class="comment">// 构建React Native 平台代码</span></span><br><span class="line">│   ├── util        <span class="comment">// 一系列工具函数</span></span><br><span class="line">│   │   ├── index.js</span><br><span class="line">│   │   ├── npm.js</span><br><span class="line">│   │   └── resolve_npm_files.js</span><br><span class="line">│   └── weapp.js        <span class="comment">// 构建小程序代码转换</span></span><br><span class="line">├── templates           <span class="comment">// 脚手架模版</span></span><br><span class="line">│   └── <span class="keyword">default</span></span><br><span class="line">│       ├── appjs</span><br><span class="line">│       ├── config</span><br><span class="line">│       │   ├── dev</span><br><span class="line">│       │   ├── index</span><br><span class="line">│       │   └── prod</span><br><span class="line">│       ├── editorconfig</span><br><span class="line">│       ├── eslintrc</span><br><span class="line">│       ├── gitignor...</span><br></pre></td></tr></table></figure><blockquote><p>通过上面的目录树可以发现，<code>taro-cli</code> 工程的文件并不算多，主要目录有：<code>/bin</code>、<code>/src</code>、<code>/template</code></p></blockquote><h3 id="4-2-用到的核心库"><a href="#4-2-用到的核心库" class="headerlink" title="4.2 用到的核心库"></a>4.2 用到的核心库</h3><ul><li><a href="https://github.com/tj/commander.js/" target="_blank" rel="noopener">tj/commander.js</a> Node.js - 命令行接口全面的解决方案</li><li><a href="https://github.com/jprichardson/node-fs-extra" target="_blank" rel="noopener">jprichardson/node-fs-extra</a> - 在 Node.js 的 fs 基础上增加了一些新的方法，更好用，还可以拷贝模板。</li><li><a href="https://github.com/chalk/chalk" target="_blank" rel="noopener">chalk/chalk</a> - 可以用于控制终端输出字符串的样式</li><li><a href="https://github.com/SBoudrias/Inquirer.js/" target="_blank" rel="noopener">SBoudrias/Inquirer.js - Node.js</a> 命令行交互工具，通用的命令行用户界面集合，可以和用户进行交互</li><li><a href="https://github.com/sindresorhus/ora" target="_blank" rel="noopener">sindresorhus/ora</a> - 实现加载中的状态是一个 Loading 加前面转起来的小圈圈，成功了是一个 Success 加前面一个小钩钩</li><li><a href="https://github.com/sboudrias/mem-fs-editor" target="_blank" rel="noopener">SBoudrias/mem-fs-editor</a> - 提供一系列 API，方便操作模板文件</li><li><a href="https://github.com/shelljs/shelljs" target="_blank" rel="noopener">shelljs/shelljs </a> - ShellJS 是 Node.js 扩展，用于实现 Unix shell 命令执行。</li></ul><h3 id="4-3-Taro-Init"><a href="#4-3-Taro-Init" class="headerlink" title="4.3 Taro Init"></a>4.3 Taro Init</h3><p><img src="https://user-gold-cdn.xitu.io/2018/10/8/16651547b6ddebe1" alt=""></p><blockquote><p>当我们全局安装 <code>taro-cli</code> 包之后，我们的命令行里就有了 Taro 命令</p></blockquote><ul><li>那么 <code>Taro</code> 命令是怎样添加进去的呢？其原因在于 <code>package.json</code> 里面的 <code>bin</code>字段：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"bin"</span>: &#123;</span><br><span class="line">    <span class="string">"taro"</span>: <span class="string">"bin/taro"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码指定，Taro 命令对应的可执行文件为 <code>bin/taro</code> 。NPM 会寻找这个文件，在 <code>[prefix]/bin</code> 目录下建立符号链接。在上面的例子中，Taro 会建立符号链接 <code>[prefix]/bin/taro</code>。由于 <code>[prefix]/bin</code>目录会在运行时加入系统的 PATH 变量，因此在运行 NPM 时，就可以不带路径，直接通过命令来调用这些脚本。</p><ul><li>关于<code>prefix</code>，可以通过<code>npm config get prefix</code>获取。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm config get prefix</span><br><span class="line">/usr/local</span><br></pre></td></tr></table></figure><p>通过下列命令可以更加清晰的看到它们之间的符号链接…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls -al `which taro`</span><br><span class="line">lrwxr-xr-x  1 chengshuai  admin  40  6 15 10:51 /usr/local/bin/taro -&gt; ../lib/node_modules/@tarojs/cli/bin/taro...</span><br></pre></td></tr></table></figure><h4 id="4-3-1-命令关联与参数解析"><a href="#4-3-1-命令关联与参数解析" class="headerlink" title="4.3.1 命令关联与参数解析"></a>4.3.1 命令关联与参数解析</h4><blockquote><p>这里就不得不提到一个有用的包：<code>tj/commander.js</code> ，<code>Node.js</code> 命令行接口全面的解决方案，灵感来自于 Ruby’s commander。可以自动的解析命令和参数，合并多选项，处理短参等等，功能强大，上手简单</p></blockquote><p>更主要的，<code>commander</code> 支持 <code>Git</code> 风格的子命令处理，可以根据子命令自动引导到以特定格式命名的命令执行文件，文件名的格式是 <code>[command]-[subcommand]</code>，例如</p><ul><li><code>taro init</code> =&gt; <code>taro-init</code></li><li><code>taro build</code> =&gt; <code>taro-build</code></li><li><code>/bin/taro</code> 文件内容不多，核心代码也就那几行 <code>.command()</code> 命令：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /usr/bin/env node</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">'commander'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;getPkgVersion&#125; = <span class="built_in">require</span>(<span class="string">'../src/util'</span>)</span><br><span class="line"></span><br><span class="line">program</span><br><span class="line">  .version(getPkgVersion())</span><br><span class="line">  .usage(<span class="string">'&lt;command&gt; [options]'</span>)</span><br><span class="line">  .command(<span class="string">'init [projectName]'</span>, <span class="string">'Init a project with default templete'</span>)</span><br><span class="line">  .command(<span class="string">'build'</span>, <span class="string">'Build a project with options'</span>)</span><br><span class="line">  .command(<span class="string">'update'</span>, <span class="string">'Update packages of taro'</span>)</span><br><span class="line">  .parse(process.argv)...</span><br></pre></td></tr></table></figure><blockquote><p>通过上面代码可以发现，<code>init</code>，<code>build</code>    ，<code>update</code>等命令都是通过<code>.command(name, description)</code>方法定义的，然后通过 <code>.parse(arg)</code> 方法解析参数</p></blockquote><h4 id="4-3-2-参数解析及与用户交互"><a href="#4-3-2-参数解析及与用户交互" class="headerlink" title="4.3.2 参数解析及与用户交互"></a>4.3.2 参数解析及与用户交互</h4><ul><li><code>commander</code> 包可以自动解析命令和参数，在配置好命令之后，还能够自动生成 <code>help</code>（帮助）命令和<code>version</code>（版本查看） 命令。并且通过<code>program.args</code>便可以获取命令行的参数，然后再根据参数来调用不同的脚本。</li><li>但当我们运行 <code>taro init</code> 命令后，如下所示的命令行交互又是怎么实现的呢？…</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ taro init taroDemo</span><br><span class="line">Taro 即将创建一个新项目!</span><br><span class="line">Need help? Go and open issue: https://github.com/NervJS/taro/issues/new</span><br><span class="line"></span><br><span class="line">Taro v0.0.50</span><br><span class="line"></span><br><span class="line">? 请输入项目介绍！</span><br><span class="line">? 请选择模板 默认模板...</span><br></pre></td></tr></table></figure><p>这里使用的是 <code>SBoudrias/Inquirer.js</code> 来处理命令行交互。</p><p>用法其实很简单</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inquirer = <span class="built_in">require</span>(<span class="string">'inquirer'</span>)  <span class="comment">// npm i inquirer -D</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> conf.description !== <span class="string">'string'</span>) &#123;</span><br><span class="line">      prompts.push(&#123;</span><br><span class="line">        type: <span class="string">'input'</span>,</span><br><span class="line">        name: <span class="string">'description'</span>,</span><br><span class="line">        message: <span class="string">'请输入项目介绍！'</span></span><br><span class="line">      &#125;)</span><br><span class="line">&#125;...</span><br></pre></td></tr></table></figure><ul><li><code>prompt()</code>接受一个问题对象的数据，在用户与终端交互过程中，将用户的输入存放在一个答案对象中，然后返回一个<code>Promise</code>，通过<code>then()</code>获取到这个答案对象。<br>借此，新项目的名称、版本号、描述等信息可以直接通过终端交互插入到项目模板中，完善交互流程。</li><li>当然，交互的问题不仅限于此，可以根据自己项目的情况，添加更多的交互问题。<code>inquirer.js</code>强大的地方在于，支持很多种交互类型，除了简单的input，还有<code>confirm</code>、<code>list</code>、<code>password</code>、<code>checkbox</code>等，具体可以参见项目的工程 README。<br>此外，你在执行异步操作的过程中，还可以使用 <code>sindresorhus/ora</code> 来添加一下 <code>Loading</code> 效果。使用 <code>chalk/chalk</code> 给终端的输出添加各种样式…</li></ul><h4 id="4-3-3-模版文件操作"><a href="#4-3-3-模版文件操作" class="headerlink" title="4.3.3 模版文件操作"></a>4.3.3 模版文件操作</h4><p><strong>最后就是模版文件操作了，主要分为两大块：</strong></p><ul><li>将输入的内容插入到模板中</li><li>根据命令创建对应目录结构，copy 文件</li><li>更新已存在文件内容</li></ul><blockquote><p>这些操作基本都是在 <code>/template/index.js</code> 文件里。<br>这里还用到了 <code>shelljs/shelljs</code> 执行 <code>shell</code> 脚本，如初始化 <code>Git： git init</code>，项目初始化之后安装依赖 <code>npm install</code>等</p></blockquote><p><strong>拷贝模板文件</strong></p><blockquote><p>拷贝模版文件主要是使用 <code>jprichardson/node-fs-extra</code>的 <code>copyTpl()</code>方法，此方法使用 <code>ejs</code> 模板语法，可以将输入的内容插入到模版的对应位置：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.fs.copyTpl(</span><br><span class="line">  project,</span><br><span class="line">  path.join(projectPath, <span class="string">'project.config.json'</span>),</span><br><span class="line">  &#123;description, projectName&#125;</span><br><span class="line">);...</span><br></pre></td></tr></table></figure><h3 id="4-4-Taro-Build"><a href="#4-4-Taro-Build" class="headerlink" title="4.4 Taro Build"></a>4.4 Taro Build</h3><ul><li><code>taro build</code> 命令是整个 <code>Taro</code> 项目的灵魂和核心，主要负责多端代码编译（H5，小程序，<code>React Native</code>等）。</li><li><code>Taro</code> 命令的关联，参数解析等和 <code>taro init</code> 其实是一模一样的，那么最关键的代码转换部分是怎样实现的呢？…</li></ul><h4 id="4-4-1-编译工作流与抽象语法树（AST）"><a href="#4-4-1-编译工作流与抽象语法树（AST）" class="headerlink" title="4.4.1 编译工作流与抽象语法树（AST）"></a>4.4.1 编译工作流与抽象语法树（AST）</h4><blockquote><p>Taro 的核心部分就是将代码编译成其他端（H5、小程序、React Native 等）代码。一般来说，将一种结构化语言的代码编译成另一种类似的结构化语言的代码包括以下几个步骤</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/10/8/166515483b7fa7c0" alt=""></p><p>首先是 <code>Parse</code>，将代码解析（<code>Parse</code>）成抽象语法树（Abstract Syntex Tree），然后对 <code>AST</code>进行遍历（<code>traverse</code>）和替换(<code>replace</code>)（这对于前端来说其实并不陌生，可以类比 <code>DOM</code> 树的操作），最后是生成（<code>generate</code>），根据新的 <code>AST</code> 生成编译后的代码…</p><h4 id="4-4-2-Babel-模块"><a href="#4-4-2-Babel-模块" class="headerlink" title="4.4.2 Babel 模块"></a>4.4.2 Babel 模块</h4><p><code>Babel</code> 是一个通用的多功能的 JavaScript编译器，更确切地说是源码到源码的编译器，通常也叫做转换编译器（transpiler）。 意思是说你为 Babel 提供一些 JavaScript 代码，Babel 更改这些代码，然后返回给你新生成的代码…</p><h4 id="4-4-3-解析页面-Config-配置"><a href="#4-4-3-解析页面-Config-配置" class="headerlink" title="4.4.3 解析页面 Config 配置"></a>4.4.3 解析页面 Config 配置</h4><blockquote><p>在业务代码编译成小程序的代码过程中，有一步是将页面入口 JS 的 Config 属性解析出来，并写入 <code>*.json</code> 文件，供小程序使用。那么这一步是怎么实现的呢？这里将这部分功能的关键代码抽取出来：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. babel-traverse方法， 遍历和更新节点</span></span><br><span class="line">traverse(ast, &#123;  </span><br><span class="line">  ClassProperty(astPath) &#123; <span class="comment">// 遍历类的属性声明</span></span><br><span class="line">    <span class="keyword">const</span> node = astPath.node</span><br><span class="line">    <span class="keyword">if</span> (node.key.name === <span class="string">'config'</span>) &#123; <span class="comment">// 类的属性名为 config</span></span><br><span class="line">      configObj = traverseObjectNode(node)</span><br><span class="line">      astPath.remove() <span class="comment">// 将该方法移除掉</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 遍历，解析为 JSON 对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">traverseObjectNode</span>(<span class="params">node, obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (node.type === <span class="string">'ClassProperty'</span> || node.type === <span class="string">'ObjectProperty'</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> properties = node.value.properties</span><br><span class="line">      obj = &#123;&#125;</span><br><span class="line">      properties.forEach(<span class="function">(<span class="params">p, index</span>) =&gt;</span> &#123;</span><br><span class="line">        obj[p.key.name] = traverseObjectNode(p.value)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> obj</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (node.type === <span class="string">'ObjectExpression'</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> properties = node.properties</span><br><span class="line">    obj = &#123;&#125;</span><br><span class="line">    properties.forEach(<span class="function">(<span class="params">p, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// const t = require('babel-types')  AST 节点的 Lodash 式工具库</span></span><br><span class="line">      <span class="keyword">const</span> key = t.isIdentifier(p.key) ? p.key.name : p.key.value</span><br><span class="line">      obj[key] = traverseObjectNode(p.value)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (node.type === <span class="string">'ArrayExpression'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> node.elements.map(<span class="function"><span class="params">item</span> =&gt;</span> traverseObjectNode(item))</span><br><span class="line"> ...</span><br></pre></td></tr></table></figure><h2 id="五、Taro-组件库及-API-的设计与适配"><a href="#五、Taro-组件库及-API-的设计与适配" class="headerlink" title="五、Taro 组件库及 API 的设计与适配"></a>五、Taro 组件库及 API 的设计与适配</h2><h3 id="5-1-多端差异"><a href="#5-1-多端差异" class="headerlink" title="5.1 多端差异"></a>5.1 多端差异</h3><h4 id="5-1-1-组件差异"><a href="#5-1-1-组件差异" class="headerlink" title="5.1.1 组件差异"></a>5.1.1 组件差异</h4><p>小程序、H5 以及快应用都可以划分为 XML 类，React Native 归为 JSX 类，两种语言风牛马不相及，给适配设置了非常大的障碍。XML 类有个明显的特点是关注点分离（Separation of Concerns），即语义层（XML）、视觉层（CSS）、交互层（JavaScript）三者分离的松耦合形式，JSX 类则要把三者混为一体，用脚本来包揽三者的工作…</p><p><strong>不同端的组件的差异还体现在定制程度上</strong></p><ul><li>H5 标签（组件）提供最基础的功能——布局、表单、媒体、图形等等；</li><li>小程序组件相对 H5 有了一定程度的定制，我们可以把小程序组件看作一套类似于 H5 的 UI 组件库；</li><li>React Native 端组件也同样如此，而且基本是专“组”专用的，比如要触发点击事件就得用 Touchable 或者 Text 组件，要渲染文本就得用 Text 组件（虽然小程序也提供了 Text 组件，但它的文本仍然可以直接放到 view 之类的组件里）…</li></ul><h4 id="5-1-2-API-差异"><a href="#5-1-2-API-差异" class="headerlink" title="5.1.2 API 差异"></a>5.1.2 API 差异</h4><p><strong>各端 API 的差异具有定制化、接口不一、能力限制的特点</strong></p><ul><li>定制化：各端所提供的 API 都是经过量身打造的，比如小程序的开放接口类 API，完全是针对小程序所处的微信环境打造的，其提供的功能以及外在表现都已由框架提供实现，用户上手可用，毋须关心内部实现。</li><li>接口不一：相同的功能，在不同端下的调用方式以及调用参数等也不一样，比如 <code>socket</code>，小程序中用 <code>wx.connectSocket</code> 来连接，<code>H5</code> 则用 <code>new WebSocket()</code> 来连接，这样的例子我们可以找到很多个。</li><li>能力限制：各端之间的差异可以进行定制适配，然而并不是所有的 <code>API</code>（此处特指小程序 <code>API</code>，因为多端适配是向小程序看齐的）在各个端都能通过定制适配来实现，因为不同端所能提供的端能力“大异小同”，这是在适配过程中不可抗拒、不可抹平的差异…</li></ul><h3 id="5-2-多端适配"><a href="#5-2-多端适配" class="headerlink" title="5.2 多端适配"></a>5.2 多端适配</h3><h4 id="5-2-1-样式处理"><a href="#5-2-1-样式处理" class="headerlink" title="5.2.1 样式处理"></a>5.2.1 样式处理</h4><p>H5 端使用官方提供的 WEUI 进行适配，React Native 端则在组件内添加样式，并通过脚本来控制一些状态类的样式，框架核心在编译的时候把源代码的 class 所指向的样式通过 css-to-react-native 进行转译，所得 StyleSheet 样式传入组件的 style 参数，组件内部会对样式进行二次处理，得到最终的样式…</p><p><img src="https://user-gold-cdn.xitu.io/2018/10/8/1665155932b630fe" alt=""></p><p><strong>为什么需要对样式进行二次处理？</strong></p><blockquote><p>部分组件是直接把传入 <code>style</code> 的样式赋给最外层的 <code>React Native</code> 原生组件，但部分经过层层封装的组件则不然，我们要把容器样式、内部样式和文本样式离析。为了方便解释，我们把这类组件简化为以下的形式：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;View style=&#123;wrapperStyle&#125;&gt;</span><br><span class="line">  &lt;View style=&#123;containerStyle&#125;&gt;</span><br><span class="line">    &lt;Text style=&#123;textStyle&#125;&gt;Hello World&lt;/Text&gt;</span><br><span class="line">  &lt;/View&gt;</span><br><span class="line">&lt;/View&gt;</span><br></pre></td></tr></table></figure><blockquote><p>假设组件有样式 <code>margin-top</code>、<code>background-color</code> 和 <code>font-size</code>，转译传入组件后，就要把分别把它们传到<code>wrapperStyle</code>、<code>containerStyle</code> 和 <code>textStyle</code>，可参考 <code>ScrollView</code> 的 <code>style</code> 和 <code>contentContainerStyle</code>…</p></blockquote><h4 id="5-2-2-组件封装"><a href="#5-2-2-组件封装" class="headerlink" title="5.2.2 组件封装"></a>5.2.2 组件封装</h4><blockquote><p>组件的封装则是一个“仿制”的过程，利用端提供的原材料，加工成通用的组件，暴露相对统一的调用方式。我们用 <code>&lt;Button /&gt;</code> 这个组件来举例，在小程序端它也许是长这样子的</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button size=&quot;mini&quot; plain=&#123;&#123;plain&#125;&#125; loading=&#123;&#123;loading&#125;&#125; hover-class=&quot;you-hover-me&quot;&gt;&lt;/button&gt;</span><br></pre></td></tr></table></figure><blockquote><p>如果要实现 <code>H5</code> 端这么一个按钮，大概会像下面这样，在组件内部把小程序的按钮特性实现一遍，然后暴露跟小程序一致的调用方式，就完成了 <code>H5</code> 端一个组件的设计</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">  &#123;<span class="attr">...omit</span>(<span class="attr">this.props</span>, ['<span class="attr">hoverClass</span>', '<span class="attr">onTouchStart</span>', '<span class="attr">onTouchEnd</span>'])&#125;</span></span><br><span class="line"><span class="tag">  <span class="attr">className</span>=<span class="string">&#123;cls&#125;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">&#123;style&#125;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">onClick</span>=<span class="string">&#123;onClick&#125;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">disabled</span>=<span class="string">&#123;disabled&#125;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">onTouchStart</span>=<span class="string">&#123;_onTouchStart&#125;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">onTouchEnd</span>=<span class="string">&#123;_onTouchEnd&#125;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  &#123;loading &amp;&amp; <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">'weui-loading'</span> /&gt;</span>&#125;</span><br><span class="line">  &#123;children&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span>...</span><br></pre></td></tr></table></figure><ul><li>其他端的组件适配相对 H5 端来说会更曲折复杂一些，因为 H5 跟小程序的语言较为相似，而其他端需要整合特定端的各种组件，以及利用端组件的特性来实现，比如在 React Native 中实现这个按钮，则需要用到 <code>&lt;Touchable* /&gt;</code>、<code>&lt;View /&gt;</code>、<code>&lt;Text /&gt;</code>，要实现动画则需要用上 <code>&lt;Animated.View /&gt;</code>，还有就是相对于 H5 和小程序比较容易实现的 touch 事件，在 React Native 中则需要用上 PanResponder 来进行“仿真”，总之就是，因“端”制宜，一切为了最后只需一行代码通行多端！</li><li>除了属性支持外，事件回调的参数也需要进行统一，为此，需要在内部进行处理，比如 Input 的 <code>onInput</code> 事件，需要给它造一个类似小程序相同事件的回调参数，比如 <code>{ target: { value: text }</code>, <code>detail: { value: text }</code> }，这样，开发者们就可以像下面这样处理回调事件，无需关心中间发生了什么…</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onInputHandler</span> (<span class="params">&#123; target, detail &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(target.value, detail.value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、JSX-转换微信小程序模板的实现"><a href="#六、JSX-转换微信小程序模板的实现" class="headerlink" title="六、JSX 转换微信小程序模板的实现"></a>六、JSX 转换微信小程序模板的实现</h2><h3 id="6-1-代码的本质"><a href="#6-1-代码的本质" class="headerlink" title="6.1 代码的本质"></a>6.1 代码的本质</h3><blockquote><p>不管是任意语言的代码，其实它们都有两个共同点</p></blockquote><ul><li>它们都是由字符串构成的文本</li><li>它们都要遵循自己的语言规范</li></ul><p>第一点很好理解，既然代码是字符串构成的，我们要修改/编译代码的最简单的方法就是使用字符串的各种正则表达式。例如我们要将 <code>JSON</code> 中一个键名 <code>foo</code> 改为 <code>bar</code>，只要写一个简单的正则表达式就能做到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jsonStr.replace(/(?&lt;=&quot;)foo(?=&quot;\s*:)/i, &apos;bar&apos;)...</span><br></pre></td></tr></table></figure><blockquote><p>编译就是把一段字符串改成另外一段字符串</p></blockquote><h3 id="6-2-Babel"><a href="#6-2-Babel" class="headerlink" title="6.2 Babel"></a>6.2 Babel</h3><blockquote><p><code>JavaScript</code> 社区其实有非常多 <code>parser</code> 实现，比如 <code>Acorn</code>、<code>Esprima</code>、<code>Recast</code>、<code>Traceur</code>、<code>Cherow</code> 等等。但我们还是选择使用 <code>Babel</code>，主要有以下几个原因</p></blockquote><ul><li><code>Babel</code> 可以解析还没有进入 ECMAScript 规范的语法。例如装饰器这样的提案，虽然现在没有进入标准但是已经广泛使用有一段时间了；</li><li><code>Babel</code> 提供插件机制解析 <code>TypeScript</code>、<code>Flow</code>、<code>JSX</code>这样的 <code>JavaScript</code> 超集，不必单独处理这些语言；</li><li><code>Babel</code> 拥有庞大的生态，有非常多的文档和样例代码可供参考；<br>除去 <code>parser</code> 本身，<code>Babel</code> 还提供各种方便的工具库可以优化、生成、调试代码…</li></ul><p><strong>Babylon（ @babel/parser）</strong></p><blockquote><p><code>Babylon</code> 就是 <code>Babel</code> 的 <code>parser</code>。它可以把一段符合规范的 JavaScript 代码输出成一个符合 Esprima 规范的 <code>AST</code>。 大部分 <code>parser</code> 生成的 <code>AST</code> 数据结构都遵循 Esprima 规范，包括 ESLint 的 <code>parser</code> ESTree。这就意味着我们熟悉了 Esprima 规范的 <code>AST</code> 数据结构还能去写 ESLint 插件。</p></blockquote><p>我们可以尝试解析 <code>n * n</code> 这句简单的表达式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> babylon <span class="keyword">from</span> <span class="string">"babylon"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> code = <span class="string">`n * n`</span>;</span><br><span class="line"></span><br><span class="line">babylon.parse(code);...</span><br></pre></td></tr></table></figure><p>最终 <code>Babylon</code> 会解析成这样的数据结构：</p><p><img src="https://user-gold-cdn.xitu.io/2018/10/8/1665157669296bc1" alt=""></p><blockquote><p>你也可以使用 <a href="https://astexplorer.net/" target="_blank" rel="noopener">ASTExploroer</a> 快速地查看代码的 <code>AST</code></p></blockquote><p><strong>Babel-traverse (@babel/traverse)</strong></p><blockquote><p><code>babel-traverse</code> 可以遍历由 Babylon 生成的抽象语法树，并把抽象语法树的各个节点从拓扑数据结构转化成一颗路径（Path）树，Path 表示两个节点之间连接的响应式（Reactive）对象，它拥有添加、删除、替换节点等方法。当你调用这些修改树的方法之后，路径信息也会被更新。除此之外，Path 还提供了一些操作作用域（Scope） 和标识符绑定（Identifier Binding） 的方法可以去做处理一些更精细复杂的需求。可以说 <code>babel-traverse</code> 是使用 Babel 作为编译器最核心的模块…</p></blockquote><p>让我们尝试一下把一段代码中的 <code>n * n</code> 变为 <code>x * x</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> babylon <span class="keyword">from</span> <span class="string">"@babel/parser"</span>;</span><br><span class="line"><span class="keyword">import</span> traverse <span class="keyword">from</span> <span class="string">"babel-traverse"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> code = <span class="string">`function square(n) &#123;</span></span><br><span class="line"><span class="string">  return n * n;</span></span><br><span class="line"><span class="string">&#125;`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ast = babylon.parse(code);</span><br><span class="line"></span><br><span class="line">traverse(ast, &#123;</span><br><span class="line">  enter(path) &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      path.node.type === <span class="string">"Identifier"</span> &amp;&amp;</span><br><span class="line">      path.node.name === <span class="string">"n"</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      path.node.name = <span class="string">"x"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);...</span><br></pre></td></tr></table></figure><p><strong>Babel-types（@babel/types）</strong></p><blockquote><p><code>babel-types</code> 是一个用于 <code>AST</code> 节点的 <code>Lodash</code> 式工具库，它包含了构造、验证以及变换 <code>AST</code>节点的方法。 该工具库包含考虑周到的工具方法，对编写处理 <code>AST</code> 逻辑非常有用。例如我们之前在 <code>babel-traverse</code>中改变标识符 n 的代码可以简写为：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import traverse from &quot;babel-traverse&quot;;</span><br><span class="line">import * as t from &quot;babel-types&quot;;</span><br><span class="line"></span><br><span class="line">traverse(ast, &#123;</span><br><span class="line">  enter(path) &#123;</span><br><span class="line">    if (t.isIdentifier(path.node, &#123; name: &quot;n&quot; &#125;)) &#123;</span><br><span class="line">      path.node.name = &quot;x&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>可以发现使用 <code>babel-types</code>能提高我们转换代码的可读性，在配合 TypeScript 这样的静态类型语言后，<code>babel-types</code> 的方法还能提供类型校验的功能，能有效地提高我们转换代码的健壮性和可靠性…</p></blockquote><h3 id="6-3-实践例子"><a href="#6-3-实践例子" class="headerlink" title="6.3 实践例子"></a>6.3 实践例子</h3><p>以一个简单 <code>Page</code> 页面为例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Taro, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@tarojs/taro'</span></span><br><span class="line"><span class="keyword">import</span> &#123; View, Text &#125; <span class="keyword">from</span> <span class="string">'@tarojs/components'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  config = &#123;</span><br><span class="line">    navigationBarTitleText: <span class="string">'首页'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  state = &#123;</span><br><span class="line">    numbers: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.props.onTest()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">const</span> oddNumbers = <span class="keyword">this</span>.state.numbers.filter(<span class="function"><span class="params">number</span> =&gt;</span> number &amp; <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;ScrollView className=<span class="string">'home'</span> scrollTop=&#123;<span class="literal">false</span>&#125;&gt;</span><br><span class="line">        奇数：</span><br><span class="line">        &#123;</span><br><span class="line">          oddNumbers.map(<span class="function"><span class="params">number</span> =&gt;</span> &lt;Text onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;&#123;number&#125;&lt;<span class="regexp">/Text&gt;)</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        偶数：</span></span><br><span class="line"><span class="regexp">        &#123;</span></span><br><span class="line"><span class="regexp">          numbers.map(number =&gt; number % 2 === 0 &amp;&amp; &lt;Text onClick=&#123;this.handleClick&#125;&gt;&#123;number&#125;&lt;/</span>Text&gt;)</span><br><span class="line">        &#125;</span><br><span class="line">      &lt;<span class="regexp">/ScrollView&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;...</span></span><br></pre></td></tr></table></figure><h4 id="6-3-1-设计思路"><a href="#6-3-1-设计思路" class="headerlink" title="6.3.1 设计思路"></a>6.3.1 设计思路</h4><ul><li>Taro 的结构主要分两个方面：运行时和编译时。运行时负责把编译后到代码运行在本不能运行的对应环境中，你可以把 Taro 运行时理解为前端开发当中 <code>polyfill</code>。举例来说，小程序新建一个页面是使用 <code>Page</code> 方法传入一个字面量对象，并不支持使用类。如果全部依赖编译时的话，那么我们要做到事情大概就是把类转化成对象，把 <code>state</code> 变为 <code>data</code>，把生命周期例如 componentDidMount 转化成 <code>onReady</code>，把事件由可能的类函数（<code>Class method</code>）和类属性函数(<code>Class property function</code>) 转化成字面量对象方法（Object <code>property function</code>）等等。</li><li>但这显然会让我们的编译时工作变得非常繁重，在一个类异常复杂时出错的概率也会变高。但我们有更好的办法：实现一个 <code>createPage</code> 方法，接受一个类作为参数，返回一个小程序 <code>Page</code> 方法所需要的字面量对象。这样不仅简化了编译时的工作，我们还可以在 <code>createPage</code> 对编译时产出的类做各种操作和优化。通过运行时把工作分离了之后，再编译时我们只需要在文件底部加上一行代码 <code>Page(createPage(componentName))</code> 即可…</li></ul><p><img src="https://user-gold-cdn.xitu.io/2018/10/8/1665157cb5a81196" alt=""></p><ul><li>回到一开始那段代码，我们定义了一个类属性 <code>config</code>，<code>config</code> 是一个对象表达式（Object Expression），这个对象表达式只接受键值为标识符（Identifier）或字符串，而键名只能是基本类型。这样简单的情况我们只需要把这个对象表达式转换为 <code>JSON</code> 即可。另外一个类属性 <code>state</code> 在 <code>Page</code> 当中有点像是小程序的 <code>data</code>，但它在多数情况不是完整的 <code>data</code>。这里我们不用做过多的操作，<code>babel</code>的插件 <code>transform-class-proerties</code> 会把它编译到类的构造器中。函数 <code>handleClick</code> 我们交给运行时处理，有兴趣的同学可以跳到 Taro 运行时原理查看具体技术细节。</li><li>再来看我们的 <code>render()</code>函数，它的第一行代码通过 <code>filter</code> 把数字数组的所有偶数项都过滤掉，真正用来循环的是 <code>oddNumbers</code>，而 <code>oddNumbers</code> 并没有在 <code>this.state</code> 中，所以我们必须手动把它加入到 <code>this.state</code>。和 <code>React 一样，Taro 每次更新都会调用 render 函数，但和 React 不同的是，React 的 render</code> 是一个创建虚拟 DOM 的方法，而 Taro 的 render 会被重命名为 <code>_createData</code>，它是一个创建数据的方法：在 <code>JSX</code> 使用过的数据都在这里被创建最后放到小程序 <code>Page</code> 或 <code>Component</code> 工厂方法中的 <code>data</code>。最终我们的 <code>render</code> 方法会被编译为…</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">_createData() &#123;</span><br><span class="line">  <span class="keyword">this</span>.__state = <span class="built_in">arguments</span>[<span class="number">0</span>] || <span class="keyword">this</span>.state || &#123;&#125;;</span><br><span class="line">  <span class="keyword">this</span>.__props = <span class="built_in">arguments</span>[<span class="number">1</span>] || <span class="keyword">this</span>.props || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> oddNumbers = <span class="keyword">this</span>.__state.numbers.filter(<span class="function"><span class="params">number</span> =&gt;</span> number &amp; <span class="number">2</span>);</span><br><span class="line">  <span class="built_in">Object</span>.assign(<span class="keyword">this</span>.__state, &#123;</span><br><span class="line">    oddNumbers: oddNumbers</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.__state;</span><br><span class="line">&#125;...</span><br></pre></td></tr></table></figure><h4 id="6-3-2-WXML-和-JSX"><a href="#6-3-2-WXML-和-JSX" class="headerlink" title="6.3.2 WXML 和 JSX"></a>6.3.2 WXML 和 JSX</h4><p>在 Taro 里 <code>render</code> 的所有 <code>JSX</code>元素都会在 JavaScript 文件中被移除，它们最终将会编译成小程序的 <code>WXML</code>。每个 <code>WXML</code> 元素和 <code>HTML</code> 元素一样，我们可以把它定义为三种类型：<code>Element</code>、<code>Text</code>、<code>Comment</code>。其中 <code>Text</code> 只有一个属性: 内容（<code>content</code>），它对应的 <code>AST</code> 类型是 <code>JSXText</code>，我们只需要将前文源码中对应字符串的奇数和偶数转换成 Text 即可。而对于 <code>Comment</code>而言我们可以将它们全部清除，不参与 WXML 的编译。Element 类型有它的名字（<code>tagName</code>）、<code>children</code>、属性（<code>attributes</code>），其中 <code>children</code> 可能是任意 <code>WXML</code> 类型，属性是一个对象，键值和键名都是字符串。我们将把重点放在如何转换成为 <code>WXML</code> 的 <code>Element</code>类型。</p><p>首先我们可以先看 <code>&lt;View className=&#39;home&#39;&gt;</code>，它在 <code>AST</code>中是一个 <code>JSXElement，它的结构和我们定义</code>Element <code>类型差不多。我们先将 JSXElement 的</code>ScrollView 从驼峰式的 JSX 命名转化为短横线（kebab case）风格，className 和 <code>scrollTop</code>的值分别代表了 <code>JSXAttribute</code> 值的两种类型：<code>StringLiteral</code> 和 <code>JSXExpressionContainer</code>，<code>className</code> 是简单的 <code>StringLiteral</code> 处理起来很方便，<code>scrollTop</code> 处理起来稍微麻烦点，我们需要用两个花括号<code>{}</code> 把内容包起来…</p><p>接下来我们再思考一下每一个 JSXElement 出现的位置，你可以发现其实它的父元素只有几种可能性：return、循环、条件（逻辑）表达式。而在上一篇文章中我们提到，babel-traverse 遍历的 AST 类型是响应式的——也就是说只要我们按照 JSXElement 父元素类型的顺序穷举处理这几种可能性，把各种可能性大结果应用到 JSX 元素之后删除掉原来的表达式，最后就可以把一个复杂的 JSX 表达式转换为一个简单的 WXML 数据结构。…</p><p>我们先看第一个循环：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oddNumbers.map(number =&gt; &lt;Text onClick=&#123;this.handleClick&#125;&gt;&#123;number&#125;&lt;/Text&gt;)</span><br></pre></td></tr></table></figure><p>Text 的父元素是一个 map 函数（CallExpression），我们可以把函数的 callee: oddNumbers 作为 wx:for 的值，并把它放到 state 中，匿名函数的第一个参数是 wx:for-item的值，函数的第二个参数应该是 wx:for-index 的值，但代码中没有传所以我们可以不管它。然后我们把这两个 wx: 开头的参数作为 attribute 传入 Text 元素就完成了循环的处理。而对于 onClick 而言，在 Taro 中 on 开头的元素参数都是事件，所以我们只要把 this. 去掉即可。Text 元素的 children 是一个 JSXExpressionContainer，我们按照之前的处理方式处理即可。最后这行我们生成出来的数据结构应该是这样…</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  type: <span class="string">'element'</span>,</span><br><span class="line">  tagName: <span class="string">'text'</span>,</span><br><span class="line">  attributes: [</span><br><span class="line">    &#123; <span class="attr">bindtap</span>: <span class="string">'handleClick'</span> &#125;,</span><br><span class="line">    &#123; <span class="string">'wx:for'</span>: <span class="string">'&#123;&#123;oddNumbers&#125;&#125;'</span> &#125;,</span><br><span class="line">    &#123; <span class="string">'wx:for-item'</span>: <span class="string">'number'</span> &#125;</span><br><span class="line">  ],</span><br><span class="line">  children: [</span><br><span class="line">    &#123; <span class="attr">type</span>: <span class="string">'text'</span>, <span class="attr">content</span>: <span class="string">'&#123;&#123;number&#125;&#125;'</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;...</span><br></pre></td></tr></table></figure><p>有了这个数据结构生成一段 WXML 就非常简单了</p><p>再来看第二个循环表达式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numbers.map(number =&gt; number % 2 === 0 &amp;&amp; &lt;Text onClick=&#123;this.handleClick&#125;&gt;&#123;number&#125;&lt;/Text&gt;)...</span><br></pre></td></tr></table></figure><p>它比第一个循环表达式多了一个逻辑表达式（Logical Operators），我们知道 expr1 &amp;&amp; expr2 意味着如果 expr1 能转换成 true 则返回 expr2，也就是说我们只要把 number % 2 === 0 作为值生成一个键名 wx:if 的 JSXAttribute 即可。但由于 wx:if 和 wx:for 同时作用于一个元素可能会出现问题，所以我们应该生成一个 block 元素，把 wx:if 挂载到 block 元素，原元素则全部作为 children 传入 block 元素中。这时 babel-traverse 会检测到新的元素 block，它的父元素是一个 map 循环函数，因此我们可以按照第一个循环表达式的处理方法来处理这个表达式。</p><p>这里我们可以思考一下 <code>this.props.text || this.props.children</code> 的解决方案。当用户在 JSX 中使用 || 作为逻辑表达式时很可能是 this.props.text 和 this.props.children 都有可能作为结果返回。这里 Taro 将它编译成了 <code>this.props.text ? this.props.text: this.props.children</code>，按照条件表达式（三元表达式）的逻辑，也就是说会生成两个 block，一个 <code>wx:if</code> 和一个 <code>wx:else</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;block wx:<span class="keyword">if</span>=<span class="string">"&#123;&#123;text&#125;&#125;"</span>&gt;&#123;&#123;text&#125;&#125;&lt;<span class="regexp">/block&gt;</span></span><br><span class="line"><span class="regexp">&lt;block wx:else&gt;</span></span><br><span class="line"><span class="regexp">    &lt;slot&gt;&lt;/</span>slot&gt;</span><br><span class="line">&lt;<span class="regexp">/block&gt;</span></span><br></pre></td></tr></table></figure><h2 id="七、小程序运行时"><a href="#七、小程序运行时" class="headerlink" title="七、小程序运行时"></a>七、小程序运行时</h2><p>为了使 <code>Taro</code> 组件转换成小程序组件并运行在小程序环境下， <code>Taro</code> 主要做了两个方面的工作：编译以及运行时适配。编译过程会做很多工作，例如：将 JSX 转换成小程序 <code>.wxml</code> 模板，生成小程序的配置文件、页面及组件的代码等等。编译生成好的代码仍然不能直接运行在小程序环境里，那运行时又是如何与之协同工作的呢？…</p><h3 id="7-1-注册程序、页面以及自定义组件"><a href="#7-1-注册程序、页面以及自定义组件" class="headerlink" title="7.1 注册程序、页面以及自定义组件"></a>7.1 注册程序、页面以及自定义组件</h3><p>在小程序中会区分程序、页面以及组件，通过调用对应的函数，并传入包含生命周期回调、事件处理函数等配置内容的 object 参数来进行注册：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Component(&#123;</span><br><span class="line">  data: &#123;&#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleClick () &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>而在 <code>Taro</code>里，它们都是一个组件类：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123; &#125;</span><br><span class="line">  handleClick () &#123; &#125;</span><br><span class="line">&#125;...</span><br></pre></td></tr></table></figure><ul><li>那么 <code>Taro</code> 的组件类是如何转换成小程序的程序、页面或组件的呢？</li><li>例如，有一个组件：<code>customComponent</code>，编译过程会在组件底部添加一行这样的代码（此处代码作示例用，与实际项目生成的代码不尽相同）：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Component(createComponent(customComponent))</span><br></pre></td></tr></table></figure><ul><li><code>createComponent</code> 方法是整个运行时的入口，在运行的时候，会根据传入的组件类，返回一个组件的配置对象</li></ul><blockquote><p>在小程序里，程序的功能及配置与页面和组件差异较大，因此运行时提供了两个方法 <code>createApp</code> 和 <code>createComponent</code> 来分别创建程序和组件（页面）。<code>createApp</code> 的实现非常简单</p></blockquote><p><strong>createComponent 方法主要做了这样几件事情</strong>：</p><ul><li>将组件的<code>state</code>转换成小程序组件配置对象的 <code>data</code></li><li>将组件的生命周期对应到小程序组件的生命周期</li><li>将组件的事件处理函数对应到小程序的事件处理函数</li></ul><h3 id="7-2-组件-state-转换"><a href="#7-2-组件-state-转换" class="headerlink" title="7.2 组件 state 转换"></a>7.2 组件 state 转换</h3><p>其实在 Taro（React） 组件里，除了组件的 <code>state</code>，<code>JSX</code> 里还可以访问<code>props</code> 、<code>render</code> 函数里定义的值、以及任何作用域上的成员。而在小程序中，与模板绑定的数据均来自对应页面（或组件）的 <code>data</code>。因此 <code>JSX</code> 模板里访问到的数据都会对应到小程序组件的 <code>data</code> 上。接下来我们通过列表渲染的例子来说明<code>state</code>和 <code>data</code>是如何对应的…</p><p><strong>在 JSX 里访问 state</strong></p><blockquote><p>在小程序的组件上使用 <code>wx:for</code> 绑定一个数组，就可以实现循环渲染。例如，在 Taro 里你可能会这么写：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">  state = &#123;</span><br><span class="line">    list: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.state.list.map(<span class="function"><span class="params">item</span> =&gt;</span> &lt;View&gt;&#123;item&#125;&lt;<span class="regexp">/View&gt;)&#125;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>View&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后的小程序组件模板：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;view&gt;</span><br><span class="line">  &lt;view wx:for=&quot;&#123;&#123;list&#125;&#125;&quot; wx:for-item=&quot;item&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/view&gt; </span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><p>其中 <code>state.list</code> 只需直接对应到小程序（页面）组件的 <code>data.list</code> 上即可…</p><p><strong>在 render 里生成了新的变量</strong></p><p>然而事情通常没有那么简单，在 Taro 里也可以这么用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    list = [1, 2, 3]</span><br><span class="line">  &#125;</span><br><span class="line">  render () &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;View&gt;</span><br><span class="line">        &#123;this.state.list.map(item =&gt; ++item).map(item =&gt; &lt;View&gt;&#123;item&#125;&lt;/View&gt;)&#125;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后的小程序组件模板是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;view&gt;</span><br><span class="line">  &lt;view wx:for=&quot;&#123;&#123;$anonymousCallee__1&#125;&#125;&quot; wx:for-item=&quot;item&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/view&gt; </span><br><span class="line">&lt;/view&gt;...</span><br></pre></td></tr></table></figure><blockquote><p>在编译时会给 Taro 组件创建一个 <code>_createData</code>的方法，里面会生成 <code>$anonymousCallee__1</code> 这个变量， $<code>anonymousCallee__1</code> 是由编译器生成的，对 <code>this.state.list</code> 进行相关操作后的变量。 <code>$anonymousCallee__1</code> 最终会被放到组件的 data 中给模板调用：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $anonymousCallee__1 = <span class="keyword">this</span>.state.list.map(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ++item;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p><code>render</code> 里 <code>return</code>之前的所有定义变量或者对 <code>props</code>、<code>state</code> 计算产生新变量的操作，都会被编译到 <code>_createData</code> 方法里执行，这一点在前面 JSX 编译成小程序模板的相关文章中已经提到。每当 Taro 调用 <code>this.setState</code> API 来更新数据时，都会调用生成的 <code>_createData</code>来获取最新数据…</p></blockquote><h3 id="7-3-将组件的生命周期对应到小程序组件的生命周期"><a href="#7-3-将组件的生命周期对应到小程序组件的生命周期" class="headerlink" title="7.3 将组件的生命周期对应到小程序组件的生命周期"></a>7.3 将组件的生命周期对应到小程序组件的生命周期</h3><blockquote><p>初始化过程里的生命周期对应很简单，在小程序的生命周期回调函数里调用 Taro 组件里对应的生命周期函数即可，例如：小程序组件 <code>ready</code> 的回调函数里会调用 Taro 组件的 <code>componentDidMount</code> 方法。它们的执行过程和对应关系如下图…</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/10/8/166515c132121443" alt=""></p><blockquote><p>小程序页面的<code>componentWillMount</code> 有一点特殊，会有两种初始化方式。由于小程序的页面需要等到 <code>onLoad</code> 之后才可以获取到页面的路由参数，因此如果是启动页面，会等到 <code>onLoad</code> 时才会触发。而对于小程序内部通过 <code>navigateTo</code>等 API 跳转的页面，Taro 做了一个兼容，调用 <code>navigateTo</code> 时将页面参数存储在一个全局对象中，在页面 <code>attached</code> 的时候从全局对象里取到，这样就不用等到页面 <code>onLoad</code> 即可获取到路由参数，触发 <code>componentWillMount</code>生命周期…</p></blockquote><p><strong>状态更新</strong></p><p><img src="https://user-gold-cdn.xitu.io/2018/10/8/166515c132336584" alt=""></p><ul><li>Taro 组件的 <code>setState</code> 行为最终会对应到小程序的<code>setData</code>。Taro 引入了如 <code>nextTick</code> ，编译时识别模板中用到的数据，在 setData 前进行数据差异比较等方式来提高 <code>setState</code>的性能。</li><li>如上图，组件调用 <code>setState</code> 方法之后，并不会立刻执行组件更新逻辑，而是会将最新的 <code>state</code> 暂存入一个数组中，等 <code>nextTick</code> 回调时才会计算最新的 <code>state</code> 进行组件更新。这样即使连续多次的调用<code>setState</code> 并不会触发多次的视图更新。在小程序中 <code>nextTick</code> 是这么实现的…</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nextTick = <span class="function">(<span class="params">fn, ...args</span>) =&gt;</span> &#123;</span><br><span class="line">  fn = <span class="keyword">typeof</span> fn === <span class="string">'function'</span> ? fn.bind(<span class="literal">null</span>, ...args) : fn</span><br><span class="line">  <span class="keyword">const</span> timerFunc = wx.nextTick ? wx.nextTick : setTimeout</span><br><span class="line">  timerFunc(fn)</span><br><span class="line">&#125;...</span><br></pre></td></tr></table></figure><blockquote><p>除了计算出最新的组件 <code>state</code> ，在组件状态更新过程里还会调用前面提到过的 <code>_createData</code> 方法，得到最终小程序组件的 <code>data</code>，并调用小程序的 <code>setData</code> 方法来进行组件的更新</p></blockquote><h3 id="7-4-事件处理函数对应"><a href="#7-4-事件处理函数对应" class="headerlink" title="7.4 事件处理函数对应"></a>7.4 事件处理函数对应</h3><p>在小程序的组件里，事件响应函数需要配置在 methods 字段里。而在 JSX 里，事件是这样绑定的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;View onClick=&#123;this.handleClick&#125;&gt;&lt;/View&gt;</span><br></pre></td></tr></table></figure><p>编译的过程会将 JSX 转换成小程序模板：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;view bindclick=&quot;handleClick&quot;&gt;&lt;/view&gt;...</span><br></pre></td></tr></table></figure><p>在<code>createComponent</code> 方法里，会将事件响应函数 <code>handleClick</code> 添加到 <code>methods</code> 字段中，并且在响应函数里调用真正的 <code>this.handleClick</code>方法。</p><p>在编译过程中，会提取模板中绑定过的方法，并存到组件的 <code>$events</code> 字段里，这样在运行时就可以只将用到的事件响应函数配置到小程序组件的 <code>methods</code> 字段中。</p><p>在运行时通过 <code>processEvent</code> 这个方法来处理事件的对应，省略掉处理过程，就是这样的…</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processEvent</span> (<span class="params">eventHandlerName, obj</span>) </span>&#123;</span><br><span class="line">  obj[eventHandlerName] = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">scope[eventHandlerName].apply(callScope, realArgs)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个方法的核心作用就是解析出事件响应函数执行时真正的作用域 <code>callScope</code> 以及传入的参数。在 <code>JSX</code>里，我们可以像下面这样通过 <code>bind</code>传入参数：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;View onClick=&#123;this.handleClick.bind(this, arga, argb)&#125;&gt;&lt;/View&gt;</span><br></pre></td></tr></table></figure><blockquote><p>小程序不支持通过 <code>bind</code> 的方式传入参数，但是小程序可以用 <code>data</code> 开头的方式，将数据传递到 <code>event.currentTarget.dataset</code> 中。编译过程会将 <code>bind</code> 方式传递的参数对应到<code>dataset</code> 中，<code>processEvent</code> 函数会从 <code>dataset</code> 里取到传入的参数传给真正的事件响应函数。</p></blockquote><p>至此，经过编译之后的 Taro 组件终于可以运行在小程序环境里了…</p><h3 id="7-5-对-API-进行-Promise-化的处理"><a href="#7-5-对-API-进行-Promise-化的处理" class="headerlink" title="7.5 对 API 进行 Promise 化的处理"></a>7.5 对 API 进行 Promise 化的处理</h3><blockquote><p>Taro 对小程序的所有 API 进行了一个分类整理，将其中的异步 API 做了一层 <code>Promise</code>化的封装。例如，<code>wx.getStorage</code>经过下面的处理对应到<code>Taro.getStorage</code>(此处代码作示例用，与实际源代码不尽相同)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Taro[<span class="string">'getStorage'</span>] = <span class="function"><span class="params">options</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> obj = <span class="built_in">Object</span>.assign(&#123;&#125;, options)</span><br><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">[<span class="string">'fail'</span>, <span class="string">'success'</span>, <span class="string">'complete'</span>].forEach(<span class="function">(<span class="params">k</span>) =&gt;</span> &#123;</span><br><span class="line">  obj[k] = <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    options[k] &amp;&amp; options[k](res)</span><br><span class="line">    <span class="keyword">if</span> (k === <span class="string">'success'</span>) &#123;</span><br><span class="line">  resolve(res)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (k === <span class="string">'fail'</span>) &#123;</span><br><span class="line">  reject(res)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">wx[<span class="string">'getStorage'</span>](obj)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> p</span><br><span class="line">&#125;...</span><br></pre></td></tr></table></figure><p>就可以这么调用了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 小程序的调用方式</span></span><br><span class="line">Taro.getStorage(&#123;</span><br><span class="line">  key: <span class="string">'test'</span>,</span><br><span class="line">  success() &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 在 Taro 里也可以这样调用</span></span><br><span class="line">Taro.getStorage(&#123;</span><br><span class="line">  key: <span class="string">'test'</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// success</span></span><br><span class="line">&#125;)...</span><br></pre></td></tr></table></figure><h2 id="八、H5-运行时"><a href="#八、H5-运行时" class="headerlink" title="八、H5 运行时"></a>八、H5 运行时</h2><h3 id="8-1-H5-运行时解析"><a href="#8-1-H5-运行时解析" class="headerlink" title="8.1 H5 运行时解析"></a>8.1 H5 运行时解析</h3><blockquote><p>首先，我们选用<code>Nerv</code>作为 <code>Web</code> 端的运行时框架。你可能会有问题：同样是类<code>React</code>框架，为何我们不直接用<code>React</code>，而是用<code>Nerv</code>呢？</p></blockquote><p>为了更快更稳。开发过程中前端框架本身有可能会出现问题。如果是第三方框架，很有可能无法得到及时的修复，导致整个项目的进度受影响。Nerv就不一样。作为团队自研的产品，出现任何问题我们都可以在团队内部快速得到解决。与此同时，Nerv也具有与React相同的 API，同样使用 Virtual DOM 技术进行优化，正常使用与React并没有区别，完全可以满足我们的需要。</p><p>使用Taro之后，我们书写的是类似于下图的代码…</p><p><img src="https://user-gold-cdn.xitu.io/2018/10/8/166515ae12e8fe10" alt=""></p><blockquote><p>我们注意到，就算是转换过的代码，也依然存在着<code>view</code>、<code>button</code>等在 <code>Web</code> 开发中并不存在的组件。如何在 <code>Web</code> 端正常使用这些组件？这是我们碰到的第一个问题</p></blockquote><h4 id="8-1-1-组件实现"><a href="#8-1-1-组件实现" class="headerlink" title="8.1.1 组件实现"></a>8.1.1 组件实现</h4><p><img src="https://user-gold-cdn.xitu.io/2018/10/8/166515ae12d7da84" alt=""></p><p>作为开发者，你第一反应或许会尝试在编译阶段下功夫，尝试直接使用效果类似的 Web 组件替代：用<code>div</code>替代<code>view</code>，用<code>img</code>替代<code>image</code>，以此类推。</p><p>费劲心机搞定标签转换之后，上面这个差异似乎是解决了。但很快你就会碰到一些更加棘手的问题：<code>hover-start-time</code>、<code>hover-stay-time</code>等等这些常规 Web 开发中并不存在的属性要如何处理？</p><p>回顾一下：在前面讲到多端转换的时候，我们说到了<code>babel</code>。在Taro中，我们使用<code>babylon</code>生成 <code>AST</code>，<code>babel-traverse</code>去修改和移动 <code>AST</code> 中的节点。但babel所做的工作远远不止这些。</p><p>我们不妨去<code>babel</code>的 <code>playground</code> 看一看代码在转译前后的对比：在使用了<code>@babel/preset-env</code>的<code>BUILT-INS</code>之后，简单的一句源码<code>new Map()</code>，在<code>babel</code>编译后却变成了好几行代码…</p><p><img src="https://user-gold-cdn.xitu.io/2018/10/8/166515ae12e9969d" alt=""></p><p>注意看这几个文件：<code>core-js/modules/web.dom.iterable</code>，<code>core-js/modules/es6.array.iterator</code>，<code>core-js/modules/es6.map</code>。我们可以在<code>core-js</code>的 <code>Git</code> 仓库找到他们的真身。很明显，这几个模块就是对应的 es 特性运行时的实现。</p><p>从某种角度上讲，我们要做的事情和babel非常像。babel把基于新版 ECMAScript 规范的代码转换为基于旧 <code>ECMAScript</code> 规范的代码，而Taro希望把基于React语法的代码转换为小程序的语法。我们从babel受到了启发：既然<code>babel</code>可以通过运行时框架来实现新特性，那我们也同样可以通过运行时代码，实现上面这些 Web 开发中不存在的功能。</p><p>举个例子。对于<code>view</code>组件，首先它是个普通的类 <code>React</code> 组件，它把它的子组件如实展示出来…</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Nerv, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'nervjs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">View</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;&#123;<span class="keyword">this</span>.props.children&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;...</span></span><br></pre></td></tr></table></figure><blockquote><p>接下来，我们需要对<code>hover-start-time</code>做处理。与Taro其他地方的命名规范一致，我们这个<code>View</code>组件接受的属性名将会是驼峰命名法：<code>hoverStartTime</code>。<code>hoverStartTime</code>参数决定我们将在<code>View</code>组件触发<code>touch</code>事件多久后改变组件的样式…</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例代码</span></span><br><span class="line">render() &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    hoverStartTime = <span class="number">50</span>,</span><br><span class="line">    onTouchStart</span><br><span class="line">  &#125; = <span class="keyword">this</span>.props;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> _onTouchStart = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// @TODO 触发touch样式改变</span></span><br><span class="line">    &#125;, hoverStartTime);</span><br><span class="line">    onTouchStart &amp;&amp; onTouchStart(e);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div onTouchStart=&#123;_onTouchStart&#125;&gt;</span><br><span class="line">      &#123;<span class="keyword">this</span>.props.children&#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;...</span></span><br></pre></td></tr></table></figure><blockquote><p>再稍加修饰，我们就能得到一个功能完整的<code>Web</code>版 <code>View</code>组件</p></blockquote><p><code>view</code>可以说是小程序最简单的组件之一了。<code>text</code>的实现甚至比上面的代码还要简单得多。但这并不说明组件的实现之路上就没有障碍。复杂如<code>swiper</code>，<code>scroll-view</code>，<code>tabbar</code>，我们需要花费大量的精力分析小程序原生组件的 <code>API</code>，交互行为，极端值处理，接受的属性等等，再通过 Web 技术实现。…</p><h3 id="8-2-API-适配"><a href="#8-2-API-适配" class="headerlink" title="8.2 API 适配"></a>8.2 API 适配</h3><blockquote><p>除了组件，小程序下有一些 API 也是 Web 开发中所不具备的。比如小程序框架内置的<code>wx.request/wx.getStorage</code>等 API；但在 Web 开发中，我们使用的是<code>fetch/localStorage</code>等内置的函数或者对象</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/10/8/166515ae12c9ef95" alt=""></p><p>小程序的 API 实现是个巨大的黑盒，我们仅仅知道如何使用它，使用它会得到什么结果，但对它内部的实现一无所知。</p><p>如何让 Web 端也能使用小程序框架中提供的这些功能？既然已经知道这个黑盒的入参出参情况，那我们自己打造一个黑盒就好了。</p><p>换句话说，我们依然通过运行时框架来实现这些 Web 端不存在的能力。</p><p>具体说来，我们同样需要分析小程序原生 API，最后通过 Web 技术实现。有兴趣可以在 Git 仓库中看到这些原生 API 的实现。下面以<code>wx.setStorage</code>为例进行简单解析。</p><p><code>wx.setStorage</code>是一个异步接口，可以把<code>key: value</code>数据存储在本地缓存。很容易联想到，在 Web 开发中也有类似的数据存储概念，这就是<code>localStorage</code>。到这里，我们的目标已经十分明确：我们需要借助<code>于localStorage</code>，实现一个与<code>wx.setStorage</code>相同的 API。…</p><blockquote><p>而在 Web 中，如果我们需要往本地存储写入数据，使用的 API 是<code>localStorage.setItem(key, value)</code>。我们很容易就可以构思出这个函数的雏形</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 示例代码 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setStorage</span>(<span class="params">&#123; key, value &#125;</span>) </span>&#123;</span><br><span class="line">  localStorage.setItem(key, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们顺手做点优化，把基于异步回调的 API 都给做了一层 Promise 包装，这可以让代码的流程处理更加方便。所以这段代码看起来会像下面这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 示例代码 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setStorage</span>(<span class="params">&#123; key, value &#125;</span>) </span>&#123;</span><br><span class="line">  localStorage.setItem(key, value);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(&#123; <span class="attr">errMsg</span>: <span class="string">'setStorage:ok'</span> &#125;);</span><br><span class="line">&#125;...</span><br></pre></td></tr></table></figure><p>看起来很完美，但开发的道路不会如此平坦。我们还需要处理其余的入参：success、fail和complete。success回调会在操作成功完成时调用，fail会在操作失败的时候执行，complete则无论如何都会执行。setStorage函数只会在key值是String类型时有正确的行为，所以我们为这个函数添加了一个简单的类型判断，并在异常情况下执行fail回调。经过这轮变动，这段代码看起来会像下面这样…</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 示例代码 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setStorage</span>(<span class="params">&#123; key, value, success, fail, complete &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = &#123; <span class="attr">errMsg</span>: <span class="string">'setStorage:ok'</span> &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> key === <span class="string">'string'</span>) &#123;</span><br><span class="line">    localStorage.setItem(key, value);</span><br><span class="line">    success &amp;&amp; success(res);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fail &amp;&amp; fail(res);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(res);</span><br><span class="line">  &#125;</span><br><span class="line">  complete &amp;&amp; complete(res);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(&#123; <span class="attr">errMsg</span>: <span class="string">'setStorage:ok'</span> &#125;);</span><br><span class="line">&#125;...</span><br></pre></td></tr></table></figure><p>把这个 API 实现挂载到Taro模块之后，我们就可以通过<code>Taro.setStorage</code>来调用这个 API 了。</p><p>当然，也有一些 API 是 Web 端无论如何无法实现的，比如<code>wx.login</code>，又或者<code>wx.scanCode</code>。我们维护了一个 API 实现情况的列表，在实际的多端项目开发中应该尽可能避免使用它们…</p><h3 id="8-3-路由"><a href="#8-3-路由" class="headerlink" title="8.3 路由"></a>8.3 路由</h3><blockquote><p>作为小程序的一大能力，小程序框架中以栈的形式维护了当前所有的页面，由框架统一管理。用户只需要调用<code>wx.navigateTo</code>,<code>wx.navigateBack</code>,<code>wx.redirectTo</code>等官方 API，就可以实现页面的跳转、回退、重定向，而不需要关心页面栈的细节。但是作为多端项目，当我们…</p></blockquote><p>小程序的路由比较轻量。使用时，我们先通过<code>app.json</code>为小程序配置页面列表：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"pages"</span>: [</span><br><span class="line">    <span class="string">"pages/index/index"</span>,</span><br><span class="line">    <span class="string">"pages/logs/logs"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在运行时，小程序内维护了一个页面栈，始终展示栈顶的页面（<code>Page</code>对象）。当用户进行跳转、后退等操作时，相应的会使页面栈进行入栈、出栈等操作</p></blockquote><p>同时，在页面栈发生路由变化时，还会触发相应页面的生命周期</p><p><strong>对于 Web 端单页应用路由，我们则以react-router为例进行说明</strong></p><ul><li>首先，<code>react-router</code>开始通过<code>history</code>工具监听页面路径的变化。</li><li>在页面路径发生变化时，<code>react-router</code>会根据新的<code>location</code>对象，触发 UI 层的更新。</li><li>至于 UI 层如何更新，则是取决于我们在Route组件中对页面路径和组件的绑定，甚至可以实现嵌套路由。</li><li>可以说，<code>react-router</code>的路由方案是组件级别的。</li><li>具体到<code>Taro</code>，为了保持跟小程序的行为一致，我们不需要细致到组件级别的路由方案，但需要为每次路由保存完整的页面栈。</li><li>实现形式上，我们参考<code>react-router</code>：监听页面路径变化，再触发<code>UI</code> 更新。这是<code>React</code>的精髓之一，单向数据流…</li></ul><p><img src="https://user-gold-cdn.xitu.io/2018/10/8/166515ae12fc3d2c" alt=""></p><blockquote><p><code>@tarojs/router</code>包中包含了一个轻量的<code>history</code>实现。<code>history</code>中维护了一个栈，用来记录页面历史的变化。对历史记录的监听，依赖两个事件：<code>hashchange</code>和<code>popstate</code>。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 示例代码 */</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'hashchange'</span>, () =&gt; &#123;&#125;);</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'popstate'</span>, () =&gt; &#123;&#125;)</span><br></pre></td></tr></table></figure><ul><li>对于使用 <code>Hash</code>模式的页面路由，每次页面跳转都会依次触发<code>popstate</code>和<code>hashchange</code>事件。由于在<code>popstate</code>的回调中可以取到当前页面的 <code>state</code>，我们选择它作为主要跳转逻辑的容器。</li><li>作为 UI 层，<code>@tarojs/router</code>包提供了一个<code>Router</code>组件，维护页面栈。与小程序类似，用户不需要手动调用<code>Router</code>组件，而是由Taro自动处理。</li><li>对于历史栈来说，无非就是三种操作：<code>push</code>, <code>pop</code>，还有<code>replace</code>。在历史栈变动时触发<code>Router</code>的回调，就可以让<code>Router</code>也同步变化。这就是Taro中路由的基本原理…</li></ul><h3 id="8-4-Redux-处理"><a href="#8-4-Redux-处理" class="headerlink" title="8.4 Redux 处理"></a>8.4 Redux 处理</h3><ul><li>每当提到React的数据流，我们就不得不提到Redux。通过合并Reducer，Redux可以让大型应用中的数据流更加规则、可预测。</li><li>我们在Taro中加入了Redux的支持，通过导入<code>@tarojs/redux</code>，即可在小程序端使用Redux的功能。</li><li>对于 Web 端，我们尝试直接使用<code>nerv-redux</code>包提供支持，但这会带来一些问题…</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Nerv <span class="keyword">from</span> <span class="string">'nervjs'</span></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'nerv-redux'</span></span><br><span class="line"></span><br><span class="line">@connect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">Nerv</span>.<span class="title">Componnet</span> </span>&#123;</span><br><span class="line">  componentDidShow() &#123; <span class="built_in">console</span>.log(<span class="string">'didShow'</span>) &#125;</span><br><span class="line">  componentDidMount() &#123; <span class="built_in">console</span>.log(<span class="string">'didMount'</span>) &#125;</span><br><span class="line">  render() &#123; <span class="keyword">return</span> <span class="string">''</span> &#125;</span><br><span class="line">&#125;...</span><br></pre></td></tr></table></figure><ul><li>回想一下前面讲的<code>componentDidShow</code>的实现：我们继承，并且改写 <code>componentDidMount</code>。</li><li>但是对于使用Redux的页面来说，我们继承的类，是经过<code>@connect</code>修饰过的一个高阶组件。</li><li>问题就出在这里：这个高阶组件的签名里并没有<code>componentDidShow</code>这一个函数。所以我们的 <code>componentDidMount</code> 内，理所当然是取不到<code>componentDidShow</code>的。</li><li>为了解决这个问题，我们对<code>react-redux</code>代码进行了一些小改装，这就是<code>@taro/redux-h5</code>的由来…</li></ul><h2 id="九、更多参考"><a href="#九、更多参考" class="headerlink" title="九、更多参考"></a>九、更多参考</h2><ul><li><a href="https://nervjs.github.io/taro/docs/GETTING-STARTED.html" target="_blank" rel="noopener">Taro官方文档</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;来自掘金小册笔记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、Taro-的安装与使用&quot;&gt;&lt;a href=&quot;#一、Taro-的安装与使用&quot; class=&quot;headerlink&quot; title=&quot;一、Taro 的安装与使用&quot;&gt;&lt;/a&gt;一、Ta
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Taro" scheme="http://blog.poetries.top/tags/Taro/"/>
    
  </entry>
  
  <entry>
    <title>docker结合pm2部署node项目</title>
    <link href="http://blog.poetries.top/2018/11/26/docker-pm2-deploy-node-proj/"/>
    <id>http://blog.poetries.top/2018/11/26/docker-pm2-deploy-node-proj/</id>
    <published>2018-11-26T02:31:12.000Z</published>
    <updated>2018-11-28T12:50:38.997Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、下载node镜像"><a href="#一、下载node镜像" class="headerlink" title="一、下载node镜像"></a>一、下载node镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull node</span><br></pre></td></tr></table></figure><p>下载完后<code>docker images</code>查看一下，稍后用到</p><h2 id="二、创建Dockerfile"><a href="#二、创建Dockerfile" class="headerlink" title="二、创建Dockerfile"></a>二、创建Dockerfile</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FROM node</span><br><span class="line">RUN mkdir -p /home/Service</span><br><span class="line">WORKDIR /home/Service    <span class="comment"># Bundle app source</span></span><br><span class="line">COPY . /home/Service</span><br><span class="line">RUN npm install</span><br><span class="line">EXPOSE 8888</span><br><span class="line">CMD npm start   </span><br><span class="line"> <span class="comment">## 如果想运行多条指令可以这样：</span></span><br><span class="line"><span class="comment">## CMD git pull &amp;&amp; npm install &amp;&amp; npm start</span></span><br></pre></td></tr></table></figure><h3 id="2-1-FROM"><a href="#2-1-FROM" class="headerlink" title="2.1 FROM"></a>2.1 FROM</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FROM node</span><br></pre></td></tr></table></figure><blockquote><p><code>FROM</code>是构建镜像的基础源镜像，<code>node</code> 这个是镜像的名称，也就是我们一开始从国内服务器上拉下来的那个<code>Image</code>。如果本地没有<code>Docker</code> 会自己<code>pull</code>镜像</p></blockquote><h3 id="2-2-RUN"><a href="#2-2-RUN" class="headerlink" title="2.2 RUN"></a>2.2 RUN</h3><p>后面跟的是在这个新容器中执行的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在容器中创建一个目录</span></span><br><span class="line">RUN mkdir -p /home/Service</span><br></pre></td></tr></table></figure><h3 id="2-3-WORKDIR"><a href="#2-3-WORKDIR" class="headerlink" title="2.3 WORKDIR"></a>2.3 WORKDIR</h3><p>容器的工作目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将容器的工作目录定位到 /home/Service中</span></span><br><span class="line">WORKDIR /home/Service</span><br></pre></td></tr></table></figure><h3 id="2-4-COPY"><a href="#2-4-COPY" class="headerlink" title="2.4 COPY"></a>2.4 COPY</h3><p>将本地的东西拷贝到容器的指定目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#把本机当前目录下的所有文件拷贝到Image的/home/Service文件夹下</span></span><br><span class="line">COPY . /home/Service  </span><br><span class="line">RUN npm install</span><br></pre></td></tr></table></figure><h3 id="2-5-EXPOSE"><a href="#2-5-EXPOSE" class="headerlink" title="2.5 EXPOSE"></a>2.5 EXPOSE</h3><p>将容器内的某个端口导出给主机，用于我们访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPOSE 8888</span><br></pre></td></tr></table></figure><h3 id="2-6-CMD"><a href="#2-6-CMD" class="headerlink" title="2.6 CMD"></a>2.6 CMD</h3><ul><li>首先：每个<code>Dockerfile</code>中只能写一个<code>CMD</code>，写多了，后面的会覆盖前面的。</li><li>然后：<code>CMD</code>后面跟的命令是每次容器启动的时候执行的命令。</li><li>最后：命令格式可以是数组格式，也可是直接命令行方式，多条命令的时候用 “<code>&amp;&amp;</code>“链接。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CMD [ &quot;npm&quot;, &quot;start&quot; ]</span><br></pre></td></tr></table></figure><h2 id="三、构建Image"><a href="#三、构建Image" class="headerlink" title="三、构建Image"></a>三、构建Image</h2><blockquote><p>在你<code>Dockerfile</code>文件所在的目录下运行下面的命令来构建一个<code>Image</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t mynodeapp .</span><br></pre></td></tr></table></figure><blockquote><p>点就是指当前目录下的<code>Dockerfile</code></p></blockquote><p>构建完后查看一下我们的镜像</p><p><img src="https://upload-images.jianshu.io/upload_images/3791135-63e4fe284b1e68e8.png" alt=""></p><p><strong>运行镜像</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8880:8888 mynodeapp</span><br></pre></td></tr></table></figure><ul><li><code>-d</code> :表明容器会在后台运行，</li><li><code>-p</code> :表示端口映射，把本机的<code>8880</code>端口映射到<code>container</code>的<code>8888</code>端口，这样外网就能通过本机的<code>8880</code>端口访问我们的<code>web</code>了。</li><li>后面的<code>mynodeapp</code>是我们镜像的名字</li></ul><blockquote><p>通过<code>docker ps</code> 查看我们刚运行的<code>Container</code>的<code>ID</code></p></blockquote><p>我们先通过<code>curl</code> 看能不能访问我们的<code>web</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -i localhost:8880</span><br></pre></td></tr></table></figure><p>如果返回相应的HTTP信息，表示成功</p><h2 id="四、结合pm2部署"><a href="#四、结合pm2部署" class="headerlink" title="四、结合pm2部署"></a>四、结合pm2部署</h2><blockquote><p>使用命令<code>pm2 start app.js</code> 之后, <code>pm2</code> 默认在后台运行, 如果使用了<code>Docker</code>后,容器运行并立即退出,需要手动给“<code>pm2</code>”指定参数 <code>--no-daemon</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在Dockerfile中：</span></span><br><span class="line"></span><br><span class="line">--no-daemon // run pm2 daemon <span class="keyword">in</span> the foreground <span class="keyword">if</span> it doesn<span class="string">'t exist already</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">CMD pm2 start app.js --no-daemon // 设置启动方式</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#  或者 使用   pm2-docker</span></span><br><span class="line"><span class="string">CMD pm2-docker start app.js</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、下载node镜像&quot;&gt;&lt;a href=&quot;#一、下载node镜像&quot; class=&quot;headerlink&quot; title=&quot;一、下载node镜像&quot;&gt;&lt;/a&gt;一、下载node镜像&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr
      
    
    </summary>
    
      <category term="Back-end" scheme="http://blog.poetries.top/categories/Back-end/"/>
    
    
      <category term="Docker" scheme="http://blog.poetries.top/tags/Docker/"/>
    
      <category term="部署" scheme="http://blog.poetries.top/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>webpack4升级篇</title>
    <link href="http://blog.poetries.top/2018/11/25/webpack4-update/"/>
    <id>http://blog.poetries.top/2018/11/25/webpack4-update/</id>
    <published>2018-11-25T11:10:08.000Z</published>
    <updated>2018-11-28T12:50:39.029Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、环境及依赖库更新"><a href="#一、环境及依赖库更新" class="headerlink" title="一、环境及依赖库更新"></a>一、环境及依赖库更新</h2><blockquote><p>由于<code>Webpack</code>的更新，很多<code>Loader</code>也必须更新才能适应<code>Webpack</code>的最新版本</p></blockquote><table><thead><tr><th>必须更新的loader</th><th>最低要求版本</th><th>功能说明</th></tr></thead><tbody><tr><td><code>babel-loader</code></td><td><code>7.1.3</code></td><td>对最新的ES语法进行转换</td></tr><tr><td><code>eslint-loader</code></td><td><code>2.0.0</code></td><td>代码检查</td></tr><tr><td><code>file-loader</code></td><td><code>1.1.10</code></td><td>批量修改文件路径，或者指定编译后文件存储路径</td></tr><tr><td><code>vue-loader</code></td><td><code>15.0.0</code></td><td>解析、编译<code>vue</code>单文件组件</td></tr><tr><td><code>vue-style-loader</code></td><td><code>4.1.0</code></td><td>解析、编译<code>vue</code>单文件组件中的样式</td></tr></tbody></table><h2 id="二、Webpack-4-x-的破坏性变更"><a href="#二、Webpack-4-x-的破坏性变更" class="headerlink" title="二、Webpack 4.x 的破坏性变更"></a>二、Webpack 4.x 的破坏性变更</h2><blockquote><p>由于<code>Webpack 4.x</code>的重大变更，导致其不再支持部分插件和<code>Loader</code>，其中最闹心的是<code>Chunk</code>分离及文件分离</p></blockquote><table><thead><tr><th>失效的插件或loader</th><th>类型</th><th>功能说明</th></tr></thead><tbody><tr><td><code>webpack.optimize.CommonsChunkPlugin</code></td><td>内置插件</td><td>分离<code>Chunk</code>。将多次出现的代码统一打包到一个文件中。<code>Vue</code>工程中用来打包<code>vendor</code>及<code>mainfest</code></td></tr><tr><td><code>webpack.optimize.UglifyJsPlugin</code></td><td>内置插件</td><td>压缩JS</td></tr><tr><td><code>extract-text-webpack-plugin</code></td><td><code>Loader</code></td><td>分离文件。将部分代码或文件提取到单独文件中。Vue工程里用来分离CSS到指定文件</td></tr></tbody></table><h3 id="2-1-使用config-optimization代替"><a href="#2-1-使用config-optimization代替" class="headerlink" title="2.1 使用config.optimization代替"></a>2.1 使用config.optimization代替</h3><blockquote><p>在<code>Webpack 4.x</code>中，新增了<code>optimization</code>的选项来代替之前版本中的<code>webpack.optimize</code>等。在<code>optimization</code>选项中，我们可以进行详细的设置，以达到分离<code>CSS</code>，分离<code>Chunk</code>，压缩文件等等操作</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    optimization: &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-2-压缩JS及CSS文件"><a href="#2-2-压缩JS及CSS文件" class="headerlink" title="2.2 压缩JS及CSS文件"></a>2.2 压缩JS及CSS文件</h3><blockquote><p>由于<code>Webpack 4.x</code>中取消了其内置插件，所以之前的方法都不管用了。这里我推荐大家使用<code>UglifyJsPlugin</code>及<code>OptimizeCSSPlugin</code>插件来代替之前的内置插件，当然如果你只是想简单的压缩，而不做任何配置的话，可以按照官方文档中给出的方法使用<code>optimization.minimizer: true</code>即可</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UglifyJsPlugin = <span class="built_in">require</span>(<span class="string">"uglifyjs-webpack-plugin"</span>)</span><br><span class="line"><span class="keyword">const</span> OptimizeCSSPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    optimization: &#123;</span><br><span class="line">        minimizer: [</span><br><span class="line">            <span class="comment">// js mini</span></span><br><span class="line">            <span class="keyword">new</span> UglifyJsPlugin(&#123;</span><br><span class="line">              cache: <span class="literal">true</span>,</span><br><span class="line">              parallel: <span class="literal">true</span>,</span><br><span class="line">              sourceMap: <span class="literal">false</span> <span class="comment">// set to true if you want JS source maps</span></span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="comment">// css mini</span></span><br><span class="line">            <span class="keyword">new</span> OptimizeCSSPlugin(&#123;&#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-分离JS文件"><a href="#2-3-分离JS文件" class="headerlink" title="2.3 分离JS文件"></a>2.3 分离JS文件</h3><blockquote><p>在之前版本中，我们使用<code>CommonsChunkPlugin</code>进行文件分离，而在<code>Webpack 4.x</code>中，我们则借助于<code>config.optimization</code>来实现</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack 3.xx</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    plugins:[</span><br><span class="line">         <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">            name: <span class="string">'vendor'</span>,</span><br><span class="line">            minChunks: <span class="function"><span class="keyword">function</span>(<span class="params">module</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// any required modules inside node_modules are extracted to vendor</span></span><br><span class="line">                <span class="keyword">return</span> (</span><br><span class="line">                    <span class="built_in">module</span>.resource &amp;&amp;</span><br><span class="line">                    /\.js$/.test(<span class="built_in">module</span>.resource) &amp;&amp;</span><br><span class="line">                    <span class="built_in">module</span>.resource.indexOf(</span><br><span class="line">                        path.join(__dirname, <span class="string">'../node_modules'</span>)</span><br><span class="line">                    ) === <span class="number">0</span></span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack4</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    optimization: &#123;</span><br><span class="line">        splitChunks: &#123;</span><br><span class="line">            chunks: <span class="string">'async'</span>,</span><br><span class="line">            <span class="comment">// 大于30KB才单独分离成chunk</span></span><br><span class="line">            minSize: <span class="number">30000</span>,</span><br><span class="line">            maxAsyncRequests: <span class="number">5</span>,</span><br><span class="line">            maxInitialRequests: <span class="number">3</span>,</span><br><span class="line">            name: <span class="literal">true</span>,</span><br><span class="line">            cacheGroups: &#123;</span><br><span class="line">                <span class="keyword">default</span>: &#123;</span><br><span class="line">                    priority: <span class="number">-20</span>,</span><br><span class="line">                    reuseExistingChunk: <span class="literal">true</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                vendors: &#123;</span><br><span class="line">                    name: <span class="string">'vendors'</span>,</span><br><span class="line">                    test: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">                    priority: <span class="number">-10</span>,</span><br><span class="line">                    chunks: <span class="string">"all"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                echarts: &#123;</span><br><span class="line">                    name: <span class="string">'echarts'</span>,</span><br><span class="line">                    chunks: <span class="string">'all'</span>,</span><br><span class="line">                    <span class="comment">// 对echarts进行单独优化，优先级较高</span></span><br><span class="line">                    priority: <span class="number">20</span>,</span><br><span class="line">                    test: <span class="function"><span class="keyword">function</span>(<span class="params">module</span>)</span>&#123;</span><br><span class="line">                        <span class="keyword">var</span> context = <span class="built_in">module</span>.context;</span><br><span class="line">                        <span class="keyword">return</span> context &amp;&amp; (context.indexOf(<span class="string">'echarts'</span>) &gt;= <span class="number">0</span> || context.indexOf(<span class="string">'zrender'</span>) &gt;= <span class="number">0</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-1-公共代码抽取"><a href="#2-3-1-公共代码抽取" class="headerlink" title="2.3.1 公共代码抽取"></a>2.3.1 公共代码抽取</h4><blockquote><p><code>CommonsChunkPlugin</code> 已弃用，使用<code>optimization.splitChunks</code>代替</p></blockquote><p><strong>配置项</strong></p><ul><li><code>cacheGroups</code> 自定义配置主要使用它来决定生成的文件</li><li><code>test</code> 限制范围，可以是正则，匹配文件夹或文件</li><li><code>name</code> 生成文件名</li><li><code>priority</code> 优先级，多个分组冲突时决定把代码放在哪块</li><li><code>minSize</code> 最小尺寸必须大于此值，默认<code>30000B</code></li><li><code>minChunks</code> 其他<code>entry</code>引用次数大于此值，默认1(<code>minChunks</code>指的是被不同<code>entry</code>引入的次数)<ul><li>为<code>1</code>时，适合分离 <code>node_moudles</code> 里的第三方库（很多人认为这个值设成2其实不合理）</li></ul></li><li>maxInitialRequests entry文件请求的chunks不应该超过此值（请求过多，耗时）</li><li>maxAsyncRequests 异步请求的chunks不应该超过此值</li><li>automaticNameDelimiter 自动命名连接符</li><li><code>chunks</code> 值为<code>&quot;initial&quot;</code>, <code>&quot;async&quot;</code>（默认） 或 <code>&quot;all&quot;</code><ul><li><code>initial</code> 入口<code>chunk</code>，对于异步导入的文件不处理</li><li><code>async</code> 异步<code>chunk</code>，只对异步导入的文件处理（个人理解）</li><li><code>all</code> 全部<code>chunk</code>（我反正选<code>all</code>，不甚理解）</li></ul></li></ul><p><strong>使用方式</strong></p><ol><li>使用默认配置</li></ol><blockquote><p>不配置时再<code>production</code>模式下开启<code>async</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">optimization:&#123;</span><br><span class="line">    splitChunks:&#123;</span><br><span class="line">        chunks:<span class="string">"all"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>生成的文件 <code>vendors~xx.js</code> ，xx与入口名对应</p></blockquote><p>默认配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">        chunks: <span class="string">"async"</span>,</span><br><span class="line">        minSize: <span class="number">30000</span>,</span><br><span class="line">        minChunks: <span class="number">1</span>,</span><br><span class="line">        maxAsyncRequests: <span class="number">5</span>,</span><br><span class="line">        maxInitialRequests: <span class="number">3</span>,</span><br><span class="line">        automaticNameDelimiter: <span class="string">'~'</span>,</span><br><span class="line">        name: <span class="literal">true</span>,</span><br><span class="line">        cacheGroups: &#123;</span><br><span class="line">            vendors: &#123;</span><br><span class="line">                test: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">                priority: <span class="number">-10</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="keyword">default</span>: &#123;<span class="comment">//cacheGroups重写继承配置，设为false不继承</span></span><br><span class="line">                minChunks: <span class="number">2</span>,</span><br><span class="line">                priority: <span class="number">-20</span>,</span><br><span class="line">                reuseExistingChunk: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>自定义配置</li></ol><blockquote><p>生成的文件 <code>xx.js</code> ，<code>xx</code>指<code>name</code>的值</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">optimization: &#123;</span><br><span class="line">    <span class="comment">//打包 第三方库</span></span><br><span class="line">    <span class="comment">//打包 公共文件</span></span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">        cacheGroups: &#123;</span><br><span class="line">            vendor:&#123;<span class="comment">//node_modules内的依赖库</span></span><br><span class="line">                chunks:<span class="string">"all"</span>,</span><br><span class="line">                test: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">                name:<span class="string">"vendor"</span>,</span><br><span class="line">                minChunks: <span class="number">1</span>, <span class="comment">//被不同entry引用次数(import),1次的话没必要提取</span></span><br><span class="line">                maxInitialRequests: <span class="number">5</span>,</span><br><span class="line">                minSize: <span class="number">0</span>,</span><br><span class="line">                priority:<span class="number">100</span>,</span><br><span class="line">                <span class="comment">// enforce: true?</span></span><br><span class="line">            &#125;,</span><br><span class="line">            common: &#123;<span class="comment">// ‘src/js’ 下的js文件</span></span><br><span class="line">                chunks:<span class="string">"all"</span>,</span><br><span class="line">                test:<span class="regexp">/[\\/]src[\\/]js[\\/]/</span>,<span class="comment">//也可以值文件/[\\/]src[\\/]js[\\/].*\.js/,  </span></span><br><span class="line">                name: <span class="string">"common"</span>, <span class="comment">//生成文件名，依据output规则</span></span><br><span class="line">                minChunks: <span class="number">2</span>,</span><br><span class="line">                maxInitialRequests: <span class="number">5</span>,</span><br><span class="line">                minSize: <span class="number">0</span>,</span><br><span class="line">                priority:<span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配合 runtimeChunk</strong></p><blockquote><p><code>runtimeChunk</code>，将入口提取出来，这样入口文件可以很快加载，并且当哪里有改动的时候，只有改动的地方和这个文件有变化。<br><code>optimization.runtimeChunk</code> 用来提取 <code>entry</code> <code>chunk</code>中的 <code>runtime</code>部分函数，形成一个单独的文件，这部分文件不经常变换，方便做缓存</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">runtimeChunk: &#123;</span><br><span class="line">  name: <span class="string">'manifest'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-提取CSS到单独文件"><a href="#2-4-提取CSS到单独文件" class="headerlink" title="2.4 提取CSS到单独文件"></a>2.4 提取CSS到单独文件</h3><blockquote><p>在之前版本中我们使用<code>extract-text-webpack-plugin</code>来提取<code>CSS</code>文件，不过在<code>webpack 4.x</code>中则应该使用<code>mini-css-extract-plugin</code>来提取<code>CSS</code>到单独文件中</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack 3.xx</span></span><br><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">'./utils'</span>)</span><br><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">new</span> ExtractTextPlugin(&#123;</span><br><span class="line">        filename: utils.assetsPath(<span class="string">'css/[name].[contenthash:7].css'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack 4.xx</span></span><br><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">'./utils'</span>)</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">        filename: utils.assetsPath(<span class="string">'css/[name].[contenthash:7].css'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack4 生产环境下的配置优化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> UglifyJsPlugin = <span class="built_in">require</span>(<span class="string">"uglifyjs-webpack-plugin"</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">"mini-css-extract-plugin"</span>);</span><br><span class="line"><span class="keyword">const</span> OptimizeCSSAssetsPlugin = <span class="built_in">require</span>(<span class="string">"optimize-css-assets-webpack-plugin"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    minimizer: [</span><br><span class="line">      <span class="keyword">new</span> UglifyJsPlugin(&#123;</span><br><span class="line">        cache: <span class="literal">true</span>,</span><br><span class="line">        parallel: <span class="literal">true</span>,</span><br><span class="line">        sourceMap: <span class="literal">true</span> </span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="keyword">new</span> OptimizeCSSAssetsPlugin(&#123;&#125;)  <span class="comment">// use OptimizeCSSAssetsPlugin</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'css/app.[name].css'</span>,</span><br><span class="line">      chunkFilename: <span class="string">'css/app.[contenthash:12].css'</span>  <span class="comment">// use contenthash *</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">  ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>将多个css chunk合并成一个css文件</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">"mini-css-extract-plugin"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      cacheGroups: &#123;</span><br><span class="line">        styles: &#123;            </span><br><span class="line">          name: <span class="string">'styles'</span>,</span><br><span class="line">          test: <span class="regexp">/\.scss|css$/</span>,</span><br><span class="line">          chunks: <span class="string">'all'</span>,    <span class="comment">// merge all the css chunk to one file</span></span><br><span class="line">          enforce: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-用更加快捷的mode模式来优化配置文件"><a href="#2-5-用更加快捷的mode模式来优化配置文件" class="headerlink" title="2.5 用更加快捷的mode模式来优化配置文件"></a>2.5 用更加快捷的mode模式来优化配置文件</h3><blockquote><p><code>webpack4</code>中提供的<code>mode</code>有两个值：<code>development</code>和<code>production</code>，默认值是 <code>production</code>。<code>mode</code>是我们为减小生产环境构建体积以及节约开发环境的构建时间提供的一种优化方案，提供对应的构建参数项的默认开启或关闭，降低配置成本</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开启方式 1：直接在启动命令后加入参数</span></span><br><span class="line"></span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"dev"</span>: <span class="string">"webpack --mode development"</span>,</span><br><span class="line">  <span class="string">"build"</span>: <span class="string">"webpack --mode production"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开启方式 2：可以在配置文件中加入一个mode属性：</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">'production'</span> <span class="comment">// development</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-6-其他调整项备忘"><a href="#2-6-其他调整项备忘" class="headerlink" title="2.6 其他调整项备忘"></a>2.6 其他调整项备忘</h3><ul><li><code>NoEmitOnErrorsPlugin</code>- &gt; <code>optimization.noEmitOnErrors</code>（默认情况下处于生产模式）</li><li><code>ModuleConcatenationPlugin- &gt;</code>optimization.concatenateModules`（默认情况下处于生产模式）</li><li><code>NamedModulesPlugin</code>- &gt; <code>optimization.namedModules</code>（在开发模式下默认开启）</li><li><code>webpack</code>命令优化 -&gt; 发布了独立的 <code>webpack-cli</code> 命令行工具包</li><li><code>webpack-dev-server</code>-&gt; 建议升级到最新版本</li><li><code>html-webpack-plugin</code> -&gt; 建议升级到的最新版本</li><li><code>file-loader</code> -&gt; 建议升级到最新版本</li><li><code>url-loader</code> -&gt; 建议升级到最新版本</li></ul><h2 id="三、更多参考"><a href="#三、更多参考" class="headerlink" title="三、更多参考"></a>三、更多参考</h2><ul><li><a href="https://github.com/GoogleChromeLabs/webpack-libs-optimizations" target="_blank" rel="noopener">一些优化wepback的库</a></li><li><a href="http://blog.poetries.top/2018/11/18/webpack4-config/">webpack4配置详解</a></li><li><a href="https://segmentfault.com/a/1190000015592264" target="_blank" rel="noopener">webpack4.x配置指南</a></li><li><a href="https://segmentfault.com/a/1190000015970277" target="_blank" rel="noopener">webpack4 化繁为简（二)</a></li><li><a href="https://www.cnblogs.com/carrotWu/p/8665720.html" target="_blank" rel="noopener">记一次webpack3升级webpack4的踩坑</a></li><li><a href="https://segmentfault.com/a/1190000015263836" target="_blank" rel="noopener">webpack4.0让编译速度飙升</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、环境及依赖库更新&quot;&gt;&lt;a href=&quot;#一、环境及依赖库更新&quot; class=&quot;headerlink&quot; title=&quot;一、环境及依赖库更新&quot;&gt;&lt;/a&gt;一、环境及依赖库更新&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;由于&lt;code&gt;Webpack&lt;/code&gt;的更新
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="webpack" scheme="http://blog.poetries.top/tags/webpack/"/>
    
      <category term="升级" scheme="http://blog.poetries.top/tags/%E5%8D%87%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>dll预编译提高webpack打包速度</title>
    <link href="http://blog.poetries.top/2018/11/23/webpack-dll/"/>
    <id>http://blog.poetries.top/2018/11/23/webpack-dll/</id>
    <published>2018-11-23T03:10:21.000Z</published>
    <updated>2018-11-28T12:50:39.025Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>博客链接 <a href="http://blog.poetries.top/2018/11/23/webpack-dll">http://blog.poetries.top/2018/11/23/webpack-dll</a></p></blockquote><h2 id="一、webpack的dll功能"><a href="#一、webpack的dll功能" class="headerlink" title="一、webpack的dll功能"></a>一、webpack的dll功能</h2><blockquote><p>基于<code>webpack3</code>构建</p></blockquote><h3 id="1-1-dll介绍"><a href="#1-1-dll介绍" class="headerlink" title="1.1 dll介绍"></a>1.1 dll介绍</h3><blockquote><p>我们构建前端项目的时候，往往希望第三方库（<code>vendors</code>）和自己写的代码可以分开打包，因为第三方库往往不需要经常打包更新。对此<code>Webpack</code>的文档建议用<code>CommonsChunkPlugin</code>来单独打包第三方库</p></blockquote><ul><li>我们这里的<code>dll.js</code> 是提前打包好了的，而不是在每次<code>build</code>的时候去打包输出的；这样才能做到依赖包一次构建，无限次使用</li><li><code>webpack</code>输出的文件名都带有<code>hash</code>值； 而用<code>dll</code>构建后输出的文件名是固定的</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line">  vendor: [<span class="string">"jquery"</span>, <span class="string">"other-lib"</span>],</span><br><span class="line">  app: <span class="string">"./entry"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> CommonsChunkPlugin(&#123;</span><br><span class="line">  name: <span class="string">"vendor"</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// filename: "vendor.js"</span></span><br><span class="line">  <span class="comment">// (Give the chunk a different name)</span></span><br><span class="line"></span><br><span class="line">  minChunks: <span class="literal">Infinity</span>,</span><br><span class="line">  <span class="comment">// (with more entries, this ensures that no other module</span></span><br><span class="line">  <span class="comment">//  goes into the vendor chunk)</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>通常为了对抗缓存，我们会给售出文件的文件名中加入<code>hash</code>的后缀——但是——我们编辑了<code>app</code>部分的代码后，重新打包，发现<code>vendor</code>的<code>hash</code>也变化了</p></blockquote><p><img src="http://upload-images.jianshu.io/upload_images/1480597-9c58ec3982be0665?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><blockquote><p>这么一来，意味着每次发布版本的时候，vendor代码都要刷新，即使我并没有修改其中的代码。这样并不符合我们分开打包的初衷</p></blockquote><ul><li><code>Dll</code>是<code>Webpack</code>最近新加的功能</li><li><code>Dll</code>这个概念应该是借鉴了<code>Windows</code>系统的<code>dll</code>。一个<code>dll</code>包，就是一个纯纯的依赖库，它本身不能运行，是用来给你的<code>app</code>引用的</li><li>打包<code>dll</code>的时候，<code>Webpack</code>会将所有包含的库做一个索引，写在一个<code>manifest</code>文件中，而引用<code>dll</code>的代码（<code>dll user</code>）在打包的时候，只需要读取这个<code>manifest</code>文件，就可以了。</li></ul><p><strong>优势</strong></p><ul><li><code>Dll</code>打包以后是独立存在的，只要其包含的库没有增减、升级，<code>hash</code>也不会变化，因此线上的<code>dll</code>代码不需要随着版本发布频繁更新</li><li><code>App</code>部分代码修改后，只需要编译<code>app</code>部分的代码，<code>dll</code>部分，只要包含的库没有增减、升级，就不需要重新打包。这样也大大提高了每次编译的速度</li><li>假设你有多个项目，使用了相同的一些依赖库，它们就可以共用一个<code>dll</code></li></ul><h3 id="1-2-dll使用"><a href="#1-2-dll使用" class="headerlink" title="1.2 dll使用"></a>1.2 dll使用</h3><blockquote><p>首先要先建立一个<code>dll</code>的配置文件，<code>entry</code>只包含第三方库</p></blockquote><p><strong>第一步：新建webpack.dll.conf.js</strong></p><ul><li><code>webpack.DllPlugin</code>的选项中，<code>path</code>是<code>manifest</code>文件的输出路径；<code>name</code>是<code>dll</code>暴露的对象名，要跟<code>output.library</code>保持一致</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// build/webpack.dll.conf.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    <span class="comment">// 把这些资源打包成dll，提高编译速度</span></span><br><span class="line">    react: [<span class="string">'react'</span>,<span class="string">'react-router-dom'</span>,<span class="string">'redux'</span>,<span class="string">'redux-immutable'</span>,<span class="string">'immutable'</span>,<span class="string">'react-redux'</span>,<span class="string">'react-router'</span>,<span class="string">'redux-logger'</span>,<span class="string">'redux-thunk'</span>,<span class="string">'styled-components'</span>],</span><br><span class="line">    ui: [<span class="string">'antd-mobile'</span>,<span class="string">'antd'</span>],</span><br><span class="line">    others: [<span class="string">'react-icons'</span>,<span class="string">'axios'</span>,<span class="string">'clipboard'</span>,<span class="string">'humps'</span>,<span class="string">'lodash'</span>,<span class="string">'md5'</span>,<span class="string">'moment'</span>,<span class="string">'normalizr'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"../dist/static/js"</span>),</span><br><span class="line">    filename: <span class="string">`[name].dll.js`</span>,</span><br><span class="line">    library: <span class="string">'[name]_library'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line"> ...Object.keys([<span class="string">'react'</span>,<span class="string">'ui'</span>,<span class="string">'others'</span>]).map(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">        context: <span class="string">'.'</span>,</span><br><span class="line">        manifest: <span class="built_in">require</span>(<span class="string">`../static/<span class="subst">$&#123;name&#125;</span>.manifest.json`</span>),</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第二步：加一个命令</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"dll"</span>: <span class="string">"webpack --config config/webpack.dll.conf.js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行<code>npm run dll</code></p></blockquote><ul><li>运行<code>Webpack</code>，会输出两个文件一个是打包好的<code>vendor.js</code>，一个就是<code>manifest.json</code>，长这样</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"vendor_ac51ba426d4f259b8b18"</span>,</span><br><span class="line">  <span class="string">"content"</span>: &#123;</span><br><span class="line">    <span class="string">"./node_modules/antd/dist/antd.js"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"./node_modules/react/react.js"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">"./node_modules/react/lib/React.js"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">"./node_modules/react/node_modules/object-assign/index.js"</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="string">"./node_modules/react/lib/ReactChildren.js"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="string">"./node_modules/react/lib/PooledClass.js"</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="string">"./node_modules/react/lib/reactProdInvariant.js"</span>: <span class="number">7</span>,</span><br><span class="line">    <span class="string">"./node_modules/fbjs/lib/invariant.js"</span>: <span class="number">8</span>,</span><br><span class="line">    <span class="string">"./node_modules/react/lib/ReactElement.js"</span>: <span class="number">9</span>,</span><br><span class="line">    </span><br><span class="line">    ............</span><br></pre></td></tr></table></figure><blockquote><p><code>Webpack</code>将每个库都进行了编号索引，之后的<code>dll user</code>可以读取这个文件，直接用<code>id</code>来引用</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-bed6305c04fb2197.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><strong>第三步： 在plugins中增加配置</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// build/webpack.prod.conf.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">   plugins: [</span><br><span class="line">        <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">          manifest: <span class="built_in">require</span>(<span class="string">'../dll/react-manifest.json'</span>)</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">          manifest: <span class="built_in">require</span>(<span class="string">'../dll/ui-manifest.json'</span>)</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">          manifest: <span class="built_in">require</span>(<span class="string">'../dll/others-manifest.json'</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>再次执行<code>npm run build</code></p></blockquote><p>之前<br><img src="https://upload-images.jianshu.io/upload_images/1480597-016eedc71c63fdb5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>之后<br><img src="https://upload-images.jianshu.io/upload_images/1480597-bd2b95bbac325e1c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="二、happypack-多线程打包"><a href="#二、happypack-多线程打包" class="headerlink" title="二、happypack 多线程打包"></a>二、happypack 多线程打包</h2><blockquote><p>一般情况下，js是单线程执行的，但<code>node</code>不是。利用<code>node</code>提供的多线程环境，<code>happypack</code>是可以多线程打包的。基本上打开官网看了一下readme就可以配置了，特别是我只针对js的编译进行优化，配置还是比较简单的。</p></blockquote><p><a href="https://www.npmjs.com/package/happypack" target="_blank" rel="noopener">https://www.npmjs.com/package/happypack</a></p><ul><li><code>happyPack</code>把所有串行的东西并行处理,使得<code>loader</code>并行处理，较少文件处理时间</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// build/webpack.prod.conf.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @file: webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> HappyPack = <span class="built_in">require</span>(<span class="string">'happypack'</span>);</span><br><span class="line"> </span><br><span class="line">exports.module = &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/.js$/</span>,</span><br><span class="line">      <span class="comment">// 1) replace your original list of loaders with "happypack/loader":</span></span><br><span class="line">      <span class="comment">// loaders: [ 'babel-loader?presets[]=es2015' ],</span></span><br><span class="line">      use: <span class="string">'happypack/loader'</span>,</span><br><span class="line">      include: [ <span class="comment">/* ... */</span> ],</span><br><span class="line">      exclude: [ <span class="comment">/* ... */</span> ]</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  plugins: [</span><br><span class="line">     <span class="comment">// 2) create the plugin:</span></span><br><span class="line">    <span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">        <span class="comment">// 3) re-add the loaders you replaced above in #1:</span></span><br><span class="line">        loaders: [ <span class="string">'babel-loader?presets[]=es2015'</span> ]</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时的编译时间也减小了一些</p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-1cee221ca808dce0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><blockquote><p>更多详情 <a href="http://blog.poetries.top/2018/11/21/webpack-review/#6-1-%E5%88%86%E6%9E%90%E6%89%93%E5%8C%85%E7%BB%93%E6%9E%9C">http://blog.poetries.top/2018/11/21/webpack-review/#6-1-%E5%88%86%E6%9E%90%E6%89%93%E5%8C%85%E7%BB%93%E6%9E%9C</a></p></blockquote><h2 id="三、更多参考"><a href="#三、更多参考" class="headerlink" title="三、更多参考"></a>三、更多参考</h2><ul><li><a href="https://www.jeffjade.com/2017/08/06/124-webpack-packge-optimization-for-volume/" target="_blank" rel="noopener">Webpack 打包优化之体积篇</a></li><li><a href="https://www.jeffjade.com/2017/08/12/125-webpack-package-optimization-for-speed/" target="_blank" rel="noopener">Webpack 打包优化之速度篇</a></li><li><a href="https://segmentfault.com/a/1190000007104372" target="_blank" rel="noopener">预打包Dll，实现webpack音速编译</a></li><li><a href="https://juejin.im/post/5a4f031b518825733e6040c0" target="_blank" rel="noopener">利用DllPlugin分割你的第三方库</a></li><li><a href="https://github.com/p2227/p2227.github.io/issues/21" target="_blank" rel="noopener">提高webpack的打包速度：happypack和dll打包</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;博客链接 &lt;a href=&quot;http://blog.poetries.top/2018/11/23/webpack-dll&quot;&gt;http://blog.poetries.top/2018/11/23/webpack-dll&lt;/a&gt;&lt;/p&gt;
&lt;/blo
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="webpack" scheme="http://blog.poetries.top/tags/webpack/"/>
    
      <category term="dll" scheme="http://blog.poetries.top/tags/dll/"/>
    
  </entry>
  
  <entry>
    <title>eslint配置文件详解</title>
    <link href="http://blog.poetries.top/2018/11/23/eslint-conf-info/"/>
    <id>http://blog.poetries.top/2018/11/23/eslint-conf-info/</id>
    <published>2018-11-23T02:40:08.000Z</published>
    <updated>2018-11-28T12:50:39.001Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>ESLint</code>是一个<code>Javascript</code>静态检查工具，它可以帮你养成良好的编程习惯</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 环境定义了预定义的全局变量。</span></span><br><span class="line">    <span class="string">"env"</span>: &#123;</span><br><span class="line">        <span class="comment">//环境定义了预定义的全局变量。更多在官网查看</span></span><br><span class="line">        <span class="string">"browser"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"node"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"commonjs"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"amd"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"es6"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"mocha"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// JavaScript 语言选项</span></span><br><span class="line">    <span class="string">"parserOptions"</span>: &#123;</span><br><span class="line">        <span class="comment">// ECMAScript 版本</span></span><br><span class="line">        <span class="string">"ecmaVersion"</span>: <span class="number">6</span>,</span><br><span class="line">        <span class="string">"sourceType"</span>: <span class="string">"module"</span>, <span class="comment">//设置为 "script" (默认) 或 "module"（如果你的代码是 ECMAScript 模块)。</span></span><br><span class="line">        <span class="comment">//想使用的额外的语言特性:</span></span><br><span class="line">        <span class="string">"ecmaFeatures"</span>: &#123;</span><br><span class="line">            <span class="comment">// 允许在全局作用域下使用 return 语句</span></span><br><span class="line">            <span class="string">"globalReturn"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">// impliedStric</span></span><br><span class="line">            <span class="string">"impliedStrict"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">// 启用 JSX</span></span><br><span class="line">            <span class="string">"jsx"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">"modules"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//-----让eslint支持 JSX start</span></span><br><span class="line">    <span class="string">"plugins"</span>: [</span><br><span class="line">        <span class="string">"react"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"extends"</span>: [</span><br><span class="line">        <span class="string">"eslint:recommended"</span>,</span><br><span class="line">        <span class="string">"plugin:react/recommended"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">//-----让eslint支持 JSX end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * "off" 或 0 - 关闭规则</span></span><br><span class="line"><span class="comment">     * "warn" 或 1 - 开启规则，使用警告级别的错误：warn (不会导致程序退出),</span></span><br><span class="line"><span class="comment">     * "error" 或 2 - 开启规则，使用错误级别的错误：error (当被触发的时候，程序会退出)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="string">"rules"</span>: &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">////////////////</span></span><br><span class="line">        <span class="comment">// 可能的错误 //</span></span><br><span class="line">        <span class="comment">////////////////</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 禁止条件表达式中出现赋值操作符</span></span><br><span class="line">        <span class="string">"no-cond-assign"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁用 console</span></span><br><span class="line">        <span class="string">"no-console"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 禁止在条件中使用常量表达式</span></span><br><span class="line">        <span class="comment">// if (false) &#123;</span></span><br><span class="line">        <span class="comment">// doSomethingUnfinished();</span></span><br><span class="line">        <span class="comment">// &#125; //cuowu</span></span><br><span class="line">        <span class="string">"no-constant-condition"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止在正则表达式中使用控制字符 ：new RegExp("\x1f")</span></span><br><span class="line">        <span class="string">"no-control-regex"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 数组和对象键值对最后一个逗号， never参数：不能带末尾的逗号, always参数：必须带末尾的逗号，</span></span><br><span class="line">        <span class="comment">// always-multiline：多行模式必须带逗号，单行模式不能带逗号</span></span><br><span class="line">        <span class="string">"comma-dangle"</span>: [<span class="number">1</span>, <span class="string">"never"</span>],</span><br><span class="line">        <span class="comment">// 禁用 debugger</span></span><br><span class="line">        <span class="string">"no-debugger"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止 function 定义中出现重名参数</span></span><br><span class="line">        <span class="string">"no-dupe-args"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止对象字面量中出现重复的 key</span></span><br><span class="line">        <span class="string">"no-dupe-keys"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止重复的 case 标签</span></span><br><span class="line">        <span class="string">"no-duplicate-case"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止空语句块</span></span><br><span class="line">        <span class="string">"no-empty"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止在正则表达式中使用空字符集 (/^abc[]/)</span></span><br><span class="line">        <span class="string">"no-empty-character-class"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止对 catch 子句的参数重新赋值</span></span><br><span class="line">        <span class="string">"no-ex-assign"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止不必要的布尔转换</span></span><br><span class="line">        <span class="string">"no-extra-boolean-cast"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止不必要的括号 //(a * b) + c;//报错</span></span><br><span class="line">        <span class="string">"no-extra-parens"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 禁止不必要的分号</span></span><br><span class="line">        <span class="string">"no-extra-semi"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止对 function 声明重新赋值</span></span><br><span class="line">        <span class="string">"no-func-assign"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止在嵌套的块中出现 function 或 var 声明</span></span><br><span class="line">        <span class="string">"no-inner-declarations"</span>: [<span class="number">2</span>, <span class="string">"functions"</span>],</span><br><span class="line">        <span class="comment">// 禁止 RegExp 构造函数中无效的正则表达式字符串</span></span><br><span class="line">        <span class="string">"no-invalid-regexp"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止在字符串和注释之外不规则的空白</span></span><br><span class="line">        <span class="string">"no-irregular-whitespace"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止在 in 表达式中出现否定的左操作数</span></span><br><span class="line">        <span class="string">"no-negated-in-lhs"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止把全局对象 (Math 和 JSON) 作为函数调用 错误：var math = Math();</span></span><br><span class="line">        <span class="string">"no-obj-calls"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止直接使用 Object.prototypes 的内置属性</span></span><br><span class="line">        <span class="string">"no-prototype-builtins"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 禁止正则表达式字面量中出现多个空格</span></span><br><span class="line">        <span class="string">"no-regex-spaces"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁用稀疏数组</span></span><br><span class="line">        <span class="string">"no-sparse-arrays"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止出现令人困惑的多行表达式</span></span><br><span class="line">        <span class="string">"no-unexpected-multiline"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止在return、throw、continue 和 break语句之后出现不可达代码</span></span><br><span class="line">        <span class="string">"no-unreachable"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 要求使用 isNaN() 检查 NaN</span></span><br><span class="line">        <span class="string">"use-isnan"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 强制使用有效的 JSDoc 注释</span></span><br><span class="line">        <span class="string">"valid-jsdoc"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="comment">// 强制 typeof 表达式与有效的字符串进行比较</span></span><br><span class="line">        <span class="comment">// typeof foo === "undefimed" 错误</span></span><br><span class="line">        <span class="string">"valid-typeof"</span>: <span class="number">2</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//////////////</span></span><br><span class="line">        <span class="comment">// 最佳实践 //</span></span><br><span class="line">        <span class="comment">//////////////</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义对象的set存取器属性时，强制定义get</span></span><br><span class="line">        <span class="string">"accessor-pairs"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 强制数组方法的回调函数中有 return 语句</span></span><br><span class="line">        <span class="string">"array-callback-return"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 强制把变量的使用限制在其定义的作用域范围内</span></span><br><span class="line">        <span class="string">"block-scoped-var"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 限制圈复杂度，也就是类似if else能连续接多少个</span></span><br><span class="line">        <span class="string">"complexity"</span>: [<span class="number">2</span>, <span class="number">9</span>],</span><br><span class="line">        <span class="comment">// 要求 return 语句要么总是指定返回的值，要么不指定</span></span><br><span class="line">        <span class="string">"consistent-return"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 强制所有控制语句使用一致的括号风格</span></span><br><span class="line">        <span class="string">"curly"</span>: [<span class="number">2</span>, <span class="string">"all"</span>],</span><br><span class="line">        <span class="comment">// switch 语句强制 default 分支，也可添加 // no default 注释取消此次警告</span></span><br><span class="line">        <span class="string">"default-case"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 强制object.key 中 . 的位置，参数:</span></span><br><span class="line">        <span class="comment">// property，'.'号应与属性在同一行</span></span><br><span class="line">        <span class="comment">// object, '.' 号应与对象名在同一行</span></span><br><span class="line">        <span class="string">"dot-location"</span>: [<span class="number">2</span>, <span class="string">"property"</span>],</span><br><span class="line">        <span class="comment">// 强制使用.号取属性</span></span><br><span class="line">        <span class="comment">// 参数： allowKeywords：true 使用保留字做属性名时，只能使用.方式取属性</span></span><br><span class="line">        <span class="comment">// false 使用保留字做属性名时, 只能使用[]方式取属性 e.g [2, &#123;"allowKeywords": false&#125;]</span></span><br><span class="line">        <span class="comment">// allowPattern: 当属性名匹配提供的正则表达式时，允许使用[]方式取值,否则只能用.号取值 e.g [2, &#123;"allowPattern": "^[a-z]+(_[a-z]+)+$"&#125;]</span></span><br><span class="line">        <span class="string">"dot-notation"</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">            <span class="string">"allowKeywords"</span>: <span class="literal">false</span></span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="comment">// 使用 === 替代 == allow-null允许null和undefined==</span></span><br><span class="line">        <span class="string">"eqeqeq"</span>: [<span class="number">2</span>, <span class="string">"allow-null"</span>],</span><br><span class="line">        <span class="comment">// 要求 for-in 循环中有一个 if 语句</span></span><br><span class="line">        <span class="string">"guard-for-in"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁用 alert、confirm 和 prompt</span></span><br><span class="line">        <span class="string">"no-alert"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 禁用 arguments.caller 或 arguments.callee</span></span><br><span class="line">        <span class="string">"no-caller"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 不允许在 case 子句中使用词法声明</span></span><br><span class="line">        <span class="string">"no-case-declarations"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止除法操作符显式的出现在正则表达式开始的位置</span></span><br><span class="line">        <span class="string">"no-div-regex"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止 if 语句中有 return 之后有 else</span></span><br><span class="line">        <span class="string">"no-else-return"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 禁止出现空函数.如果一个函数包含了一条注释，它将不会被认为有问题。</span></span><br><span class="line">        <span class="string">"no-empty-function"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止使用空解构模式no-empty-pattern</span></span><br><span class="line">        <span class="string">"no-empty-pattern"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止在没有类型检查操作符的情况下与 null 进行比较</span></span><br><span class="line">        <span class="string">"no-eq-null"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="comment">// 禁用 eval()</span></span><br><span class="line">        <span class="string">"no-eval"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止扩展原生类型</span></span><br><span class="line">        <span class="string">"no-extend-native"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止不必要的 .bind() 调用</span></span><br><span class="line">        <span class="string">"no-extra-bind"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁用不必要的标签</span></span><br><span class="line">        <span class="string">"no-extra-label:"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 禁止 case 语句落空</span></span><br><span class="line">        <span class="string">"no-fallthrough"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止数字字面量中使用前导和末尾小数点</span></span><br><span class="line">        <span class="string">"no-floating-decimal"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止使用短符号进行类型转换(!!fOO)</span></span><br><span class="line">        <span class="string">"no-implicit-coercion"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 禁止在全局范围内使用 var 和命名的 function 声明</span></span><br><span class="line">        <span class="string">"no-implicit-globals"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="comment">// 禁止使用类似 eval() 的方法</span></span><br><span class="line">        <span class="string">"no-implied-eval"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止 this 关键字出现在类和类对象之外</span></span><br><span class="line">        <span class="string">"no-invalid-this"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 禁用 __iterator__ 属性</span></span><br><span class="line">        <span class="string">"no-iterator"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁用标签语句</span></span><br><span class="line">        <span class="string">"no-labels"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁用不必要的嵌套块</span></span><br><span class="line">        <span class="string">"no-lone-blocks"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止在循环中出现 function 声明和表达式</span></span><br><span class="line">        <span class="string">"no-loop-func"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="comment">// 禁用魔术数字(3.14什么的用常量代替)</span></span><br><span class="line">        <span class="string">"no-magic-numbers"</span>: [<span class="number">1</span>, &#123;</span><br><span class="line">            <span class="string">"ignore"</span>: [<span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>]</span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="comment">// 禁止使用多个空格</span></span><br><span class="line">        <span class="string">"no-multi-spaces"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止使用多行字符串，在 JavaScript 中，可以在新行之前使用斜线创建多行字符串</span></span><br><span class="line">        <span class="string">"no-multi-str"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止对原生对象赋值</span></span><br><span class="line">        <span class="string">"no-native-reassign"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止在非赋值或条件语句中使用 new 操作符</span></span><br><span class="line">        <span class="string">"no-new"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止对 Function 对象使用 new 操作符</span></span><br><span class="line">        <span class="string">"no-new-func"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 禁止对 String，Number 和 Boolean 使用 new 操作符</span></span><br><span class="line">        <span class="string">"no-new-wrappers"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁用八进制字面量</span></span><br><span class="line">        <span class="string">"no-octal"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止在字符串中使用八进制转义序列</span></span><br><span class="line">        <span class="string">"no-octal-escape"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 不允许对 function 的参数进行重新赋值</span></span><br><span class="line">        <span class="string">"no-param-reassign"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 禁用 __proto__ 属性</span></span><br><span class="line">        <span class="string">"no-proto"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止使用 var 多次声明同一变量</span></span><br><span class="line">        <span class="string">"no-redeclare"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁用指定的通过 require 加载的模块</span></span><br><span class="line">        <span class="string">"no-return-assign"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 禁止使用 javascript: url</span></span><br><span class="line">        <span class="string">"no-script-url"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 禁止自我赋值</span></span><br><span class="line">        <span class="string">"no-self-assign"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止自身比较</span></span><br><span class="line">        <span class="string">"no-self-compare"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁用逗号操作符</span></span><br><span class="line">        <span class="string">"no-sequences"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止抛出非异常字面量</span></span><br><span class="line">        <span class="string">"no-throw-literal"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁用一成不变的循环条件</span></span><br><span class="line">        <span class="string">"no-unmodified-loop-condition"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止出现未使用过的表达式</span></span><br><span class="line">        <span class="string">"no-unused-expressions"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 禁用未使用过的标签</span></span><br><span class="line">        <span class="string">"no-unused-labels"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止不必要的 .call() 和 .apply()</span></span><br><span class="line">        <span class="string">"no-useless-call"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止不必要的字符串字面量或模板字面量的连接</span></span><br><span class="line">        <span class="string">"no-useless-concat"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁用不必要的转义字符</span></span><br><span class="line">        <span class="string">"no-useless-escape"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 禁用 void 操作符</span></span><br><span class="line">        <span class="string">"no-void"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 禁止在注释中使用特定的警告术语</span></span><br><span class="line">        <span class="string">"no-warning-comments"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 禁用 with 语句</span></span><br><span class="line">        <span class="string">"no-with"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 强制在parseInt()使用基数参数</span></span><br><span class="line">        <span class="string">"radix"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 要求所有的 var 声明出现在它们所在的作用域顶部</span></span><br><span class="line">        <span class="string">"vars-on-top"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 要求 IIFE 使用括号括起来</span></span><br><span class="line">        <span class="string">"wrap-iife"</span>: [<span class="number">2</span>, <span class="string">"any"</span>],</span><br><span class="line">        <span class="comment">// 要求或禁止 “Yoda” 条件</span></span><br><span class="line">        <span class="string">"yoda"</span>: [<span class="number">2</span>, <span class="string">"never"</span>],</span><br><span class="line">        <span class="comment">// 要求或禁止使用严格模式指令</span></span><br><span class="line">        <span class="string">"strict"</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//////////////</span></span><br><span class="line">        <span class="comment">// 变量声明 //</span></span><br><span class="line">        <span class="comment">//////////////</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 要求或禁止 var 声明中的初始化(初值)</span></span><br><span class="line">        <span class="string">"init-declarations"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 不允许 catch 子句的参数与外层作用域中的变量同名</span></span><br><span class="line">        <span class="string">"no-catch-shadow"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 禁止删除变量</span></span><br><span class="line">        <span class="string">"no-delete-var"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 不允许标签与变量同名</span></span><br><span class="line">        <span class="string">"no-label-var"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁用特定的全局变量</span></span><br><span class="line">        <span class="string">"no-restricted-globals"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 禁止 var 声明 与外层作用域的变量同名</span></span><br><span class="line">        <span class="string">"no-shadow"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 禁止覆盖受限制的标识符</span></span><br><span class="line">        <span class="string">"no-shadow-restricted-names"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁用未声明的变量，除非它们在 /*global */ 注释中被提到</span></span><br><span class="line">        <span class="string">"no-undef"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止将变量初始化为 undefined</span></span><br><span class="line">        <span class="string">"no-undef-init"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止将 undefined 作为标识符</span></span><br><span class="line">        <span class="string">"no-undefined"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 禁止出现未使用过的变量</span></span><br><span class="line">        <span class="string">"no-unused-vars"</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">            <span class="string">"vars"</span>: <span class="string">"all"</span>,</span><br><span class="line">            <span class="string">"args"</span>: <span class="string">"none"</span></span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="comment">// 不允许在变量定义之前使用它们</span></span><br><span class="line">        <span class="string">"no-use-before-define"</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">//////////////////////////</span></span><br><span class="line">        <span class="comment">// Node.js and CommonJS //</span></span><br><span class="line">        <span class="comment">//////////////////////////</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// require return statements after callbacks</span></span><br><span class="line">        <span class="string">"callback-return"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 要求 require() 出现在顶层模块作用域中</span></span><br><span class="line">        <span class="string">"global-require"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="comment">// 要求回调函数中有容错处理</span></span><br><span class="line">        <span class="string">"handle-callback-err"</span>: [<span class="number">2</span>, <span class="string">"^(err|error)$"</span>],</span><br><span class="line">        <span class="comment">// 禁止混合常规 var 声明和 require 调用</span></span><br><span class="line">        <span class="string">"no-mixed-requires"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 禁止调用 require 时使用 new 操作符</span></span><br><span class="line">        <span class="string">"no-new-require"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止对 __dirname 和 __filename进行字符串连接</span></span><br><span class="line">        <span class="string">"no-path-concat"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 禁用 process.env</span></span><br><span class="line">        <span class="string">"no-process-env"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 禁用 process.exit()</span></span><br><span class="line">        <span class="string">"no-process-exit"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 禁用同步方法</span></span><br><span class="line">        <span class="string">"no-sync"</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">//////////////</span></span><br><span class="line">        <span class="comment">// 风格指南 //</span></span><br><span class="line">        <span class="comment">//////////////</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指定数组的元素之间要以空格隔开(, 后面)， never参数：[ 之前和 ] 之后不能带空格，always参数：[ 之前和 ] 之后必须带空格</span></span><br><span class="line">        <span class="string">"array-bracket-spacing"</span>: [<span class="number">2</span>, <span class="string">"never"</span>],</span><br><span class="line">        <span class="comment">// 禁止或强制在单行代码块中使用空格(禁用)</span></span><br><span class="line">        <span class="string">"block-spacing"</span>: [<span class="number">1</span>, <span class="string">"never"</span>],</span><br><span class="line">        <span class="comment">//强制使用一致的缩进 第二个参数为 "tab" 时，会使用tab，</span></span><br><span class="line">        <span class="comment">// if while function 后面的&#123;必须与if在同一行，java风格。</span></span><br><span class="line">        <span class="string">"brace-style"</span>: [<span class="number">2</span>, <span class="string">"1tbs"</span>, &#123;</span><br><span class="line">            <span class="string">"allowSingleLine"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="comment">// 双峰驼命名格式</span></span><br><span class="line">        <span class="string">"camelcase"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 控制逗号前后的空格</span></span><br><span class="line">        <span class="string">"comma-spacing"</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">            <span class="string">"before"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"after"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="comment">// 控制逗号在行尾出现还是在行首出现 (默认行尾)</span></span><br><span class="line">        <span class="comment">// http://eslint.org/docs/rules/comma-style</span></span><br><span class="line">        <span class="string">"comma-style"</span>: [<span class="number">2</span>, <span class="string">"last"</span>],</span><br><span class="line">        <span class="comment">//"SwitchCase" (默认：0) 强制 switch 语句中的 case 子句的缩进水平</span></span><br><span class="line">        <span class="comment">// 以方括号取对象属性时，[ 后面和 ] 前面是否需要空格, 可选参数 never, always</span></span><br><span class="line">        <span class="string">"computed-property-spacing"</span>: [<span class="number">2</span>, <span class="string">"never"</span>],</span><br><span class="line">        <span class="comment">// 用于指统一在回调函数中指向this的变量名，箭头函数中的this已经可以指向外层调用者，应该没卵用了</span></span><br><span class="line">        <span class="comment">// e.g [0,"that"] 指定只能 var that = this. that不能指向其他任何值，this也不能赋值给that以外的其他值</span></span><br><span class="line">        <span class="string">"consistent-this"</span>: [<span class="number">1</span>, <span class="string">"that"</span>],</span><br><span class="line">        <span class="comment">// 强制使用命名的 function 表达式</span></span><br><span class="line">        <span class="string">"func-names"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 文件末尾强制换行</span></span><br><span class="line">        <span class="string">"eol-last"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">"indent"</span>: [<span class="number">2</span>, <span class="number">4</span>, &#123;</span><br><span class="line">            <span class="string">"SwitchCase"</span>: <span class="number">1</span></span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="comment">// 强制在对象字面量的属性中键和值之间使用一致的间距</span></span><br><span class="line">        <span class="string">"key-spacing"</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">            <span class="string">"beforeColon"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">"afterColon"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="comment">// 强制使用一致的换行风格</span></span><br><span class="line">        <span class="string">"linebreak-style"</span>: [<span class="number">1</span>, <span class="string">"unix"</span>],</span><br><span class="line">        <span class="comment">// 要求在注释周围有空行 ( 要求在块级注释之前有一空行)</span></span><br><span class="line">        <span class="string">"lines-around-comment"</span>: [<span class="number">1</span>, &#123;</span><br><span class="line">            <span class="string">"beforeBlockComment"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="comment">// 强制一致地使用函数声明或函数表达式，方法定义风格，参数：</span></span><br><span class="line">        <span class="comment">// declaration: 强制使用方法声明的方式，function f()&#123;&#125; e.g [2, "declaration"]</span></span><br><span class="line">        <span class="comment">// expression：强制使用方法表达式的方式，var f = function() &#123;&#125; e.g [2, "expression"]</span></span><br><span class="line">        <span class="comment">// allowArrowFunctions: declaration风格中允许箭头函数。 e.g [2, "declaration", &#123; "allowArrowFunctions": true &#125;]</span></span><br><span class="line">        <span class="string">"func-style"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 强制回调函数最大嵌套深度 5层</span></span><br><span class="line">        <span class="string">"max-nested-callbacks"</span>: [<span class="number">1</span>, <span class="number">5</span>],</span><br><span class="line">        <span class="comment">// 禁止使用指定的标识符</span></span><br><span class="line">        <span class="string">"id-blacklist"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 强制标识符的最新和最大长度</span></span><br><span class="line">        <span class="string">"id-length"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 要求标识符匹配一个指定的正则表达式</span></span><br><span class="line">        <span class="string">"id-match"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 强制在 JSX 属性中一致地使用双引号或单引号</span></span><br><span class="line">        <span class="string">"jsx-quotes"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 强制在关键字前后使用一致的空格 (前后腰需要)</span></span><br><span class="line">        <span class="string">"keyword-spacing"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 强制一行的最大长度</span></span><br><span class="line">        <span class="string">"max-len"</span>: [<span class="number">1</span>, <span class="number">200</span>],</span><br><span class="line">        <span class="comment">// 强制最大行数</span></span><br><span class="line">        <span class="string">"max-lines"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 强制 function 定义中最多允许的参数数量</span></span><br><span class="line">        <span class="string">"max-params"</span>: [<span class="number">1</span>, <span class="number">7</span>],</span><br><span class="line">        <span class="comment">// 强制 function 块最多允许的的语句数量</span></span><br><span class="line">        <span class="string">"max-statements"</span>: [<span class="number">1</span>, <span class="number">200</span>],</span><br><span class="line">        <span class="comment">// 强制每一行中所允许的最大语句数量</span></span><br><span class="line">        <span class="string">"max-statements-per-line"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 要求构造函数首字母大写 （要求调用 new 操作符时有首字母大小的函数，允许调用首字母大写的函数时没有 new 操作符。）</span></span><br><span class="line">        <span class="string">"new-cap"</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">            <span class="string">"newIsCap"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">"capIsNew"</span>: <span class="literal">false</span></span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="comment">// 要求调用无参构造函数时有圆括号</span></span><br><span class="line">        <span class="string">"new-parens"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 要求或禁止 var 声明语句后有一行空行</span></span><br><span class="line">        <span class="string">"newline-after-var"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 禁止使用 Array 构造函数</span></span><br><span class="line">        <span class="string">"no-array-constructor"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁用按位运算符</span></span><br><span class="line">        <span class="string">"no-bitwise"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 要求 return 语句之前有一空行</span></span><br><span class="line">        <span class="string">"newline-before-return"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 要求方法链中每个调用都有一个换行符</span></span><br><span class="line">        <span class="string">"newline-per-chained-call"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="comment">// 禁用 continue 语句</span></span><br><span class="line">        <span class="string">"no-continue"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 禁止在代码行后使用内联注释</span></span><br><span class="line">        <span class="string">"no-inline-comments"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 禁止 if 作为唯一的语句出现在 else 语句中</span></span><br><span class="line">        <span class="string">"no-lonely-if"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 禁止混合使用不同的操作符</span></span><br><span class="line">        <span class="string">"no-mixed-operators"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 不允许空格和 tab 混合缩进</span></span><br><span class="line">        <span class="string">"no-mixed-spaces-and-tabs"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 不允许多个空行</span></span><br><span class="line">        <span class="string">"no-multiple-empty-lines"</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">            <span class="string">"max"</span>: <span class="number">2</span></span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="comment">// 不允许否定的表达式</span></span><br><span class="line">        <span class="string">"no-negated-condition"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 不允许使用嵌套的三元表达式</span></span><br><span class="line">        <span class="string">"no-nested-ternary"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 禁止使用 Object 的构造函数</span></span><br><span class="line">        <span class="string">"no-new-object"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止使用一元操作符 ++ 和 --</span></span><br><span class="line">        <span class="string">"no-plusplus"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 禁止使用特定的语法</span></span><br><span class="line">        <span class="string">"no-restricted-syntax"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 禁止 function 标识符和括号之间出现空格</span></span><br><span class="line">        <span class="string">"no-spaced-func"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 不允许使用三元操作符</span></span><br><span class="line">        <span class="string">"no-ternary"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 禁用行尾空格</span></span><br><span class="line">        <span class="string">"no-trailing-spaces"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止标识符中有悬空下划线_bar</span></span><br><span class="line">        <span class="string">"no-underscore-dangle"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 禁止可以在有更简单的可替代的表达式时使用三元操作符</span></span><br><span class="line">        <span class="string">"no-unneeded-ternary"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止属性前有空白</span></span><br><span class="line">        <span class="string">"no-whitespace-before-property"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 强制花括号内换行符的一致性</span></span><br><span class="line">        <span class="string">"object-curly-newline"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 强制在花括号中使用一致的空格</span></span><br><span class="line">        <span class="string">"object-curly-spacing"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 强制将对象的属性放在不同的行上</span></span><br><span class="line">        <span class="string">"object-property-newline"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 强制函数中的变量要么一起声明要么分开声明</span></span><br><span class="line">        <span class="string">"one-var"</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">            <span class="string">"initialized"</span>: <span class="string">"never"</span></span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="comment">// 要求或禁止在 var 声明周围换行</span></span><br><span class="line">        <span class="string">"one-var-declaration-per-line"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 要求或禁止在可能的情况下要求使用简化的赋值操作符</span></span><br><span class="line">        <span class="string">"operator-assignment"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 强制操作符使用一致的换行符</span></span><br><span class="line">        <span class="string">"operator-linebreak"</span>: [<span class="number">2</span>, <span class="string">"after"</span>, &#123;</span><br><span class="line">            <span class="string">"overrides"</span>: &#123;</span><br><span class="line">                <span class="string">"?"</span>: <span class="string">"before"</span>,</span><br><span class="line">                <span class="string">":"</span>: <span class="string">"before"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="comment">// 要求或禁止块内填充</span></span><br><span class="line">        <span class="string">"padded-blocks"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 要求对象字面量属性名称用引号括起来</span></span><br><span class="line">        <span class="string">"quote-props"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 强制使用一致的反勾号、双引号或单引号</span></span><br><span class="line">        <span class="string">"quotes"</span>: [<span class="number">2</span>, <span class="string">"double"</span>, <span class="string">"avoid-escape"</span>],</span><br><span class="line">        <span class="comment">// 要求使用 JSDoc 注释</span></span><br><span class="line">        <span class="string">"require-jsdoc"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="comment">// 要求或禁止使用分号而不是 ASI（这个才是控制行尾部分号的，）</span></span><br><span class="line">        <span class="string">"semi"</span>: [<span class="number">2</span>, <span class="string">"always"</span>],</span><br><span class="line">        <span class="comment">// 强制分号之前和之后使用一致的空格</span></span><br><span class="line">        <span class="string">"semi-spacing"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 要求同一个声明块中的变量按顺序排列</span></span><br><span class="line">        <span class="string">"sort-vars"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 强制在块之前使用一致的空格</span></span><br><span class="line">        <span class="string">"space-before-blocks"</span>: [<span class="number">2</span>, <span class="string">"always"</span>],</span><br><span class="line">        <span class="comment">// 强制在 function的左括号之前使用一致的空格</span></span><br><span class="line">        <span class="string">"space-before-function-paren"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],</span><br><span class="line">        <span class="comment">// 强制在圆括号内使用一致的空格</span></span><br><span class="line">        <span class="string">"space-in-parens"</span>: [<span class="number">2</span>, <span class="string">"never"</span>],</span><br><span class="line">        <span class="comment">// 要求操作符周围有空格</span></span><br><span class="line">        <span class="string">"space-infix-ops"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 强制在一元操作符前后使用一致的空格</span></span><br><span class="line">        <span class="string">"space-unary-ops"</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">            <span class="string">"words"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">"nonwords"</span>: <span class="literal">false</span></span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="comment">// 强制在注释中 // 或 /* 使用一致的空格</span></span><br><span class="line">        <span class="string">"spaced-comment"</span>: [<span class="number">2</span>, <span class="string">"always"</span>, &#123;</span><br><span class="line">            <span class="string">"markers"</span>: [<span class="string">"global"</span>, <span class="string">"globals"</span>, <span class="string">"eslint"</span>, <span class="string">"eslint-disable"</span>, <span class="string">"*package"</span>, <span class="string">"!"</span>]</span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="comment">// 要求或禁止 Unicode BOM</span></span><br><span class="line">        <span class="string">"unicode-bom"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 要求正则表达式被括号括起来</span></span><br><span class="line">        <span class="string">"wrap-regex"</span>: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">//////////////</span></span><br><span class="line">        <span class="comment">// ES6.相关 //</span></span><br><span class="line">        <span class="comment">//////////////</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 要求箭头函数体使用大括号</span></span><br><span class="line">        <span class="string">"arrow-body-style"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 要求箭头函数的参数使用圆括号</span></span><br><span class="line">        <span class="string">"arrow-parens"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="string">"arrow-spacing"</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">            <span class="string">"before"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">"after"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="comment">// 强制在子类构造函数中用super()调用父类构造函数，TypeScrip的编译器也会提示</span></span><br><span class="line">        <span class="string">"constructor-super"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 强制 generator 函数中 * 号周围使用一致的空格</span></span><br><span class="line">        <span class="string">"generator-star-spacing"</span>: [<span class="number">2</span>, &#123;</span><br><span class="line">            <span class="string">"before"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">"after"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="comment">// 禁止修改类声明的变量</span></span><br><span class="line">        <span class="string">"no-class-assign"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 不允许箭头功能，在那里他们可以混淆的比较</span></span><br><span class="line">        <span class="string">"no-confusing-arrow"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 禁止修改 const 声明的变量</span></span><br><span class="line">        <span class="string">"no-const-assign"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止类成员中出现重复的名称</span></span><br><span class="line">        <span class="string">"no-dupe-class-members"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 不允许复制模块的进口</span></span><br><span class="line">        <span class="string">"no-duplicate-imports"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 禁止 Symbol 的构造函数</span></span><br><span class="line">        <span class="string">"no-new-symbol"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 允许指定模块加载时的进口</span></span><br><span class="line">        <span class="string">"no-restricted-imports"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 禁止在构造函数中，在调用 super() 之前使用 this 或 super</span></span><br><span class="line">        <span class="string">"no-this-before-super"</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="comment">// 禁止不必要的计算性能键对象的文字</span></span><br><span class="line">        <span class="string">"no-useless-computed-key"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 要求使用 let 或 const 而不是 var</span></span><br><span class="line">        <span class="string">"no-var"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 要求或禁止对象字面量中方法和属性使用简写语法</span></span><br><span class="line">        <span class="string">"object-shorthand"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 要求使用箭头函数作为回调</span></span><br><span class="line">        <span class="string">"prefer-arrow-callback"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 要求使用 const 声明那些声明后不再被修改的变量</span></span><br><span class="line">        <span class="string">"prefer-const"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 要求在合适的地方使用 Reflect 方法</span></span><br><span class="line">        <span class="string">"prefer-reflect"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 要求使用扩展运算符而非 .apply()</span></span><br><span class="line">        <span class="string">"prefer-spread"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 要求使用模板字面量而非字符串连接</span></span><br><span class="line">        <span class="string">"prefer-template"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// Suggest using the rest parameters instead of arguments</span></span><br><span class="line">        <span class="string">"prefer-rest-params"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 要求generator 函数内有 yield</span></span><br><span class="line">        <span class="string">"require-yield"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// enforce spacing between rest and spread operators and their expressions</span></span><br><span class="line">        <span class="string">"rest-spread-spacing"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 强制模块内的 import 排序</span></span><br><span class="line">        <span class="string">"sort-imports"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="comment">// 要求或禁止模板字符串中的嵌入表达式周围空格的使用</span></span><br><span class="line">        <span class="string">"template-curly-spacing"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="comment">// 强制在 yield* 表达式中 * 周围使用空格</span></span><br><span class="line">        <span class="string">"yield-star-spacing"</span>: <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>关闭段落校验</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/* eslint-disable */</span><br></pre></td></tr></table></figure><ul><li>关闭当前行校验</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">some code // eslint-disable-line</span><br></pre></td></tr></table></figure><ul><li>关闭下一行校验</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// eslint-disable-next-line</span><br><span class="line">some code</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;ESLint&lt;/code&gt;是一个&lt;code&gt;Javascript&lt;/code&gt;静态检查工具，它可以帮你养成良好的编程习惯&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="eslint" scheme="http://blog.poetries.top/tags/eslint/"/>
    
      <category term="代码风格" scheme="http://blog.poetries.top/tags/%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC/"/>
    
  </entry>
  
  <entry>
    <title>webpack回顾篇</title>
    <link href="http://blog.poetries.top/2018/11/21/webpack-review/"/>
    <id>http://blog.poetries.top/2018/11/21/webpack-review/</id>
    <published>2018-11-21T09:40:08.000Z</published>
    <updated>2018-11-28T12:50:39.029Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>基于<code>webpack3</code></p></blockquote><h2 id="一、webpack简介"><a href="#一、webpack简介" class="headerlink" title="一、webpack简介"></a>一、webpack简介</h2><h3 id="1-1-版本更迭"><a href="#1-1-版本更迭" class="headerlink" title="1.1 版本更迭"></a>1.1 版本更迭</h3><p><img src="https://upload-images.jianshu.io/upload_images/1480597-323d70783413ae1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>大版本变化</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-4fe90a7f3cb6712e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="1-2-功能进化"><a href="#1-2-功能进化" class="headerlink" title="1.2 功能进化"></a>1.2 功能进化</h3><p><strong>Webpack V1</strong></p><ul><li>编译、打包</li><li><code>HMR</code> (模块热更新)</li><li>代码分割</li><li>文件处理</li></ul><p><strong>Webpack V2</strong></p><ul><li><code>Tree Shaking</code></li><li><code>ES module</code></li><li>动态 <code>Import</code></li><li>新的文档</li></ul><p><strong>Webpack V3</strong></p><ul><li><code>Scope Hoisting</code> (作用域提升)</li><li><code>Magic Comments</code> （配合动态<code>import</code>使用）</li></ul><blockquote><p>版本迁移</p></blockquote><p><strong>V1 -&gt; V2</strong></p><p>迁移指南 <a href="https://doc.webpack-china.org/guides/migrating/" target="_blank" rel="noopener">https://doc.webpack-china.org/guides/migrating/</a></p><p><strong>V2 -&gt; V3</strong></p><p>更新升级即可</p><h2 id="二、webpack核心概念"><a href="#二、webpack核心概念" class="headerlink" title="二、webpack核心概念"></a>二、webpack核心概念</h2><h3 id="2-1-Entry"><a href="#2-1-Entry" class="headerlink" title="2.1 Entry"></a>2.1 Entry</h3><ul><li>代码的入口</li><li>打包的入口</li><li>单个或多个</li></ul><blockquote><p>写法建议使用键值对写法</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'index.js'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'[index.js'</span>,<span class="string">'vendor.js'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">      index:<span class="string">'index.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">      index:[<span class="string">'index.js'</span>,<span class="string">'app.js'</span>],</span><br><span class="line">      vendor: <span class="string">'vendor.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-Output"><a href="#2-2-Output" class="headerlink" title="2.2 Output"></a>2.2 Output</h3><ul><li>打包成的文件(<code>bundle</code>)</li><li>一个或多个</li><li>自定义规则</li><li>配合<code>CDN</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'index.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">      filename: <span class="string">'index.min.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    index: <span class="string">'index.js'</span>,</span><br><span class="line">    vendor: <span class="string">'vendor.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">      filename: <span class="string">'[name].min[hash:5].js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-Loaders"><a href="#2-3-Loaders" class="headerlink" title="2.3 Loaders"></a>2.3 Loaders</h3><ul><li>处理文件</li><li>转化为模块</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">      rules: [</span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            use: <span class="string">'css-loader'</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-1-常用Loader"><a href="#2-3-1-常用Loader" class="headerlink" title="2.3.1 常用Loader"></a>2.3.1 常用Loader</h4><p><strong>编译相关</strong></p><ul><li><code>babel-loader</code></li><li><code>ts-loader</code></li></ul><p><strong>样式相关</strong></p><ul><li><code>style-loader</code></li><li><code>css-loader</code></li><li><code>less-loader</code></li><li><code>postcss-loader</code></li></ul><p><strong>文件相关</strong></p><ul><li><code>file-loader</code></li><li><code>url-loader</code></li></ul><h3 id="2-4-Plugins"><a href="#2-4-Plugins" class="headerlink" title="2.4 Plugins"></a>2.4 Plugins</h3><ul><li>参与打包整个过程</li><li>打包优化和压缩</li><li>配置编译时的变量</li><li>极其灵活</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"> plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin()</span><br><span class="line"> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-1-常用plugins"><a href="#2-4-1-常用plugins" class="headerlink" title="2.4.1 常用plugins"></a>2.4.1 常用plugins</h4><p><strong>优化相关</strong></p><ul><li><code>CommonsChunkPlugin</code></li><li><code>UglifyJsWebpackPlugin</code></li></ul><p><strong>功能相关</strong></p><ul><li><code>ExtractTextWebpackPlugin</code> 提取css</li><li><code>HtmlWebpackPlugin</code> 生成HTML模板</li><li><code>HotModuleReplacementPlugin</code> 热模块替换</li><li><code>CopyWebpackPlugin</code> 拷贝文件</li></ul><h3 id="2-5-名词"><a href="#2-5-名词" class="headerlink" title="2.5 名词"></a>2.5 名词</h3><ul><li><code>Chunk</code> 打包过程分割的代码块</li><li><code>Bundle</code> 打包后的文件</li><li><code>Module</code> </li></ul><h2 id="三、初探-webpack"><a href="#三、初探-webpack" class="headerlink" title="三、初探 webpack"></a>三、初探 webpack</h2><h3 id="3-1-使用babel打包es6"><a href="#3-1-使用babel打包es6" class="headerlink" title="3.1 使用babel打包es6"></a>3.1 使用babel打包es6</h3><h4 id="3-1-1-编译-ES-6-7"><a href="#3-1-1-编译-ES-6-7" class="headerlink" title="3.1.1 编译 ES 6/7"></a>3.1.1 编译 ES 6/7</h4><p><strong>Babel</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-loader@8.0.0-beta.0 @babel/core</span><br><span class="line">npm install –save-dev babel-loader babel-core</span><br></pre></td></tr></table></figure><p><strong>Babel Presets</strong></p><blockquote><p>主要有几种类型选择</p></blockquote><ul><li><code>es2015</code></li><li><code>es2016</code></li><li><code>es2017</code></li><li><code>env</code></li><li><code>babel-preset-react</code></li><li><code>babel-preset-stage 0 - 3</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install @babel/preset-env –save-dev</span><br><span class="line">npm install babel-preset-env –save-dev</span><br></pre></td></tr></table></figure><p><strong>Babel Polyfill</strong></p><blockquote><p>针对一些不能处理的函数方法(<code>Generator</code>、<code>Set</code>、<code>Map</code>、<code>Array.from...</code>)需要用到<code>babel-Polyfill</code>处理</p></blockquote><ul><li>全局垫片</li><li>为应用准备</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-polyfill –save</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import “babel-polyfill”</span><br></pre></td></tr></table></figure><p><strong>Babel Runtime Transform</strong></p><ul><li>局部垫片</li><li>为开发框架准备</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-plugin-transform-runtime –save-dev</span><br><span class="line"></span><br><span class="line">npm install babel-runtime –save</span><br></pre></td></tr></table></figure><p>例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">       app: <span class="string">'app.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">'[name].[hash:8].js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules:[</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            use: &#123;</span><br><span class="line">                loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    presets: [</span><br><span class="line">                        <span class="string">'@babel/preset-env'</span>,&#123;</span><br><span class="line">                            <span class="comment">//指定target为根据哪些语法编译</span></span><br><span class="line">                            targets: &#123;</span><br><span class="line">                                browsers: [<span class="string">'&gt; 1%'</span>,<span class="string">'last 2 versions'</span>]</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            exclude: <span class="string">'/node_modules'</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对于<code>webpack</code>中<code>babel</code>的配置可以单独提取处理<code>.babelrc</code>统一管理</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"presets"</span>: [</span><br><span class="line">        [<span class="string">"@babel/preset-env"</span>,&#123;</span><br><span class="line">            targets: &#123;</span><br><span class="line">                browsers: ['&gt; 1%','last 2 versions']</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;]</span><br><span class="line">    ],</span><br><span class="line">    "plugins": [</span><br><span class="line">      <span class="string">"transform-runtime"</span></span><br><span class="line">    ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="3-2-打包-Typescript"><a href="#3-2-打包-Typescript" class="headerlink" title="3.2 打包 Typescript"></a>3.2 打包 Typescript</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i typescipt ts-loader  --save-dev</span><br><span class="line">npm i typescipt awesome-typescript-loader  --save-dev</span><br></pre></td></tr></table></figure><p>配置</p><ul><li><code>tsconfig.json</code></li><li><code>webpack.config.js</code></li></ul><p><strong>tsconfig</strong></p><ul><li>配置选项:官网<code>/docs/handbook/compiler-options.html</code></li><li>常用选项 <code>compilerOptions</code> <code>include</code> <code>exclude</code></li></ul><p><strong>声明文件</strong></p><blockquote><p>用于编译时检查错误</p></blockquote><p>以<code>loadsh</code>为例，需要安装<code>@types/lodash</code>带有声明文件的，而不是安装<code>lodash</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install @types/lodash</span><br><span class="line">npm install @types/vue</span><br></pre></td></tr></table></figure><p><strong>Typings</strong></p><blockquote><p>也可以这样安装带有<code>type</code>的包</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install typings</span><br><span class="line">typings install lodash</span><br></pre></td></tr></table></figure><p>例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        <span class="string">'app'</span>: <span class="string">'app.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">'[name].bundle.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            test: <span class="regexp">/\.tsx?$/</span>,</span><br><span class="line">            use: &#123;</span><br><span class="line">                loader: <span class="string">'ts-loader'</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在项目根目录创建<code>tsconfig.json</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">"compilerOptions"</span>: &#123;</span><br><span class="line">        <span class="string">"module"</span>: <span class="string">"comonjs"</span>,</span><br><span class="line">        <span class="string">"target"</span>: <span class="string">"es5"</span>, <span class="comment">//编译后的文件在哪个环境运行</span></span><br><span class="line">        <span class="string">"allowJs"</span>: <span class="literal">true</span>,<span class="comment">//允许js语法</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="string">"include"</span>: [</span><br><span class="line">       <span class="comment">//编译路径</span></span><br><span class="line">       <span class="string">"./src/*"</span></span><br><span class="line">   ],</span><br><span class="line">   <span class="string">"exclude"</span>: [</span><br><span class="line">       <span class="comment">//排除编译文件</span></span><br><span class="line">       <span class="string">"./node_modules"</span></span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-提取-js-的公用代码"><a href="#3-3-提取-js-的公用代码" class="headerlink" title="3.3 提取 js 的公用代码"></a>3.3 提取 js 的公用代码</h3><ul><li>减少代码冗余</li><li>提高加载速度</li></ul><blockquote><p>主要使用内置插件实现<code>webpack.optimize.CommonsChunkPlugin</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">plugins: [</span><br><span class="line">     <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(option)</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        <span class="string">"pageA"</span>: <span class="string">"./src/pageA"</span>,</span><br><span class="line">        <span class="string">"pageB"</span>: <span class="string">"./src/pageB"</span>,</span><br><span class="line">        <span class="string">"vendor"</span>: [<span class="string">'loash'</span>]<span class="comment">//业务代码和第三方代码区分开,给loash单独打一个包</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">        filename: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">        chunkFilename: <span class="string">'[name].chunk.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">    <span class="comment">// 提取common</span></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">         name: <span class="string">'common'</span>,</span><br><span class="line">         minChunks:<span class="number">2</span>,<span class="comment">//出现两次就打包成common代码</span></span><br><span class="line">         chunks: [<span class="string">'pageA'</span>,<span class="string">'pageB'</span>]<span class="comment">//指定范围提取公共代码</span></span><br><span class="line">     &#125;)</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 提取vendor、取业务代码manifest</span></span><br><span class="line">     <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">         <span class="comment">//把entry的vendor代码和这里的common（webpack打包的）代码合并</span></span><br><span class="line">         names: [<span class="string">'vendor'</span>,<span class="string">'manifest'</span>]</span><br><span class="line">         minChunks: <span class="literal">Infinity</span></span><br><span class="line">     &#125;)</span><br><span class="line">     <span class="comment">// ==== 提取业务代码manifest== 合并到上面names中</span></span><br><span class="line">     <span class="comment">// 如果不想把webpack打包的代码和vendor代码合并 需要提取到manifest</span></span><br><span class="line">     <span class="comment">//new webpack.optimize.CommonsChunkPlugin(&#123;</span></span><br><span class="line">         <span class="comment">// webpack代码和vendordiam区分开</span></span><br><span class="line">       <span class="comment">//  name: 'manifest' //manifest即生成</span></span><br><span class="line">       <span class="comment">//  minChunks: Infinity</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">     </span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1480597-1c2f22380466b81f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="3-4-代码分割和懒加载"><a href="#3-4-代码分割和懒加载" class="headerlink" title="3.4 代码分割和懒加载"></a>3.4 代码分割和懒加载</h3><p><strong>第一种方式：通过wepack内置方法</strong></p><blockquote><p><code>require.ensure</code>动态加载一个模块，接收四个参数</p></blockquote><ul><li><code>[]:dependencies</code> 初次并不会执行</li><li><code>callback</code>的时候才会执行</li><li><code>errorCallback</code> 可省略</li><li><code>chunkName</code></li></ul><p><strong>第二种方式：通过ES2015 Loader Spec</strong></p><blockquote><p><code>System.import()</code>后面演变为<code>import()</code>来动态加载模块</p></blockquote><p><code>import()</code>方式返回一个<code>promise</code>在<code>import</code>中传入需要依赖的明，动态加载模块，就可以像使用<code>Promise</code>一样使用<code>import().then()</code></p><p><strong>代码分割场景</strong></p><ul><li>分离业务代码 和 第三方依赖</li><li>分离业务代码 和 业务公共代码 和 第三方依赖</li><li>分离首次加载 和 访问后加载的代码</li></ul><p>例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        <span class="string">"pageA"</span>: <span class="string">"./src/pageA"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">        publicPath: <span class="string">'./dist/'</span>,<span class="comment">//动态加载路径</span></span><br><span class="line">        filename: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">        chunkFilename: <span class="string">'[name].chunk.js'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>目标是提取<code>pageA</code>、<code>pageB</code>中公共的模块<code>moduleA</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//src/pageA.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./subPageA'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./subPageB'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ensure的时候代码不会执行 需要在下面加载一次</span></span><br><span class="line"><span class="built_in">require</span>.ensure([<span class="string">'lodash'</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">'lodash'</span>)</span><br><span class="line">    _.join([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">&#125;,<span class="string">'vendor'</span>)<span class="comment">// 指定chunk名称</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'pageA'</span></span><br></pre></td></tr></table></figure><p>运行打包这时<code>loadash</code>提取到<code>vendor</code>中</p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-c2189ccbd6ffb75d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>这时候还不是我们想要的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//src/pageA.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>.include(<span class="string">'./moduleA'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(page === <span class="string">'subPageA'</span>)&#123;</span><br><span class="line">  <span class="built_in">require</span>.ensure([<span class="string">'./subPageA'</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> subPageA = <span class="built_in">require</span>(<span class="string">'./subPageA'</span>)</span><br><span class="line">    &#125;,<span class="string">'subPageA'</span>)<span class="comment">// 指定chunk名称</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="built_in">require</span>.ensure([<span class="string">'./subPageB'</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> subPageB = <span class="built_in">require</span>(<span class="string">'./subPageB'</span>)</span><br><span class="line">    &#125;,<span class="string">'subPageB'</span>)<span class="comment">// 指定chunk名称</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//ensure的时候代码不会执行 需要在下面加载一次</span></span><br><span class="line"><span class="built_in">require</span>.ensure([<span class="string">'lodash'</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">'lodash'</span>)</span><br><span class="line">    _.join([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">&#125;,<span class="string">'vendor'</span>)<span class="comment">// 指定chunk名称</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'pageA'</span></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1480597-e12c1ea015bd7570.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>这时候这有<code>pageA</code>中才有<code>moduleA</code></p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-30e7721eab315d18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>新建一个html验证是否动态加载</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./dist/pageA.bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1480597-f6685bdfe1289e17.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"> </p><p><strong>import()动态加载的写法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//src/pageA.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>.include(<span class="string">'./moduleA'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> page = <span class="string">'subPageA'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(page === <span class="string">'subPageA'</span>)&#123;</span><br><span class="line"> <span class="comment">// 指定chunkName /** webpackChunkName: 'subPageA' **/ </span></span><br><span class="line">  <span class="keyword">import</span>(<span class="comment">/** webpackChunkName: 'subPageA' **/</span>,<span class="string">'./subPageA'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">subPageA</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(subPageA)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="keyword">import</span>(<span class="comment">/** webpackChunkName: 'subPageB' **/</span><span class="string">'./subPageB'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">subPageB</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(subPageB)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步加载lodash</span></span><br><span class="line"><span class="comment">//ensure的时候代码不会执行 需要在下面加载一次</span></span><br><span class="line"><span class="built_in">require</span>.ensure([<span class="string">'lodash'</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">'lodash'</span>)</span><br><span class="line">    _.join([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">&#125;,<span class="string">'vendor'</span>)<span class="comment">// 指定chunk名称</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'pageA'</span></span><br></pre></td></tr></table></figure><blockquote><p>如果<code>/** webpackChunkName: &#39;subPageA&#39; **/</code>相同，则会合并处理</p></blockquote><p>合并了<code>subPageA</code>和<code>subPageB</code></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-015917ceb59e9741.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>来看看打包后的文件，既有A、B</p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-c993021d1b8aee12.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>在<code>webpack</code>代码分割中使用<code>async</code>异步加载</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        <span class="string">"pageA"</span>: <span class="string">"./src/pageA"</span>,</span><br><span class="line">        <span class="string">"pageB"</span>: <span class="string">"./src/pageB"</span>,</span><br><span class="line">        <span class="string">"vendor"</span>: [<span class="string">'loash'</span>]<span class="comment">//业务代码和第三方代码区分开,给loash单独打一个包</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">        filename: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">        chunkFilename: <span class="string">'[name].chunk.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">    <span class="comment">// add 异步模块</span></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">        aysnc:<span class="string">'async-common'</span>,<span class="comment">//异步共同的东西</span></span><br><span class="line">        children: <span class="literal">true</span>,</span><br><span class="line">        names: [<span class="string">'vendor'</span>,<span class="string">'manifest'</span>]</span><br><span class="line">        minChunks: <span class="literal">Infinity</span></span><br><span class="line">    &#125;)</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    <span class="comment">// 提取vendor、取业务代码manifest</span></span><br><span class="line">     <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">         <span class="comment">//把entry的vendor代码和这里的common（webpack打包的）代码合并</span></span><br><span class="line">         names: [<span class="string">'vendor'</span>,<span class="string">'manifest'</span>]</span><br><span class="line">         minChunks: <span class="literal">Infinity</span></span><br><span class="line">     &#125;)</span><br><span class="line">     </span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//src/subPageA.js</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./moduleA'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'this. is subPageA'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'subPageA'</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//src/subPageB.js</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./moduleA'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'this. is subPageB'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'subPageB'</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//src/subPageB.js</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./moduleA'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'this. is moduleA'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'moduleA'</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//src/pageA.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步加载不能include 否则会和pageA打包到一起</span></span><br><span class="line"><span class="comment">// require.include('./moduleA')</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">'lodash'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> page = <span class="string">'subPageA'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(page === <span class="string">'subPageA'</span>)&#123;</span><br><span class="line"> <span class="comment">// 指定chunkName /** webpackChunkName: 'subPageA' **/ </span></span><br><span class="line">  <span class="keyword">import</span>(<span class="comment">/** webpackChunkName: 'subPageA' **/</span>,<span class="string">'./subPageA'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">subPageA</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(subPageA)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="keyword">import</span>(<span class="comment">/** webpackChunkName: 'subPageB' **/</span><span class="string">'./subPageB'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">subPageB</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(subPageB)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// === lodash不在异步加载</span></span><br><span class="line"><span class="comment">//ensure的时候代码不会执行 需要在下面加载一次</span></span><br><span class="line"><span class="comment">//require.ensure(['lodash'],function()&#123;</span></span><br><span class="line"><span class="comment">//    var _ = require('lodash')</span></span><br><span class="line"><span class="comment">//    _.join([1,2,3])</span></span><br><span class="line"><span class="comment">//&#125;,'vendor')// 指定chunk名称</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'pageA'</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//src/pageB.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">'lodash'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> page = <span class="string">'subPageB'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(page === <span class="string">'subPageA'</span>)&#123;</span><br><span class="line"> <span class="comment">// 指定chunkName /** webpackChunkName: 'subPageA' **/ </span></span><br><span class="line">  <span class="keyword">import</span>(<span class="comment">/** webpackChunkName: 'subPageA' **/</span>,<span class="string">'./subPageA'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">subPageA</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(subPageA)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="keyword">import</span>(<span class="comment">/** webpackChunkName: 'subPageB' **/</span><span class="string">'./subPageB'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">subPageB</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(subPageB)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// === lodash不在异步加载</span></span><br><span class="line"><span class="comment">//ensure的时候代码不会执行 需要在下面加载一次</span></span><br><span class="line"><span class="comment">//require.ensure(['lodash'],function()&#123;</span></span><br><span class="line"><span class="comment">//    var _ = require('lodash')</span></span><br><span class="line"><span class="comment">//    _.join([1,2,3])</span></span><br><span class="line"><span class="comment">//&#125;,'vendor')// 指定chunk名称</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'pageB'</span></span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1480597-f12f6505f80cd43a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-29006f18038b558e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>这样就把<code>subpageA</code>和<code>subPageB</code>共同依赖的<code>moduleA</code>异步提取出来</p></blockquote><h3 id="3-5-处理-CSS-和-CSS-模块化"><a href="#3-5-处理-CSS-和-CSS-模块化" class="headerlink" title="3.5 处理 CSS 和 CSS 模块化"></a>3.5 处理 CSS 和 CSS 模块化</h3><p><strong>引入css</strong></p><blockquote><p>需要两个<code>loader</code>，<code>style-loader</code>(创建标签到文档流中)、<code>css-loader</code>(可以<code>import</code>一个样式文件，使得在<code>js</code>中可以使用)</p></blockquote><p><strong>Style-Loader</strong></p><blockquote><p><code>style-loader</code>除了本身，还有这几个<code>loader</code></p></blockquote><ul><li><code>style-loader/url</code> 可以注入link标签到页面</li><li><code>style-loader/useable</code> 控制样式是否插入到页面中</li></ul><p>Style-Loader的options</p><ul><li><code>insertAt</code> （插入位置）</li><li><code>insertInto</code> （插入到<code>dom</code>）</li><li><code>singleton</code> （是否只使用一个<code>style</code> 标签）</li><li><code>transform</code> （转化，浏览器环境下，插入页面前）</li></ul><p>例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        app: <span class="string">'./src/app.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        publicPath: <span class="string">'./dist/'</span>, <span class="comment">//指定从项目中哪里引入资源 </span></span><br><span class="line">        filename: <span class="string">'[name].bundle.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        <span class="comment">// loader解析从后往前处理</span></span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">//loader: 'style-loader',</span></span><br><span class="line">                        loader: <span class="string">'style-loader/url'</span>, <span class="comment">//使用这个可以往页面注入link标签 而不是style,这个并不常用</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">//loader: 'css-loader',</span></span><br><span class="line">                        loader: <span class="string">'file-loader'</span><span class="comment">//使用这个可以往页面注入link标签 而不是style 这个并不常用</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>CSS-Loader</strong></p><p>options</p><ul><li><code>alias</code> （解析的别名）</li><li><code>importLoader</code> （<code>@import</code> ）</li><li><code>Minimize</code> （是否压缩）</li><li><code>modules</code> （启用<code>css-modules</code>）</li></ul><p><strong>CSS-Modules</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localIdentName: &apos;[path][name]__[local]--[hash:base64:5]&apos;</span><br></pre></td></tr></table></figure><p>例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        app: <span class="string">'./src/app.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        publicPath: <span class="string">'./dist/'</span>, <span class="comment">//指定从项目中哪里引入资源 </span></span><br><span class="line">        filename: <span class="string">'[name].bundle.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        <span class="comment">// loader解析从后往前处理</span></span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'style-loader'</span>,</span><br><span class="line">                        options: &#123; </span><br><span class="line">                           <span class="comment">//合并多个style为一个</span></span><br><span class="line">                            singleton:<span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                           minimize:<span class="literal">true</span>,</span><br><span class="line">                           modules: <span class="literal">true</span>,</span><br><span class="line">                           <span class="comment">// css模块化</span></span><br><span class="line">                           localIdentName: <span class="string">'[path][name]_[local]_[hash:base64:5]'</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置Less / Sass</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install less-loader less  --save-dev</span><br><span class="line">npm install sass-loader node-sass --save-dev</span><br></pre></td></tr></table></figure><p>例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        app: <span class="string">'./src/app.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        publicPath: <span class="string">'./dist/'</span>, <span class="comment">//指定从项目中哪里引入资源 </span></span><br><span class="line">        filename: <span class="string">'[name].bundle.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        <span class="comment">// loader解析从后往前处理</span></span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(css|less)$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'style-loader'</span>,</span><br><span class="line">                        options: &#123; </span><br><span class="line">                           <span class="comment">//合并多个style为一个</span></span><br><span class="line">                            singleton:<span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                           minimize:<span class="literal">true</span>,</span><br><span class="line">                           modules: <span class="literal">true</span>,</span><br><span class="line">                           <span class="comment">// css模块化</span></span><br><span class="line">                           localIdentName: <span class="string">'[path][name]_[local]_[hash:base64:5]'</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'less-loader'</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'sass-loader'</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>提取 CSS</strong></p><ul><li><code>extract-loader</code></li><li><code>ExtractTextWebpackPlugin</code></li></ul><p>例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        app: <span class="string">'./src/app.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        publicPath: <span class="string">'./dist/'</span>, <span class="comment">//指定从项目中哪里引入资源 </span></span><br><span class="line">        filename: <span class="string">'[name].bundle.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        <span class="comment">// loader解析从后往前处理</span></span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(css|less)$/</span>,</span><br><span class="line">                use:</span><br><span class="line">                ExtractTextWebpackPlugin.extra(&#123;</span><br><span class="line">                    <span class="comment">// 提取css并不会自动加入到文档中，需要在HTML手动加入css文件</span></span><br><span class="line">                    fallback: &#123;</span><br><span class="line">                        loader: <span class="string">'style-loader'</span>,</span><br><span class="line">                        options: &#123; </span><br><span class="line">                           <span class="comment">//合并多个style为一个</span></span><br><span class="line">                            singleton:<span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 处理css</span></span><br><span class="line">                    use: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                            options: &#123;</span><br><span class="line">                               minimize:<span class="literal">true</span>,</span><br><span class="line">                               modules: <span class="literal">true</span>,</span><br><span class="line">                               <span class="comment">// css模块化</span></span><br><span class="line">                               localIdentName: <span class="string">'[path][name]_[local]_[hash:base64:5]'</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            loader: <span class="string">'less-loader'</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            loader: <span class="string">'sass-loader'</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> ExtractTextWebpackPlugin(&#123;</span><br><span class="line">            filename: <span class="string">'[name].min.css'</span>,</span><br><span class="line">            allChunks: <span class="literal">false</span> <span class="comment">//指定提取css范围，true所有import进来的css</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1480597-f9ad7e2b0f376596.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="3-6-PostCSS-in-Webpack"><a href="#3-6-PostCSS-in-Webpack" class="headerlink" title="3.6 PostCSS in Webpack"></a>3.6 PostCSS in Webpack</h3><p>安装</p><ul><li><code>postcss</code></li><li><code>postcss-loader</code></li><li><code>Autoprefixer</code></li><li><code>cssnano</code></li><li><code>postcss-cssnext</code></li></ul><p>例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        app: <span class="string">'./src/app.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        publicPath: <span class="string">'./dist/'</span>, <span class="comment">//指定从项目中哪里引入资源 </span></span><br><span class="line">        filename: <span class="string">'[name].bundle.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        <span class="comment">// loader解析从后往前处理</span></span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(css|less)$/</span>,</span><br><span class="line">                use:</span><br><span class="line">                ExtractTextWebpackPlugin.extra(&#123;</span><br><span class="line">                    <span class="comment">// 提取css并不会自动加入到文档中，需要在HTML手动加入css文件</span></span><br><span class="line">                    fallback: &#123;</span><br><span class="line">                        loader: <span class="string">'style-loader'</span>,</span><br><span class="line">                        options: &#123; </span><br><span class="line">                           <span class="comment">//合并多个style为一个</span></span><br><span class="line">                            singleton:<span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 处理css</span></span><br><span class="line">                    use: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                            options: &#123;</span><br><span class="line">                               minimize:<span class="literal">true</span>,</span><br><span class="line">                               modules: <span class="literal">true</span>,</span><br><span class="line">                               <span class="comment">// css模块化</span></span><br><span class="line">                               localIdentName: <span class="string">'[path][name]_[local]_[hash:base64:5]'</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            loader: <span class="string">'less-loader'</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            loader: <span class="string">'sass-loader'</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">                            options: &#123;</span><br><span class="line">                                ident: <span class="string">'postcss'</span>,</span><br><span class="line">                                plugins: [</span><br><span class="line">                                    <span class="built_in">require</span>(<span class="string">'antoprefixer'</span>)()</span><br><span class="line">                                ]</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> ExtractTextWebpackPlugin(&#123;</span><br><span class="line">            filename: <span class="string">'[name].min.css'</span>,</span><br><span class="line">            allChunks: <span class="literal">false</span> <span class="comment">//指定提取css范围，true所有import进来的css</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-7-Tree-shaking"><a href="#3-7-Tree-shaking" class="headerlink" title="3.7 Tree shaking"></a>3.7 Tree shaking</h3><h4 id="3-7-1-JS-Tree-shaking"><a href="#3-7-1-JS-Tree-shaking" class="headerlink" title="3.7.1 JS Tree shaking"></a>3.7.1 JS Tree shaking</h4><p><strong>使用场景</strong></p><ul><li>常规优化</li><li><p>引入第三方库的某一个功能</p><p>例子</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        app: <span class="string">'./src/app.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        publicPath: <span class="string">'./dist/'</span>, <span class="comment">//指定从项目中哪里引入资源 </span></span><br><span class="line">        filename: <span class="string">'[name].bundle.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            presets: [<span class="string">'env'</span>],</span><br><span class="line">                            plugins: [</span><br><span class="line">                                <span class="comment">// lodash Tree shaking</span></span><br><span class="line">                                <span class="string">'lodash'</span></span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> ExtractTextWebpackPlugin(&#123;</span><br><span class="line">            filename: <span class="string">'[name].min.css'</span>,</span><br><span class="line">            allChunks: <span class="literal">false</span> <span class="comment">//指定提取css范围，true所有import进来的css</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// Tree shaking</span></span><br><span class="line">        <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>有些库不是es模块写的，并不能<code>tree shaking</code>。需要借助其他工具 </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i babel-loader babel-core babel-preset-env babel-plugin-lodash --save</span><br></pre></td></tr></table></figure><blockquote><p>lodash Tree不生效</p></blockquote><ul><li><code>lodash-es</code> –&gt; no</li><li><code>babel-lugin-lodash</code> —&gt;working</li></ul><blockquote><p>查看模块是否Tree Shaking方式：去第三方库index.js中看模块书写方式是否是es</p></blockquote><h4 id="3-7-2-CSS-Tree-shaking"><a href="#3-7-2-CSS-Tree-shaking" class="headerlink" title="3.7.2 CSS Tree shaking"></a>3.7.2 CSS Tree shaking</h4><blockquote><p>主要使用 <code>purifycss-webpack</code></p></blockquote><p>例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> glob = <span class="built_in">require</span>(<span class="string">'glob-all'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        app: <span class="string">'./src/app.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        publicPath: <span class="string">'./dist/'</span>, <span class="comment">//指定从项目中哪里引入资源 </span></span><br><span class="line">        filename: <span class="string">'[name].bundle.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            presets: [<span class="string">'env'</span>],</span><br><span class="line">                            plugins: [</span><br><span class="line">                                <span class="comment">// lodash Tree shaking</span></span><br><span class="line">                                <span class="string">'lodash'</span></span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> ExtractTextWebpackPlugin(&#123;</span><br><span class="line">            filename: <span class="string">'[name].min.css'</span>,</span><br><span class="line">            allChunks: <span class="literal">false</span> <span class="comment">//指定提取css范围，true所有import进来的css</span></span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 放到ExtractTextWebpackPlugin后面</span></span><br><span class="line">        <span class="keyword">new</span> PurifyCss(&#123;</span><br><span class="line">            paths: glob.sync([</span><br><span class="line">                path.join(__dirname,<span class="string">'./*.html'</span>),</span><br><span class="line">                path.join(__dirnname,<span class="string">'./src/*.js'</span>)</span><br><span class="line">            ])</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Tree shaking</span></span><br><span class="line">        <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">            </span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、由浅入深Webpack"><a href="#四、由浅入深Webpack" class="headerlink" title="四、由浅入深Webpack"></a>四、由浅入深Webpack</h2><h3 id="4-1-文件处理"><a href="#4-1-文件处理" class="headerlink" title="4.1 文件处理"></a>4.1 文件处理</h3><h4 id="4-1-1-图片处理"><a href="#4-1-1-图片处理" class="headerlink" title="4.1.1 图片处理"></a>4.1.1 图片处理</h4><ul><li><code>css</code>中引入图片</li><li>自动合成雪碧图</li><li>压缩图片</li><li><code>Base64</code>编码</li></ul><blockquote><p>处理需要用到的<code>loader</code></p></blockquote><ul><li><code>file-loader</code> <code>css</code>中引入图片</li><li><code>url-loader</code> <code>base64</code>编码</li><li><code>img-loader</code> 压缩图片</li><li><code>postcss-sprites</code>合成雪碧图</li></ul><h4 id="4-1-2-处理雪碧图、base64、压缩图片"><a href="#4-1-2-处理雪碧图、base64、压缩图片" class="headerlink" title="4.1.2 处理雪碧图、base64、压缩图片"></a>4.1.2 处理雪碧图、base64、压缩图片</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">         rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(css|less)$/</span>,</span><br><span class="line">                use:</span><br><span class="line">                extractLess.extract(&#123;</span><br><span class="line">                    <span class="comment">// 提取css并不会自动加入到文档中，需要在HTML手动加入css文件</span></span><br><span class="line">                    fallback: &#123;</span><br><span class="line">                        loader: <span class="string">'style-loader'</span>,</span><br><span class="line">                        options: &#123; </span><br><span class="line">                           <span class="comment">//合并多个style为一个</span></span><br><span class="line">                            singleton:<span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 处理css</span></span><br><span class="line">                    use: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                            options: &#123;</span><br><span class="line">                               minimize:<span class="literal">true</span>,</span><br><span class="line">                               modules: <span class="literal">true</span>,</span><br><span class="line">                               <span class="comment">// css模块化</span></span><br><span class="line">                               localIdentName: <span class="string">'[path][name]_[local]_[hash:base64:5]'</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            loader: <span class="string">'less-loader'</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            loader: <span class="string">'sass-loader'</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">                            options: &#123;</span><br><span class="line">                                ident: <span class="string">'postcss'</span>,</span><br><span class="line">                                plugins: [</span><br><span class="line">                                    <span class="comment">// 合并雪碧图</span></span><br><span class="line">                                    <span class="built_in">require</span>(<span class="string">'postcss-sprites'</span>)(&#123;</span><br><span class="line">                                        <span class="comment">// 指定雪碧图输出路径</span></span><br><span class="line">                                        spritePath: <span class="string">'dist/assets/imgs/sprites'</span>,</span><br><span class="line">                                        retina: <span class="literal">true</span> <span class="comment">// 处理苹果高清retina 图片命名需要 xx@2x.png,对应的图片的css大小设置也要减小一半 </span></span><br><span class="line">                                    &#125;)</span><br><span class="line">                                ]</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">                use:[</span><br><span class="line">                    <span class="comment">//&#123;</span></span><br><span class="line">                    <span class="comment">//    loader: //'file-loader',//处理图片</span></span><br><span class="line">                    <span class="comment">//    options: &#123;</span></span><br><span class="line">                    <span class="comment">//       publicPath:'',// 使得图片地址可以访问</span></span><br><span class="line">                    <span class="comment">//       outputPath: 'dist/'</span></span><br><span class="line">                    <span class="comment">//       useRelativePath:true</span></span><br><span class="line">                        <span class="comment">//&#125;</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">//&#125;</span></span><br><span class="line">                    <span class="comment">// url-loader会把图片转成base64</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            name: <span class="string">'[name].min.[ext]'</span> <span class="comment">//5kb内会转成base64 ,否则输出图片路径</span></span><br><span class="line">                            limit: <span class="number">1000</span>, </span><br><span class="line">                            publicPath:<span class="string">''</span>,</span><br><span class="line">                            outputPath: <span class="string">'dist/'</span>,</span><br><span class="line">                            useRelativePath:<span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 压缩图片</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'img-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            pngquant: &#123;</span><br><span class="line">                                <span class="comment">//图片质量</span></span><br><span class="line">                                quality:<span class="number">80</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    </span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-1-2-处理字体文件"><a href="#4-1-2-处理字体文件" class="headerlink" title="4.1.2 处理字体文件"></a>4.1.2 处理字体文件</h4><ul><li><code>file-loader</code></li><li><code>url-loader</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">         rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(css|less)$/</span>,</span><br><span class="line">                use:</span><br><span class="line">                extractLess.extract(&#123;</span><br><span class="line">                    <span class="comment">// 提取css并不会自动加入到文档中，需要在HTML手动加入css文件</span></span><br><span class="line">                    fallback: &#123;</span><br><span class="line">                        loader: <span class="string">'style-loader'</span>,</span><br><span class="line">                        options: &#123; </span><br><span class="line">                           <span class="comment">//合并多个style为一个</span></span><br><span class="line">                            singleton:<span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 处理css</span></span><br><span class="line">                    use: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                            options: &#123;</span><br><span class="line">                               minimize:<span class="literal">true</span>,</span><br><span class="line">                               modules: <span class="literal">true</span>,</span><br><span class="line">                               <span class="comment">// css模块化</span></span><br><span class="line">                               localIdentName: <span class="string">'[path][name]_[local]_[hash:base64:5]'</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            loader: <span class="string">'less-loader'</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            loader: <span class="string">'sass-loader'</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">                            options: &#123;</span><br><span class="line">                                ident: <span class="string">'postcss'</span>,</span><br><span class="line">                                plugins: [</span><br><span class="line">                                    <span class="comment">// 合并雪碧图</span></span><br><span class="line">                                    <span class="built_in">require</span>(<span class="string">'postcss-sprites'</span>)(&#123;</span><br><span class="line">                                        <span class="comment">// 指定雪碧图输出路径</span></span><br><span class="line">                                        spritePath: <span class="string">'dist/assets/imgs/sprites'</span>,</span><br><span class="line">                                        retina: <span class="literal">true</span> <span class="comment">// 处理苹果高清retina 图片命名需要 xx@2x.png,对应的图片的css大小设置也要减小一半 </span></span><br><span class="line">                                    &#125;)</span><br><span class="line">                                ]</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">                use:[</span><br><span class="line">                    <span class="comment">//&#123;</span></span><br><span class="line">                    <span class="comment">//    loader: //'file-loader',//处理图片</span></span><br><span class="line">                    <span class="comment">//    options: &#123;</span></span><br><span class="line">                    <span class="comment">//       publicPath:'',// 使得图片地址可以访问</span></span><br><span class="line">                    <span class="comment">//       outputPath: 'dist/'</span></span><br><span class="line">                    <span class="comment">//       useRelativePath:true</span></span><br><span class="line">                        <span class="comment">//&#125;</span></span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">//&#125;</span></span><br><span class="line">                    <span class="comment">// url-loader会把图片转成base64</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            name: <span class="string">'[name].min.[ext]'</span> <span class="comment">//5kb内会转成base64 ,否则输出图片路径</span></span><br><span class="line">                            limit: <span class="number">1000</span>, </span><br><span class="line">                            publicPath:<span class="string">''</span>,</span><br><span class="line">                            outputPath: <span class="string">'dist/'</span>,</span><br><span class="line">                            useRelativePath:<span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 压缩图片</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'img-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            pngquant: &#123;</span><br><span class="line">                                <span class="comment">//图片质量</span></span><br><span class="line">                                quality:<span class="number">80</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 处理字体文件</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        test: <span class="regexp">/\.(eot|woff2|woff|ttf|svg)$/</span>,</span><br><span class="line">                        use: [</span><br><span class="line">                            &#123;</span><br><span class="line">                                loader:<span class="string">'url-loader'</span>,</span><br><span class="line">                                options: &#123;</span><br><span class="line">                                    name: <span class="string">'[name].min.[ext]'</span> <span class="comment">//5kb内会转成base64 ,否则输出图片路径</span></span><br><span class="line">                                    limit: <span class="number">5000</span>, </span><br><span class="line">                                    publicPath:<span class="string">''</span>,</span><br><span class="line">                                    outputPath: <span class="string">'dist/'</span>,</span><br><span class="line">                                    useRelativePath:<span class="literal">true</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-1-3-处理第三方-JS-库"><a href="#4-1-3-处理第三方-JS-库" class="headerlink" title="4.1.3 处理第三方 JS 库"></a>4.1.3 处理第三方 JS 库</h4><blockquote><p>处理第三方库 用到<code>providePlugin</code>、<code>imports-loader</code></p></blockquote><p><strong>1.providePlugin</strong></p><p>以引入<code>jQuery</code>为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i jquery</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">            <span class="comment">// 在全局注入jQuery变量</span></span><br><span class="line">            $:<span class="string">'jquery'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引入本地<code>libs</code>中的<code>jQuery</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        alias: &#123;</span><br><span class="line">            <span class="comment">// $确切匹配 把jQuery这个关键字解析到某个目录下</span></span><br><span class="line">            jquery$:path.resolve(__dirname,<span class="string">'src/libs/jquery.min.js'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">            <span class="comment">// 在全局注入jQuery变量</span></span><br><span class="line">            $:<span class="string">'jquery'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.imports-loader</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="built_in">module</span>:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">            &#123;</span><br><span class="line">                test:path.resolve(__dirname,<span class="string">'src/app.js'</span>),</span><br><span class="line">                use:[</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'imports-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            $: <span class="string">'jquery'</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-HTML-in-webpack-自动生成HTML"><a href="#4-2-HTML-in-webpack-自动生成HTML" class="headerlink" title="4.2 HTML in webpack(自动生成HTML)"></a>4.2 HTML in webpack(自动生成HTML)</h3><blockquote><p>自动生成<code>HTML</code>，把这个页面需要的<code>js</code>、<code>css</code>插入到页面中</p></blockquote><h4 id="4-2-1-生成-HTML"><a href="#4-2-1-生成-HTML" class="headerlink" title="4.2.1 生成 HTML"></a>4.2.1 生成 HTML</h4><blockquote><p><code>htmlWebpackPlugin</code></p></blockquote><p>options</p><ul><li><code>template</code></li><li><code>filename</code></li><li><code>minify</code> 是否压缩</li><li><code>chunks</code> </li><li><code>inject</code> 是否让<code>css、js</code>通过标签形式插入到页面中</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        app: <span class="string">'./src/app.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        filename: <span class="string">'[name].bundle.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugin:[</span><br><span class="line">        <span class="keyword">new</span> htmlWebpackPlugin(&#123;</span><br><span class="line">            filename:<span class="string">'index.html'</span>, <span class="comment">// 不传默认index.html</span></span><br><span class="line">            template: <span class="string">'./index.html'</span>,<span class="comment">//传入模板</span></span><br><span class="line">            inject:<span class="literal">true</span>,<span class="comment">//控制js\css是否插入到页面</span></span><br><span class="line">            minify: &#123;</span><br><span class="line">                collapseWhitespace:<span class="literal">true</span> <span class="comment">//压缩空格</span></span><br><span class="line">            &#125;,</span><br><span class="line">            chunks:[<span class="string">'app'</span>]<span class="comment">//指定chunks会把跟这个入口相关的chunks插入到页面中</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-2-HTML-中引入图片"><a href="#4-2-2-HTML-中引入图片" class="headerlink" title="4.2.2 HTML 中引入图片"></a>4.2.2 HTML 中引入图片</h4><blockquote><p>需要用到<code>html-loader</code></p></blockquote><p><strong>html-loader</strong></p><p>options</p><ul><li><code>attrs: [img:src]</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        app: <span class="string">'./src/app.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        filename: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">        publicPath:<span class="string">'/'</span> <span class="comment">//网站路径为/ 图片等资源引用不会发生错误</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>:&#123;</span><br><span class="line">        rules:[</span><br><span class="line">            &#123;</span><br><span class="line">                loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    name: <span class="string">'[name].min.[ext]'</span> <span class="comment">//5kb内会转成base64 ,否则输出图片路径</span></span><br><span class="line">                    limit: <span class="number">1000</span>, </span><br><span class="line">                    publicPath:<span class="string">''</span>,</span><br><span class="line">                    outputPath: <span class="string">'assets/imgs/'</span>,</span><br><span class="line">                    <span class="comment">//useRelativePath:true // 这里不能使用这个 因为图片路径在HTML中、css中都存在，打包的时候图片会放错地方。需要用到绝对路径，在output指定publicPath:'/'</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 处理HTML中的图片引用路径问题</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'html-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            attrs: [<span class="string">'img:src'</span>,<span class="string">'img:data-src'</span>]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>require在HTML中引入图片</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"$&#123;require('./public/imgs/xx.png)&#125;"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-2-3-配合优化"><a href="#4-2-3-配合优化" class="headerlink" title="4.2.3 配合优化"></a>4.2.3 配合优化</h4><blockquote><p>提前载入webpack加载代码</p></blockquote><ul><li><code>inline-manifest-webpack-plugin</code></li><li><code>html-webpack-inline-chunk-plugin</code></li></ul><p>建议使用 <code>html-webpack-inline-chunk-plugin</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i html-webpack-inline-chunk-plugin</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> HTMLInlieChunk = <span class="built_in">require</span>(<span class="string">'html-webpack-inline-chunk-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        app: <span class="string">'./src/app.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        filename: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">        publicPath:<span class="string">'/'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugin:[</span><br><span class="line">        <span class="keyword">new</span> htmlWebpackPlugin(&#123;</span><br><span class="line">            filename:<span class="string">'index.html'</span>, <span class="comment">// 不传默认index.html</span></span><br><span class="line">            template: <span class="string">'./index.html'</span>,<span class="comment">//传入模板</span></span><br><span class="line">            inject:<span class="literal">true</span>,<span class="comment">//控制js\css是否插入到页面</span></span><br><span class="line">            minify: &#123;</span><br><span class="line">                collapseWhitespace:<span class="literal">true</span> <span class="comment">//压缩空格</span></span><br><span class="line">            &#125;,</span><br><span class="line">            chunks:[<span class="string">'app'</span>]<span class="comment">//指定chunks会把跟这个入口相关的chunks插入到页面中</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">new</span> webpack.mdtimize.CommonsChunkPlugin(&#123;</span><br><span class="line">            name: <span class="string">'manifest'</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">new</span> HTMLInlieChunk(&#123;</span><br><span class="line">            inlineChunks: [<span class="string">'manifest'</span>] <span class="comment">//把webpack生成的manifest提取到HTML文件script中，减少请求</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、Webpack-环境配置"><a href="#五、Webpack-环境配置" class="headerlink" title="五、Webpack 环境配置"></a>五、Webpack 环境配置</h2><h3 id="5-1-Webpack-Watch-Mode"><a href="#5-1-Webpack-Watch-Mode" class="headerlink" title="5.1 Webpack Watch Mode"></a>5.1 Webpack Watch Mode</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">webpack --watch</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简写</span></span><br><span class="line">webpack -w</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'wepback'</span>)</span><br><span class="line"><span class="keyword">var</span> PurifyWebpack = <span class="built_in">require</span>(<span class="string">'pruifycss-webpack'</span>)</span><br><span class="line"><span class="keyword">var</span> ExtractTextWebpackPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">var</span> CleanWebpack = <span class="built_in">require</span>(<span class="string">'clean-webpacl-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">var</span> glob = rquire(<span class="string">'glob-all'</span>)<span class="comment">//处理多个路径</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> extractLess = <span class="keyword">new</span> ExtractTextWebpackPlugin(&#123;</span><br><span class="line">    filename: <span class="string">'css/[name]-bundle-[hash:5].css'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        app: <span class="string">'./src/app.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        filename: <span class="string">'[name]-bundle-[hash:5].js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>:&#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(css|less)$/</span>,</span><br><span class="line">                use:</span><br><span class="line">                extractLess.extract(&#123;</span><br><span class="line">                    <span class="comment">// 提取css并不会自动加入到文档中，需要在HTML手动加入css文件</span></span><br><span class="line">                    fallback: &#123;</span><br><span class="line">                        loader: <span class="string">'style-loader'</span>,</span><br><span class="line">                        options: &#123; </span><br><span class="line">                           <span class="comment">//合并多个style为一个</span></span><br><span class="line">                            singleton:<span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 处理css</span></span><br><span class="line">                    use: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                            options: &#123;</span><br><span class="line">                               minimize:<span class="literal">true</span>,</span><br><span class="line">                               modules: <span class="literal">true</span>,</span><br><span class="line">                               <span class="comment">// css模块化</span></span><br><span class="line">                               localIdentName: <span class="string">'[path][name]_[local]_[hash:base64:5]'</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            loader: <span class="string">'less-loader'</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            loader: <span class="string">'sass-loader'</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        &#123;</span><br><span class="line">                            loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">                            options: &#123;</span><br><span class="line">                                ident: <span class="string">'postcss'</span>,</span><br><span class="line">                                plugins: [</span><br><span class="line">                                    <span class="comment">// 合并雪碧图</span></span><br><span class="line">                                    <span class="built_in">require</span>(<span class="string">'postcss-sprites'</span>)(&#123;</span><br><span class="line">                                        <span class="comment">// 指定雪碧图输出路径</span></span><br><span class="line">                                        spritePath: <span class="string">'dist/assets/imgs/sprites'</span>,</span><br><span class="line">                                        retina: <span class="literal">true</span> <span class="comment">// 处理苹果高清retina 图片命名需要 xx@2x.png,对应的图片的css大小设置也要减小一半 </span></span><br><span class="line">                                    &#125;)</span><br><span class="line">                                ]</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">    plugin: [</span><br><span class="line">        <span class="keyword">new</span> CleanWebpack()</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-Webpack-Dev-Server"><a href="#5-2-Webpack-Dev-Server" class="headerlink" title="5.2 Webpack Dev Server"></a>5.2 Webpack Dev Server</h3><h4 id="5-2-1-Dev-Server"><a href="#5-2-1-Dev-Server" class="headerlink" title="5.2.1 Dev Server"></a>5.2.1 Dev Server</h4><blockquote><p>不能用来直接打包文件，<code>Dev Server</code>搭建本地开发，文件存在内存中</p></blockquote><p><strong>特性</strong></p><ul><li><code>live reloading</code></li><li>路径重定向</li><li>支持<code>HTTPS</code></li><li>浏览器中显示编译错误</li><li>接口代理</li><li>模块热更新</li></ul><p><strong>dev server</strong></p><ul><li><code>inline</code></li><li><code>contentBase</code></li><li><code>port</code></li><li><code>histApiFllback</code></li><li><code>https</code></li><li><code>proxy</code></li><li><code>hot</code></li><li><code>openpage</code></li><li><code>lazy</code></li><li><code>overlay</code> 开启错误遮罩</li></ul><p><strong>使用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;script&quot;&#123;</span><br><span class="line">    // 启动</span><br><span class="line">    &quot;server&quot;: &quot;webpack-dev-server --open&quot; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        app: <span class="string">'./src/app.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        publicPath: <span class="string">'/'</span>,</span><br><span class="line">        filename: <span class="string">'[name].[hash:5].js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    devServer: &#123;</span><br><span class="line">        port: <span class="number">9001</span>,</span><br><span class="line">        <span class="comment">// 输入任意路径都不会出现404 都会重定向</span></span><br><span class="line">       <span class="comment">// historyApiFallback: true</span></span><br><span class="line">        historyApiFallback: &#123;</span><br><span class="line">            <span class="comment">//从一个确定的url指向对应的文件</span></span><br><span class="line">            <span class="comment">//rewrites: [</span></span><br><span class="line">            <span class="comment">//    &#123;</span></span><br><span class="line">            <span class="comment">//        from: '/pages/a',// 可以写正则</span></span><br><span class="line">           <span class="comment">//         to: '/pages/a.html'</span></span><br><span class="line">            <span class="comment">//    &#125;</span></span><br><span class="line">            rewrites: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">from</span>: <span class="regexp">/^\/([a-zA-Z0-9]+\/?)([a-zA-Z0-9]+)/</span></span><br><span class="line">                    to: <span class="function"><span class="keyword">function</span>(<span class="params">context</span>)</span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">'/'</span> + context.match[<span class="number">1</span>] + context.match[<span class="number">2</span>] + <span class="string">'.html'</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-2-proxy代理远程接口"><a href="#5-2-2-proxy代理远程接口" class="headerlink" title="5.2.2 proxy代理远程接口"></a>5.2.2 proxy代理远程接口</h4><ul><li>代理远程接口请求</li><li><code>http-proxy-middleware</code></li><li><code>devServer.proxy</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        app: <span class="string">'./src/app.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        publicPath: <span class="string">'/'</span>,</span><br><span class="line">        filename: <span class="string">'[name].[hash:5].js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    devServer: &#123;</span><br><span class="line">        port: <span class="number">9001</span>,</span><br><span class="line">        <span class="comment">// 输入任意路径都不会出现404 都会重定向</span></span><br><span class="line">       <span class="comment">// historyApiFallback: true</span></span><br><span class="line">        historyApiFallback: &#123;</span><br><span class="line">            <span class="comment">//从一个确定的url指向对应的文件</span></span><br><span class="line">            <span class="comment">//rewrites: [</span></span><br><span class="line">            <span class="comment">//    &#123;</span></span><br><span class="line">            <span class="comment">//        from: '/pages/a',// 可以写正则</span></span><br><span class="line">           <span class="comment">//         to: '/pages/a.html'</span></span><br><span class="line">            <span class="comment">//    &#125;</span></span><br><span class="line">            rewrites: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">from</span>: <span class="regexp">/^\/([a-zA-Z0-9]+\/?)([a-zA-Z0-9]+)/</span></span><br><span class="line">                    to: <span class="function"><span class="keyword">function</span>(<span class="params">context</span>)</span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">'/'</span> + context.match[<span class="number">1</span>] + context.match[<span class="number">2</span>] + <span class="string">'.html'</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        proxy: &#123;</span><br><span class="line">            <span class="string">'/api'</span>: &#123;</span><br><span class="line">                target: <span class="string">'https://blog.poetries.top'</span>,<span class="comment">//代理到服务器</span></span><br><span class="line">                changeOrigin:<span class="literal">true</span>,</span><br><span class="line">                logLevel: <span class="string">'debug'</span>,</span><br><span class="line">                <span class="comment">// pathRewite: &#123; &#125;,</span></span><br><span class="line">                headers:&#123;&#125;<span class="comment">// 请求头</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-3-模块热更新"><a href="#5-2-3-模块热更新" class="headerlink" title="5.2.3 模块热更新"></a>5.2.3 模块热更新</h4><ul><li>保持应用的数据状态</li><li>节省调试时间</li><li><p>不需要刷新</p></li><li><p><code>devServer.hot</code></p></li><li><code>webpack.HotModleReplacementPlugin</code></li><li><code>webpack.NamedModulesPlugin</code> 看到模块更新的路径</li></ul><p><strong>Module Hot Reloading</strong></p><ul><li><code>module.hot</code></li><li><code>module.hot.accept</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        app: <span class="string">'./src/app.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        publicPath: <span class="string">'/'</span>,</span><br><span class="line">        filename: <span class="string">'[name].[hash:5].js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    devServer: &#123;</span><br><span class="line">        port: <span class="number">9001</span>,</span><br><span class="line">        <span class="comment">// 输入任意路径都不会出现404 都会重定向</span></span><br><span class="line">       <span class="comment">// historyApiFallback: true</span></span><br><span class="line">        historyApiFallback: &#123;</span><br><span class="line">            <span class="comment">//从一个确定的url指向对应的文件</span></span><br><span class="line">            <span class="comment">//rewrites: [</span></span><br><span class="line">            <span class="comment">//    &#123;</span></span><br><span class="line">            <span class="comment">//        from: '/pages/a',// 可以写正则</span></span><br><span class="line">           <span class="comment">//         to: '/pages/a.html'</span></span><br><span class="line">            <span class="comment">//    &#125;</span></span><br><span class="line">            rewrites: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">from</span>: <span class="regexp">/^\/([a-zA-Z0-9]+\/?)([a-zA-Z0-9]+)/</span></span><br><span class="line">                    to: <span class="function"><span class="keyword">function</span>(<span class="params">context</span>)</span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">'/'</span> + context.match[<span class="number">1</span>] + context.match[<span class="number">2</span>] + <span class="string">'.html'</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        hot:<span class="literal">true</span>,<span class="comment">//开启模块热更新</span></span><br><span class="line">        hotOnly:<span class="literal">true</span>,</span><br><span class="line">        proxy: &#123;</span><br><span class="line">            <span class="string">'/api'</span>: &#123;</span><br><span class="line">                target: <span class="string">'https://blog.poetries.top'</span>,<span class="comment">//代理到服务器</span></span><br><span class="line">                changeOrigin:<span class="literal">true</span>,</span><br><span class="line">                logLevel: <span class="string">'debug'</span>,</span><br><span class="line">                <span class="comment">// pathRewite: &#123; &#125;,</span></span><br><span class="line">                headers:&#123;&#125;<span class="comment">// 请求头</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    plugin:[</span><br><span class="line">        <span class="comment">// 模块热更新插件</span></span><br><span class="line">        <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 输出热更新路径</span></span><br><span class="line">        <span class="keyword">new</span> webpack.NamedModulesPlugin()</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>模块热更新配置</strong></p><blockquote><p>需要通过module.hot</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f (<span class="built_in">module</span>.hot) &#123;</span><br><span class="line">  <span class="built_in">module</span>.hot.accept(<span class="string">'./library.js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Do something with the updated library module...</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-4-开启调试SourceMap"><a href="#5-2-4-开启调试SourceMap" class="headerlink" title="5.2.4 开启调试SourceMap"></a>5.2.4 开启调试SourceMap</h4><p><strong>Source Map调试</strong></p><p>把生成以后代码和之前的做一个映射</p><blockquote><p>开启Source Map方式</p></blockquote><p><strong><code>JS Source Map</code>设置</strong></p><p>develpoment</p><ul><li><code>eval</code></li><li><code>eval-source-map</code></li><li><code>cheap-eval-source-map</code></li><li><code>cheap-module-eval-source-map</code></li></ul><blockquote><p>推荐使用<code>cheap-module-source-map</code></p></blockquote><p>production</p><ul><li><code>source-map</code></li><li><code>hidden-source-map</code></li><li><code>nosource-source-map</code></li></ul><blockquote><p>推荐使用<code>source-map</code></p></blockquote><p><strong><code>CSS Source Map</code>设置</strong></p><blockquote><p>改变<code>loader</code>的<code>options</code>选项</p></blockquote><ul><li><code>css-loader.options.soucemap</code></li><li><code>less-loader.options.soucemap</code></li><li><code>sass-loader.options.soucemap</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        app: <span class="string">'./src/app.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        publicPath: <span class="string">'/'</span>,</span><br><span class="line">        filename: <span class="string">'[name].[hash:5].js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        <span class="comment">// 处理css的每个loader加上sourceMap: true 观察css样式 可以看到对应的行号</span></span><br><span class="line">        rules: [</span><br><span class="line">            test: <span class="regexp">/\.less/</span>,</span><br><span class="line">            use: [</span><br><span class="line">                &#123;</span><br><span class="line">                    loader: <span class="string">'style-loader'</span>,</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        <span class="comment">// singleton: true,会导致css的sourceMap不生效</span></span><br><span class="line">                        <span class="comment">//singleton: true,</span></span><br><span class="line">                        sourceMap: <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        importLoaders: <span class="number">2</span>,</span><br><span class="line">                        sourceMap: <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    loader: <span class="string">'less-loader'</span>,</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        sourceMap: <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    devtool: <span class="string">'cheap-module-eval-source-map'</span>,<span class="comment">//开启sourcemap</span></span><br><span class="line">    devServer: &#123;</span><br><span class="line">        port: <span class="number">9001</span>,</span><br><span class="line">        <span class="comment">// 输入任意路径都不会出现404 都会重定向</span></span><br><span class="line">       <span class="comment">// historyApiFallback: true</span></span><br><span class="line">        historyApiFallback: &#123;</span><br><span class="line">            <span class="comment">//从一个确定的url指向对应的文件</span></span><br><span class="line">            <span class="comment">//rewrites: [</span></span><br><span class="line">            <span class="comment">//    &#123;</span></span><br><span class="line">            <span class="comment">//        from: '/pages/a',// 可以写正则</span></span><br><span class="line">           <span class="comment">//         to: '/pages/a.html'</span></span><br><span class="line">            <span class="comment">//    &#125;</span></span><br><span class="line">            rewrites: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">from</span>: <span class="regexp">/^\/([a-zA-Z0-9]+\/?)([a-zA-Z0-9]+)/</span></span><br><span class="line">                    to: <span class="function"><span class="keyword">function</span>(<span class="params">context</span>)</span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">'/'</span> + context.match[<span class="number">1</span>] + context.match[<span class="number">2</span>] + <span class="string">'.html'</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        hot:<span class="literal">true</span>,<span class="comment">//开启模块热更新</span></span><br><span class="line">        hotOnly:<span class="literal">true</span>,</span><br><span class="line">        overlay:<span class="literal">true</span>,<span class="comment">//错误提示</span></span><br><span class="line">        proxy: &#123;</span><br><span class="line">            <span class="string">'/api'</span>: &#123;</span><br><span class="line">                target: <span class="string">'https://blog.poetries.top'</span>,<span class="comment">//代理到服务器</span></span><br><span class="line">                changeOrigin:<span class="literal">true</span>,</span><br><span class="line">                logLevel: <span class="string">'debug'</span>,</span><br><span class="line">                <span class="comment">// pathRewite: &#123; &#125;,</span></span><br><span class="line">                headers:&#123;&#125;<span class="comment">// 请求头</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    plugin:[</span><br><span class="line">        <span class="comment">// 模块热更新插件</span></span><br><span class="line">        <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 输出热更新路径</span></span><br><span class="line">        <span class="keyword">new</span> webpack.NamedModulesPlugin()</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-5-设置-ESLint-检查代码格式"><a href="#5-2-5-设置-ESLint-检查代码格式" class="headerlink" title="5.2.5 设置 ESLint 检查代码格式"></a>5.2.5 设置 ESLint 检查代码格式</h4><ul><li><code>eslint</code></li><li><code>eslint-loader</code></li><li><code>esling-plugin-html</code></li><li><code>eslint-frindly-formatter</code> 友好提示错误</li></ul><p><strong>配置eslint</strong></p><ul><li><code>wepback config</code> 新增<code>loader</code></li><li><code>.eslintrc</code>或者在<code>package.json</code>的<code>eslintConfig</code>中写</li></ul><blockquote><p>配置eslint的规范，推荐使用JavaScript standard style(<a href="https://standardjs.com" target="_blank" rel="noopener">https://standardjs.com</a>)</p></blockquote><p>需要安装以下插件</p><ul><li><code>eslint-config-standard</code></li><li><code>eslint-plugin-promise</code></li><li><code>eslint-plugin-standard</code></li><li><code>eslint-plugin-import</code></li><li><code>eslint-plugin-node</code></li></ul><p><strong>eslint-loader</strong></p><ul><li><code>options.failOnWarning</code> 出现警告</li><li><code>options.failOnError</code></li><li><code>options.formatter</code></li><li><code>options.outputReport</code></li></ul><blockquote><p>设置 <code>devServer.overlay</code>在浏览器中看提示的错误</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .eslintrc</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    root: <span class="literal">true</span>,</span><br><span class="line">    extends: <span class="string">'standard'</span>,</span><br><span class="line">    plugins: [],</span><br><span class="line">    env: &#123;</span><br><span class="line">        browsers: <span class="literal">true</span>,</span><br><span class="line">        node: <span class="literal">true</span> <span class="comment">// node环境</span></span><br><span class="line">    &#125;,</span><br><span class="line">    rules: &#123;</span><br><span class="line">        <span class="comment">// 缩进</span></span><br><span class="line">        indent: [<span class="string">'error'</span>, <span class="number">4</span>],</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//换行</span></span><br><span class="line">        <span class="string">"eol-last"</span>: [<span class="string">'error'</span>, <span class="string">'never'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        app: <span class="string">'./src/app.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        publicPath: <span class="string">'/'</span>,</span><br><span class="line">        filename: <span class="string">'[name].[hash:5].js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        <span class="comment">// 处理css的每个loader加上sourceMap: true 观察css样式 可以看到对应的行号</span></span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                include: [path.resolve(__dirname,<span class="string">'src/'</span>)],</span><br><span class="line">                exclude: [path.resolve(__dirname,<span class="string">'src/libs'</span>)],</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            presets: [<span class="string">'env'</span>]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">//eslint-loader需要在babel-loader之后处理</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            formatter: <span class="built_in">require</span>(<span class="string">'eslint-frindly-formatter'</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.less/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'style-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            <span class="comment">// singleton: true,会导致css的sourceMap不生效</span></span><br><span class="line">                            <span class="comment">//singleton: true,</span></span><br><span class="line">                            sourceMap: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            importLoaders: <span class="number">2</span>,</span><br><span class="line">                            sourceMap: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'less-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            sourceMap: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    devtool: <span class="string">'cheap-module-eval-source-map'</span>,<span class="comment">//开启sourcemap</span></span><br><span class="line">    devServer: &#123;</span><br><span class="line">        port: <span class="number">9001</span>,</span><br><span class="line">        <span class="comment">// 输入任意路径都不会出现404 都会重定向</span></span><br><span class="line">       <span class="comment">// historyApiFallback: true</span></span><br><span class="line">        historyApiFallback: &#123;</span><br><span class="line">            <span class="comment">//从一个确定的url指向对应的文件</span></span><br><span class="line">            <span class="comment">//rewrites: [</span></span><br><span class="line">            <span class="comment">//    &#123;</span></span><br><span class="line">            <span class="comment">//        from: '/pages/a',// 可以写正则</span></span><br><span class="line">           <span class="comment">//         to: '/pages/a.html'</span></span><br><span class="line">            <span class="comment">//    &#125;</span></span><br><span class="line">            rewrites: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">from</span>: <span class="regexp">/^\/([a-zA-Z0-9]+\/?)([a-zA-Z0-9]+)/</span></span><br><span class="line">                    to: <span class="function"><span class="keyword">function</span>(<span class="params">context</span>)</span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">'/'</span> + context.match[<span class="number">1</span>] + context.match[<span class="number">2</span>] + <span class="string">'.html'</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        hot:<span class="literal">true</span>,<span class="comment">//开启模块热更新</span></span><br><span class="line">        hotOnly:<span class="literal">true</span>,</span><br><span class="line">        overlay:<span class="literal">true</span>,<span class="comment">//错误提示</span></span><br><span class="line">        proxy: &#123;</span><br><span class="line">            <span class="string">'/api'</span>: &#123;</span><br><span class="line">                target: <span class="string">'http://blog.poetries.top'</span>,<span class="comment">//代理到服务器</span></span><br><span class="line">                changeOrigin:<span class="literal">true</span>,</span><br><span class="line">                logLevel: <span class="string">'debug'</span>,</span><br><span class="line">                <span class="comment">// pathRewite: &#123; &#125;,</span></span><br><span class="line">                headers:&#123;&#125;<span class="comment">// 请求头</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    plugin:[</span><br><span class="line">        <span class="comment">// 模块热更新插件</span></span><br><span class="line">        <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 输出热更新路径</span></span><br><span class="line">        <span class="keyword">new</span> webpack.NamedModulesPlugin()</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-6-区分开发环境-和-生产环境"><a href="#5-2-6-区分开发环境-和-生产环境" class="headerlink" title="5.2.6 区分开发环境 和 生产环境"></a>5.2.6 区分开发环境 和 生产环境</h4><p><strong>开发环境</strong></p><ul><li>模块热更新</li><li><code>sourceMap</code></li><li>接口代理</li><li>代码规范检查</li></ul><p><strong>生产环境</strong></p><ul><li>提取公共代码</li><li>压缩</li><li>文件压缩或<code>base64</code>编码</li><li>去除无用的代码</li></ul><p><strong>共同点</strong></p><ul><li>入口一致</li><li>loader处理</li><li>解析配置一致</li></ul><blockquote><p>使用<code>webpack-merge</code>合并公共配置</p></blockquote><ul><li><code>webpack.dev.conf.js</code></li><li><code>wepback.prod.conf.js</code></li><li><code>webpack.common.conf.js</code></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts":&#123;</span><br><span class="line">    "server": "wepback-dev-server --env development --open --config build/webpack.common.config.js",</span><br><span class="line">    "build": "wepback --env production --open --config build/webpack.common.config.js"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>公共配置 <code>build/webpack.common.conf.js</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>)</span><br><span class="line"><span class="keyword">const</span> ExtractTextWebpackPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> ProgressBarPlugin = <span class="built_in">require</span>(<span class="string">'progress-bar-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> developmentConfig = <span class="built_in">require</span>(<span class="string">'./webpack.dev.conf'</span>)</span><br><span class="line"><span class="keyword">const</span> productionConfig = <span class="built_in">require</span>(<span class="string">'./webpack.prod.conf'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据环境变量生成配置</span></span><br><span class="line"><span class="keyword">const</span> generateConfig = <span class="function"><span class="params">env</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> extractLess = <span class="keyword">new</span> ExtractTextWebpackPlugin(&#123;</span><br><span class="line">        filename: <span class="string">'css/[name]-bundle-[hash:5].css'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> scriptLoader = [</span><br><span class="line">      <span class="string">'babel-loader'</span></span><br><span class="line">    ].concat(env === <span class="string">'production'</span></span><br><span class="line">      ? []</span><br><span class="line">      : [&#123;</span><br><span class="line">          loader: <span class="string">'eslint-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">              formatter: <span class="built_in">require</span>(<span class="string">'eslint-friendly-formatter'</span>)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;]</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">const</span> cssLoaders = [</span><br><span class="line">      &#123;</span><br><span class="line">          loader: <span class="string">'css-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">              importLoaders: <span class="number">2</span>,</span><br><span class="line">              sourceMap: env===<span class="string">'development'</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        loader: <span class="string">"postcss-loader"</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          ident: <span class="string">"postcss"</span>,</span><br><span class="line">          sourceMap: env===<span class="string">'development'</span>,</span><br><span class="line">          plugins: [</span><br><span class="line"></span><br><span class="line">          ].concat(env===<span class="string">'production'</span></span><br><span class="line">            ? <span class="built_in">require</span>(<span class="string">'postcss-sprites'</span>)(&#123;</span><br><span class="line">              spritePath: <span class="string">'build/assets/imgs/sprites'</span>,</span><br><span class="line">              retina: <span class="literal">true</span></span><br><span class="line">            &#125;)</span><br><span class="line">            :[]</span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">          loader: <span class="string">'less-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">              sourceMap: env===<span class="string">'development'</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">const</span> styleLoader = env === <span class="string">'production'</span></span><br><span class="line">          <span class="comment">// 线上需要提取css成文件</span></span><br><span class="line">          ? extractLess.extract(&#123;</span><br><span class="line">            fallback:<span class="string">'style-loader'</span>,</span><br><span class="line">            use: cssLoaders</span><br><span class="line">          &#125;)</span><br><span class="line">          : [<span class="string">'style-loader'</span>].concat(cssLoaders)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> fileLoader = env === <span class="string">'development'</span></span><br><span class="line">        ? [&#123;</span><br><span class="line">            loader: <span class="string">'file-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              name: <span class="string">'[name]-[hash:5].[ext]'</span>,</span><br><span class="line">              outputPath: <span class="string">'assets/imgs/'</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;]</span><br><span class="line">        : [&#123;</span><br><span class="line">          loader: <span class="string">'url-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            name: <span class="string">'[name]-[hash:5].[ext]'</span>,</span><br><span class="line">            limit: <span class="number">1000</span>,<span class="comment">//1k</span></span><br><span class="line">            outputPath: <span class="string">'assets/imgs/'</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      entry: &#123;</span><br><span class="line">          app: <span class="string">'./src/index.js'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      output: &#123;</span><br><span class="line">          path: path.resolve(__dirname, <span class="string">'../build'</span>),</span><br><span class="line">          publicPath: <span class="string">'/'</span>,</span><br><span class="line">          filename: <span class="string">'[name]-bundle-[hash:5].js'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 路径解析</span></span><br><span class="line">      resolve: &#123;</span><br><span class="line">          alias: &#123;</span><br><span class="line">              <span class="comment">// jquery$: path.resolve(__dirname, '../src/libs/jquery.min.js')</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="built_in">module</span>: &#123;</span><br><span class="line">          rules: [</span><br><span class="line">              &#123;</span><br><span class="line">                  test: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">                  include: [path.resolve(__dirname,<span class="string">'../src/'</span>)],</span><br><span class="line">                  exclude : <span class="regexp">/node_modules/</span>,</span><br><span class="line">                  use: scriptLoader</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                  test: <span class="regexp">/\.(less|css|scss)/</span>,</span><br><span class="line">                  use: styleLoader</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                test: <span class="regexp">/\.(png|jpg|jpeg|gif)$/</span>,</span><br><span class="line">                use: fileLoader.concat(env===<span class="string">'production'</span></span><br><span class="line">                  ? [</span><br><span class="line">                    &#123;</span><br><span class="line">                      loader: <span class="string">'img-loader'</span>,</span><br><span class="line">                      options: &#123;</span><br><span class="line">                        pngquant: &#123;</span><br><span class="line">                          quality: <span class="number">80</span></span><br><span class="line">                        &#125;</span><br><span class="line">                      &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                  ]</span><br><span class="line">                  : []</span><br><span class="line">                )</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                test: <span class="regexp">/\.(eot|woff2?|ttf|svg)$/</span>,</span><br><span class="line">                use: fileLoader</span><br><span class="line">              &#125;</span><br><span class="line">          ]</span><br><span class="line">      &#125;,</span><br><span class="line">      plugins: [</span><br><span class="line">        extractLess,</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> ProgressBarPlugin(&#123;</span><br><span class="line">          format: <span class="string">'  build [:bar] '</span> + chalk.green.bold(<span class="string">':percent'</span>) + <span class="string">' (:elapsed seconds)'</span>,</span><br><span class="line">          clear: <span class="literal">false</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    inject: <span class="literal">true</span>,</span><br><span class="line">    template: path.resolve(__dirname,<span class="string">'../public/index.html'</span>),</span><br><span class="line">          minify: &#123;</span><br><span class="line">            collapseWhitespace: <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">        <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">          $: <span class="string">'jquery'</span></span><br><span class="line">        &#125;)</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">env</span> =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> config = env===<span class="string">'development'</span> ? developmentConfig : productionConfig</span><br><span class="line">  <span class="keyword">return</span> merge(generateConfig(env),config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>开发环境配置 <code>build/webpack.dev.conf.js</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devtool: <span class="string">'cheap-module-eval-source-map'</span>,<span class="comment">//开启sourcemap</span></span><br><span class="line">    devServer: &#123;</span><br><span class="line">        port: <span class="number">9001</span>,</span><br><span class="line">        <span class="comment">// 输入任意路径都不会出现404 都会重定向</span></span><br><span class="line">        historyApiFallback: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// historyApiFallback: &#123;</span></span><br><span class="line">            <span class="comment">//从一个确定的url指向对应的文件</span></span><br><span class="line">            <span class="comment">//rewrites: [</span></span><br><span class="line">            <span class="comment">//    &#123;</span></span><br><span class="line">            <span class="comment">//        from: '/pages/a',// 可以写正则</span></span><br><span class="line">           <span class="comment">//         to: '/pages/a.html'</span></span><br><span class="line">            <span class="comment">//    &#125;</span></span><br><span class="line">            <span class="comment">// rewrites: [</span></span><br><span class="line">            <span class="comment">//     &#123;</span></span><br><span class="line">            <span class="comment">//         from: /^\/([a-zA-Z0-9]+\/?)([a-zA-Z0-9]+)/</span></span><br><span class="line">            <span class="comment">//         to: function(context)&#123;</span></span><br><span class="line">            <span class="comment">//             return '/' + context.match[1] + context.match[2] + '.html'</span></span><br><span class="line">            <span class="comment">//         &#125;</span></span><br><span class="line">            <span class="comment">//     &#125;</span></span><br><span class="line">            <span class="comment">// ]</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">        hot:<span class="literal">true</span>,<span class="comment">//开启模块热更新</span></span><br><span class="line">        hotOnly:<span class="literal">true</span>,</span><br><span class="line">        overlay:<span class="literal">true</span>,<span class="comment">//错误提示</span></span><br><span class="line">        proxy: &#123;</span><br><span class="line">            <span class="string">'/api'</span>: &#123;</span><br><span class="line">                <span class="comment">// target: 'http://blog.poetries.top',//代理到服务器</span></span><br><span class="line">                changeOrigin:<span class="literal">true</span>,</span><br><span class="line">                logLevel: <span class="string">'debug'</span>,</span><br><span class="line">                <span class="comment">// pathRewite: &#123; &#125;,</span></span><br><span class="line">                headers:&#123;&#125;<span class="comment">// 请求头</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">      <span class="comment">// 模块热更新插件</span></span><br><span class="line">       <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 输出热更新路径</span></span><br><span class="line">       <span class="keyword">new</span> webpack.NamedModulesPlugin()</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>生产环境配置 <code>build/webpack.prod.conf.js</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> PurifyCssWebpack = <span class="built_in">require</span>(<span class="string">'purifycss-webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> ExtractTextWebpackPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> glob = <span class="built_in">require</span>(<span class="string">'glob-all'</span>)<span class="comment">//处理多个路径</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> PurifyCssWebpack(&#123;</span><br><span class="line">      paths: glob.sync([</span><br><span class="line">        <span class="string">'./*html'</span>,</span><br><span class="line">        <span class="string">'./src/*js'</span></span><br><span class="line">      ])</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: <span class="string">'manifest'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      inlineChunks: [<span class="string">'manifest'</span>]</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(),</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin([<span class="string">'../build'</span>])</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-使用-middleware-来搭建开发环境"><a href="#5-3-使用-middleware-来搭建开发环境" class="headerlink" title="5.3 使用 middleware 来搭建开发环境"></a>5.3 使用 middleware 来搭建开发环境</h3><blockquote><p>可以更灵活配置,需要以下插件搭建</p></blockquote><ul><li><code>Express or koa</code></li><li><code>webpack-dev-middleware</code></li><li><code>webpack-hot-middleware</code> 热更新</li><li><code>http-proxy-middleware</code> 代理</li><li><code>connect-history-api-fallback</code> 地址rewrite</li><li><code>opn</code> 命令工具打开浏览器页面</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// build/server.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用middleware搭建服务:更灵活配置,不在使用webpack-dev-server</span></span><br><span class="line"><span class="comment"> * @type &#123;[type]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> opn = <span class="built_in">require</span>(<span class="string">'opn'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//把express和配置联合起来 需要用到middleware</span></span><br><span class="line"><span class="keyword">const</span> webpackDevMiddleware = <span class="built_in">require</span>(<span class="string">'webpack-dev-middleware'</span>)</span><br><span class="line"><span class="keyword">const</span> webpackHotMiddleware = <span class="built_in">require</span>(<span class="string">'webpack-hot-middleware'</span>)</span><br><span class="line"><span class="keyword">const</span> proxyMiddleware = <span class="built_in">require</span>(<span class="string">'http-proxy-middleware'</span>)</span><br><span class="line"><span class="keyword">const</span> historyApiFallback = <span class="built_in">require</span>(<span class="string">'connect-history-api-fallback'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'./webpack.common.conf'</span>)(&#123;<span class="attr">env</span>:<span class="string">'development'</span>&#125;)</span><br><span class="line"><span class="keyword">const</span> compiler = webpack(config) <span class="comment">//给express使用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> proxyTable = <span class="built_in">require</span>(<span class="string">'./proxy'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> context <span class="keyword">in</span> proxyTable)&#123;</span><br><span class="line">  app.use(proxyMiddleware(context, proxyTable[context]))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.use(historyApiFallback(<span class="built_in">require</span>(<span class="string">'./historyfallback'</span>)))</span><br><span class="line"></span><br><span class="line">app.use(webpackDevMiddleware(compiler, &#123;</span><br><span class="line">  publicPath: config.output.publicPath</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">app.use(webpackHotMiddleware(compiler))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.listen(port, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'&gt; Ready on:'</span> + port)</span><br><span class="line">  opn(<span class="string">'http://localhost:'</span> + port)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="六、webpack实战场景"><a href="#六、webpack实战场景" class="headerlink" title="六、webpack实战场景"></a>六、webpack实战场景</h2><h3 id="6-1-分析打包结果"><a href="#6-1-分析打包结果" class="headerlink" title="6.1 分析打包结果"></a>6.1 分析打包结果</h3><blockquote><p><a href="http://blog.poetries.top/2018/11/20/webpack-bundleAnalyzer/">http://blog.poetries.top/2018/11/20/webpack-bundleAnalyzer/</a></p></blockquote><h3 id="6-2-优化打包速度"><a href="#6-2-优化打包速度" class="headerlink" title="6.2 优化打包速度"></a>6.2 优化打包速度</h3><h4 id="6-2-1-方法一：分开vendor和app"><a href="#6-2-1-方法一：分开vendor和app" class="headerlink" title="6.2.1 方法一：分开vendor和app"></a>6.2.1 方法一：分开vendor和app</h4><blockquote><p>分开第三方代码和业务代码，借助<code>DllPlugin</code>和<code>DllReferencePlugin</code></p></blockquote><p><strong>之前的打包时间</strong></p><blockquote><p>现在我们来优化这个时间</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-016eedc71c63fdb5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>第一步：新建<code>webpack.dll.conf.js</code></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// build/webpack.dll.conf.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    <span class="comment">// 把这些资源打包成dll，提高编译速度</span></span><br><span class="line">    react: [<span class="string">'react'</span>,<span class="string">'react-router-dom'</span>,<span class="string">'redux'</span>,<span class="string">'redux-immutable'</span>,<span class="string">'immutable'</span>,<span class="string">'react-redux'</span>,<span class="string">'react-router'</span>,<span class="string">'redux-logger'</span>,<span class="string">'redux-thunk'</span>,<span class="string">'styled-components'</span>],</span><br><span class="line">    ui: [<span class="string">'antd-mobile'</span>,<span class="string">'antd'</span>],</span><br><span class="line">    others: [<span class="string">'react-icons'</span>,<span class="string">'axios'</span>,<span class="string">'clipboard'</span>,<span class="string">'humps'</span>,<span class="string">'lodash'</span>,<span class="string">'md5'</span>,<span class="string">'moment'</span>,<span class="string">'normalizr'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"../dll/"</span>),</span><br><span class="line">    filename: <span class="string">'[name].dll.js'</span>,</span><br><span class="line">    library: <span class="string">'[name]'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.DllPlugin(&#123;</span><br><span class="line">      path: path.join(__dirname,<span class="string">'../dll/'</span>,<span class="string">'[name]-manifest.json'</span>),</span><br><span class="line">      name: <span class="string">'[name]'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第二步：加一个命令</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"dll"</span>: <span class="string">"webpack --config config/webpack.dll.conf.js"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行<code>npm run dll</code></p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-bed6305c04fb2197.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>第三步： 在plugins中增加配置</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// build/webpack.prod.conf.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">   plugins: [</span><br><span class="line">        <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">          manifest: <span class="built_in">require</span>(<span class="string">'../dll/react-manifest.json'</span>)</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">          manifest: <span class="built_in">require</span>(<span class="string">'../dll/ui-manifest.json'</span>)</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">          manifest: <span class="built_in">require</span>(<span class="string">'../dll/others-manifest.json'</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>再次执行<code>npm run build</code></p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-bd2b95bbac325e1c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>编译时间大大减少了</p><h4 id="6-2-2-方法二：UglifyJsPlugin并行处理"><a href="#6-2-2-方法二：UglifyJsPlugin并行处理" class="headerlink" title="6.2.2 方法二：UglifyJsPlugin并行处理"></a>6.2.2 方法二：UglifyJsPlugin并行处理</h4><p><strong>UglifyJsPlugin</strong></p><ul><li><code>parallel</code></li><li><code>cache</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// build/webpack.prod.conf.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">   plugins: [</span><br><span class="line">        <span class="keyword">new</span> UglifyJsPlugin(&#123;</span><br><span class="line">          parallel:<span class="literal">true</span>, <span class="comment">//并行处理</span></span><br><span class="line">          cache: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-2-3-方法三：happyPack"><a href="#6-2-3-方法三：happyPack" class="headerlink" title="6.2.3 方法三：happyPack"></a>6.2.3 方法三：happyPack</h4><blockquote><p><code>happyPack</code>把所有串行的东西并行处理,使得<code>loader</code>并行处理，较少文件处理时间</p></blockquote><p><a href="https://www.npmjs.com/package/happypack" target="_blank" rel="noopener">https://www.npmjs.com/package/happypack</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// build/webpack.prod.conf.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @file: webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> HappyPack = <span class="built_in">require</span>(<span class="string">'happypack'</span>);</span><br><span class="line"> </span><br><span class="line">exports.module = &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/.js$/</span>,</span><br><span class="line">      <span class="comment">// 1) replace your original list of loaders with "happypack/loader":</span></span><br><span class="line">      <span class="comment">// loaders: [ 'babel-loader?presets[]=es2015' ],</span></span><br><span class="line">      use: <span class="string">'happypack/loader'</span>,</span><br><span class="line">      include: [ <span class="comment">/* ... */</span> ],</span><br><span class="line">      exclude: [ <span class="comment">/* ... */</span> ]</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  plugins: [</span><br><span class="line">     <span class="comment">// 2) create the plugin:</span></span><br><span class="line">    <span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">        <span class="comment">// 3) re-add the loaders you replaced above in #1:</span></span><br><span class="line">        loaders: [ <span class="string">'babel-loader?presets[]=es2015'</span> ]</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时的编译时间也减小了一些</p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-1cee221ca808dce0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h4 id="6-2-4-方法四：较少babel-loader编译时间"><a href="#6-2-4-方法四：较少babel-loader编译时间" class="headerlink" title="6.2.4 方法四：较少babel-loader编译时间"></a>6.2.4 方法四：较少babel-loader编译时间</h4><p><strong>babel-loader</strong></p><blockquote><p>开启缓存，指定编译范围</p></blockquote><ul><li><code>options.cache</code></li><li><code>include</code></li><li><code>exclude</code></li></ul><h4 id="6-2-5-其他"><a href="#6-2-5-其他" class="headerlink" title="6.2.5 其他"></a>6.2.5 其他</h4><ul><li>减少<code>resolve</code></li><li><code>Devtool</code>去除<code>sourcemap</code></li><li><code>cache-loader</code></li><li>升级<code>node</code></li><li>升级<code>webpack</code></li></ul><h3 id="6-3-长缓存优化"><a href="#6-3-长缓存优化" class="headerlink" title="6.3 长缓存优化"></a>6.3 长缓存优化</h3><p><strong>场景</strong></p><blockquote><p>改变<code>app</code>代码，<code>vendor</code>变化</p></blockquote><p><strong>解决</strong></p><ul><li>提取<code>vendor</code></li><li><code>hash</code>–&gt; <code>chunkhash</code>(把<code>hash</code>变为代码块的<code>hash</code>，而不是文件的<code>hash</code>)</li><li>提取<code>webpack runtime</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'../build/'</span>),</span><br><span class="line">    filename: <span class="string">'static/js/[name].[chunkhash:5].js'</span>,</span><br><span class="line">    chunkFilename: <span class="string">'static/js/[name].[chunkhash:8].chunk.js'</span>,</span><br><span class="line">    publicPath: <span class="string">'/'</span> <span class="comment">//浏览器中访问资源的路径</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1480597-ba288a15ef308d53.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>每次打包<code>vendor</code>都不会变化，这样就达到了缓存的目的（服务端开启<code>cache-ctrol</code>）</p></blockquote><p><strong>场景：引入新模块，模块顺序变化，vendor hash变化</strong></p><blockquote><p>解决： <code>NamedChunksPlugin</code> <code>NamedModulesPlugin</code></p></blockquote><p>对于动态模块引入需要给名称</p><h3 id="6-4-多页面应用"><a href="#6-4-多页面应用" class="headerlink" title="6.4 多页面应用"></a>6.4 多页面应用</h3><h4 id="6-4-1-多页面特点"><a href="#6-4-1-多页面特点" class="headerlink" title="6.4.1 多页面特点"></a>6.4.1 多页面特点</h4><ul><li>多入口</li><li>多页面<code>HTML</code></li><li>每个页面不同的<code>chunk</code></li><li>每个页面不同的参数</li></ul><h4 id="6-4-2-多页面多配置"><a href="#6-4-2-多页面多配置" class="headerlink" title="6.4.2 多页面多配置"></a>6.4.2 多页面多配置</h4><blockquote><p><code>wepback从3.1.0</code>开始支持</p></blockquote><p> <strong>优点</strong>：</p><ul><li>可以使用<code>parallel-webpack</code>(并行处理多份配置)提高打包速度<ul><li>配置更独立、灵活</li></ul></li></ul><p><strong>缺点</strong></p><ul><li>不能多页面之间共享代码</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//package.json</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"多页面配置"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"0.1.0"</span>,</span><br><span class="line">  <span class="string">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"clean-webpack-plugin"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line">    <span class="string">"css-loader"</span>: <span class="string">"^1.0.1"</span>,</span><br><span class="line">    <span class="string">"ejs-loader"</span>: <span class="string">"^0.3.1"</span>,</span><br><span class="line">    <span class="string">"file-loader"</span>: <span class="string">"^2.0.0"</span>,</span><br><span class="line">    <span class="string">"html-loader"</span>: <span class="string">"^0.5.5"</span>,</span><br><span class="line">    <span class="string">"html-webpack-plugin"</span>: <span class="string">"^3.2.0"</span>,</span><br><span class="line">    <span class="string">"react"</span>: <span class="string">"^16.3.1"</span>,</span><br><span class="line">    <span class="string">"style-loader"</span>: <span class="string">"^0.23.1"</span>,</span><br><span class="line">    <span class="string">"webpack"</span>: <span class="string">"^4.26.0"</span>,</span><br><span class="line">    <span class="string">"webpack-merge"</span>: <span class="string">"^4.1.4"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;&#125;,</span><br><span class="line">  <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"extract-text-webpack-plugin"</span>: <span class="string">"^4.0.0-beta.0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多页面多配置</span></span><br><span class="line"><span class="comment"> * @type &#123;[type]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> CleanWebpack = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> ExtractTextwebpack = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> baseConfig = &#123;</span><br><span class="line">    mode: <span class="string">'development'</span>,</span><br><span class="line">    entry: &#123;</span><br><span class="line">        react: <span class="string">'react'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">      rules: [</span><br><span class="line">        &#123;</span><br><span class="line">          test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">          use: ExtractTextwebpack.extract(&#123;</span><br><span class="line">            fallback: <span class="string">'style-loader'</span>,</span><br><span class="line">            use: <span class="string">'css-loader'</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        filename: <span class="string">'js/[name].[chunkhash].js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> ExtractTextwebpack(&#123;</span><br><span class="line">          filename: <span class="string">'css/[name].[hash].css'</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> CleanWebpack([<span class="string">'./dist'</span>])</span><br><span class="line">    ],</span><br><span class="line">    optimization: &#123;</span><br><span class="line">      splitChunks: &#123;</span><br><span class="line">          cacheGroups: &#123;</span><br><span class="line">              commons: &#123;</span><br><span class="line">                  <span class="comment">// commons里面的name就是生成的共享模块bundle的名字</span></span><br><span class="line">                  name: <span class="string">"react"</span>,</span><br><span class="line">                  <span class="comment">// chunks 有三个可选值，”initial”, “async” 和 “all”. 分别对应优化时只选择初始的chunks，所需要的chunks 还是所有chunks</span></span><br><span class="line">                  chunks: <span class="string">"initial"</span>,</span><br><span class="line">                  minChunks: <span class="literal">Infinity</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成每个页面配置</span></span><br><span class="line"><span class="keyword">const</span> generatePage = <span class="function"><span class="keyword">function</span>(<span class="params">&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    title = <span class="string">''</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    entry = <span class="string">''</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    template = <span class="string">'./src/index.html'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    name = <span class="string">''</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    chunks = []</span></span></span><br><span class="line"><span class="function"><span class="params">&#125; = &#123;&#125;</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        entry,</span><br><span class="line">        plugins: [</span><br><span class="line">            <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">                chunks,</span><br><span class="line">                template:<span class="string">`!!html-loader!<span class="subst">$&#123;template&#125;</span>`</span>,</span><br><span class="line">                filename: name + <span class="string">'.html'</span></span><br><span class="line">            &#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pages = [</span><br><span class="line">  generatePage(&#123;</span><br><span class="line">      title: <span class="string">'page A'</span>,</span><br><span class="line">      entry: &#123;</span><br><span class="line">        a: <span class="string">'./src/pages/a'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      name: <span class="string">'a'</span>,</span><br><span class="line">      chunks: [<span class="string">'react'</span>,<span class="string">'a'</span>]</span><br><span class="line">  &#125;),</span><br><span class="line">  generatePage(&#123;</span><br><span class="line">      title: <span class="string">'page B'</span>,</span><br><span class="line">      entry: &#123;</span><br><span class="line">        b: <span class="string">'./src/pages/b'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      name: <span class="string">'b'</span>,</span><br><span class="line">      chunks: [<span class="string">'react'</span>,<span class="string">'b'</span>]</span><br><span class="line">  &#125;),</span><br><span class="line">  generatePage(&#123;</span><br><span class="line">      title: <span class="string">'page C'</span>,</span><br><span class="line">      entry: &#123;</span><br><span class="line">        c: <span class="string">'./src/pages/c'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      name: <span class="string">'c'</span>,</span><br><span class="line">      chunks: [<span class="string">'react'</span>,<span class="string">'c'</span>]</span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = pages.map(<span class="function"><span class="params">page</span>=&gt;</span>merge(baseConfig, page))</span><br></pre></td></tr></table></figure><h4 id="6-4-3-多页面单配置"><a href="#6-4-3-多页面单配置" class="headerlink" title="6.4.3 多页面单配置"></a>6.4.3 多页面单配置</h4><blockquote><p>多个页面共享一个配置</p></blockquote><ul><li>优点：可以共享各个<code>entry</code>之间公用代码</li><li>缺点：打包速度比较慢，输出的内容比较复杂</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多页面单配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"> <span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"> <span class="keyword">const</span> HtmlWbpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"> <span class="keyword">const</span> CleanWebpack = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>)</span><br><span class="line"> <span class="keyword">const</span> ExtractTextwebpack = <span class="built_in">require</span>(<span class="string">"extract-text-webpack-plugin"</span>)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">const</span> baseConfig = &#123;</span><br><span class="line">     mode: <span class="string">'development'</span>,</span><br><span class="line">     entry: &#123;</span><br><span class="line">         react: <span class="string">'react'</span></span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="built_in">module</span>: &#123;</span><br><span class="line">       rules: [</span><br><span class="line">         &#123;</span><br><span class="line">           test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">           use: ExtractTextwebpack.extract(&#123;</span><br><span class="line">             fallback: <span class="string">'style-loader'</span>,</span><br><span class="line">             use: <span class="string">'css-loader'</span></span><br><span class="line">           &#125;)</span><br><span class="line">         &#125;</span><br><span class="line">       ]</span><br><span class="line">     &#125;,</span><br><span class="line">     output: &#123;</span><br><span class="line">         path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">         filename: <span class="string">'js/[name].[chunkhash].js'</span></span><br><span class="line">     &#125;,</span><br><span class="line">     plugins: [</span><br><span class="line">         <span class="keyword">new</span> ExtractTextwebpack(&#123;</span><br><span class="line">           filename: <span class="string">'css/[name].[hash].css'</span></span><br><span class="line">         &#125;),</span><br><span class="line">         <span class="keyword">new</span> CleanWebpack(path.resolve(__dirname, <span class="string">'dist'</span>))</span><br><span class="line">     ],</span><br><span class="line">     optimization: &#123;</span><br><span class="line">       splitChunks: &#123;</span><br><span class="line">           cacheGroups: &#123;</span><br><span class="line">               commons: &#123;</span><br><span class="line">                   <span class="comment">// commons里面的name就是生成的共享模块bundle的名字</span></span><br><span class="line">                   name: <span class="string">"react"</span>,</span><br><span class="line">                   <span class="comment">// chunks 有三个可选值，”initial”, “async” 和 “all”. 分别对应优化时只选择初始的chunks，所需要的chunks 还是所有chunks</span></span><br><span class="line">                   chunks: <span class="string">"initial"</span>,</span><br><span class="line">                   minChunks: <span class="literal">Infinity</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//生成每个页面配置</span></span><br><span class="line"> <span class="keyword">const</span> generatePage = <span class="function"><span class="keyword">function</span>(<span class="params">&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">     title = <span class="string">''</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">     entry = <span class="string">''</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">     template = <span class="string">'./src/index.html'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">     name = <span class="string">''</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">     chunks = []</span></span></span><br><span class="line"><span class="function"><span class="params"> &#125; = &#123;&#125;</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> &#123;</span><br><span class="line">         entry,</span><br><span class="line">         plugins: [</span><br><span class="line">             <span class="keyword">new</span> HtmlWbpackPlugin(&#123;</span><br><span class="line">                 chunks,</span><br><span class="line">                 template:<span class="string">`!!html-loader!<span class="subst">$&#123;template&#125;</span>`</span>,</span><br><span class="line">                 title,</span><br><span class="line">                 filename: name + <span class="string">'.html'</span></span><br><span class="line">             &#125;)</span><br><span class="line">         ]</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">const</span> pages = [</span><br><span class="line">   generatePage(&#123;</span><br><span class="line">       title: <span class="string">'page A'</span>,</span><br><span class="line">       entry: &#123;</span><br><span class="line">         a: <span class="string">'./src/pages/a'</span></span><br><span class="line">       &#125;,</span><br><span class="line">       name: <span class="string">'a'</span>,</span><br><span class="line">       chunks: [<span class="string">'react'</span>,<span class="string">'a'</span>]</span><br><span class="line">   &#125;),</span><br><span class="line">   generatePage(&#123;</span><br><span class="line">       title: <span class="string">'page B'</span>,</span><br><span class="line">       entry: &#123;</span><br><span class="line">         b: <span class="string">'./src/pages/b'</span></span><br><span class="line">       &#125;,</span><br><span class="line">       name: <span class="string">'b'</span>,</span><br><span class="line">       chunks: [<span class="string">'react'</span>,<span class="string">'b'</span>]</span><br><span class="line">   &#125;),</span><br><span class="line">   generatePage(&#123;</span><br><span class="line">       title: <span class="string">'page C'</span>,</span><br><span class="line">       entry: &#123;</span><br><span class="line">         c: <span class="string">'./src/pages/c'</span></span><br><span class="line">       &#125;,</span><br><span class="line">       name: <span class="string">'c'</span>,</span><br><span class="line">       chunks: [<span class="string">'react'</span>,<span class="string">'c'</span>]</span><br><span class="line">   &#125;)</span><br><span class="line"> ]</span><br><span class="line"></span><br><span class="line"> <span class="built_in">module</span>.exports = merge([baseConfig].concat(pages))</span><br></pre></td></tr></table></figure><blockquote><p>完整例子 <a href="https://github.com/poetries/webpack-config-demo" target="_blank" rel="noopener">https://github.com/poetries/webpack-config-demo</a></p></blockquote><h2 id="七、更多学习"><a href="#七、更多学习" class="headerlink" title="七、更多学习"></a>七、更多学习</h2><ul><li><a href="https://juejin.im/post/5bb089e86fb9a05cd84935d0" target="_blank" rel="noopener">webpack4.0 入门篇 - 构建前端开发的基本环境</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;基于&lt;code&gt;webpack3&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、webpack简介&quot;&gt;&lt;a href=&quot;#一、webpack简介&quot; class=&quot;headerlink&quot; title=&quot;一、webpack简介&quot;
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="优化" scheme="http://blog.poetries.top/tags/%E4%BC%98%E5%8C%96/"/>
    
      <category term="webpack" scheme="http://blog.poetries.top/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>webpack常用插件总结篇</title>
    <link href="http://blog.poetries.top/2018/11/20/webpack-config-optize/"/>
    <id>http://blog.poetries.top/2018/11/20/webpack-config-optize/</id>
    <published>2018-11-20T17:00:34.000Z</published>
    <updated>2018-11-28T12:50:39.025Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、功能类"><a href="#一、功能类" class="headerlink" title="一、功能类"></a>一、功能类</h2><h3 id="1-1-html-webpack-plugin"><a href="#1-1-html-webpack-plugin" class="headerlink" title="1.1 html-webpack-plugin"></a>1.1 html-webpack-plugin</h3><blockquote><p>自动生成<code>html</code>，基本用法：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">  filename: <span class="string">'index.html'</span>, <span class="comment">// 生成文件名</span></span><br><span class="line">  template: path.join(process.cwd(), <span class="string">'./index.html'</span>) <span class="comment">// 模班文件</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="1-2-copy-webpack-plugin"><a href="#1-2-copy-webpack-plugin" class="headerlink" title="1.2 copy-webpack-plugin"></a>1.2 copy-webpack-plugin</h3><blockquote><p>拷贝资源插件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> CopyWebpackPlugin([</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">from</span>: path.join(process.cwd(), <span class="string">'./vendor/'</span>),</span><br><span class="line">    to: path.join(process.cwd(), <span class="string">'./dist/'</span>),</span><br><span class="line">    ignore: [<span class="string">'*.json'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h3 id="1-3-webpack-manifest-plugin-amp-amp-assets-webpack-plugin"><a href="#1-3-webpack-manifest-plugin-amp-amp-assets-webpack-plugin" class="headerlink" title="1.3 webpack-manifest-plugin &amp;&amp; assets-webpack-plugin"></a>1.3 webpack-manifest-plugin &amp;&amp; assets-webpack-plugin</h3><blockquote><p>俩个插件效果一致，都是生成编译结果的资源单，只是资源单的数据结构不一致而已</p></blockquote><p><strong>webpack-manifest-plugin 基本用法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> ManifestPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>assets-webpack-plugin 基本用法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> AssetsPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-clean-webpack-plugin"><a href="#1-4-clean-webpack-plugin" class="headerlink" title="1.4 clean-webpack-plugin"></a>1.4 clean-webpack-plugin</h3><blockquote><p>在编译之前清理指定目录指定内容</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 清理目录</span></span><br><span class="line"><span class="keyword">const</span> pathsToClean = [</span><br><span class="line">  <span class="string">'dist'</span>,</span><br><span class="line">  <span class="string">'build'</span></span><br><span class="line">]</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 清理参数</span></span><br><span class="line"><span class="keyword">const</span> cleanOptions = &#123;</span><br><span class="line">  exclude:  [<span class="string">'shared.js'</span>], <span class="comment">// 跳过文件</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(pathsToClean, cleanOptions)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5-compression-webpack-plugin"><a href="#1-5-compression-webpack-plugin" class="headerlink" title="1.5 compression-webpack-plugin"></a>1.5 compression-webpack-plugin</h3><blockquote><p>提供带 <code>Content-Encoding</code> 编码的压缩版的资源</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CompressionPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-progress-bar-webpack-plugin"><a href="#1-6-progress-bar-webpack-plugin" class="headerlink" title="1.6 progress-bar-webpack-plugin"></a>1.6 progress-bar-webpack-plugin</h3><blockquote><p>编译进度条插件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> ProgressBarPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、代码相关类"><a href="#二、代码相关类" class="headerlink" title="二、代码相关类"></a>二、代码相关类</h2><h3 id="2-1-webpack-ProvidePlugin"><a href="#2-1-webpack-ProvidePlugin" class="headerlink" title="2.1 webpack.ProvidePlugin"></a>2.1 webpack.ProvidePlugin</h3><blockquote><p>自动加载模块，如 <code>$</code> 出现，就会自动加载模块；<code>$</code> 默认为<code>&#39;jquery&#39;</code>的<code>exports</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">  $: <span class="string">'jquery'</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="2-2-webpack-DefinePlugin"><a href="#2-2-webpack-DefinePlugin" class="headerlink" title="2.2 webpack.DefinePlugin"></a>2.2 webpack.DefinePlugin</h3><blockquote><p>定义全局常量</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">  <span class="string">'process.env'</span>: &#123;</span><br><span class="line">    NODE_ENV: <span class="built_in">JSON</span>.stringify(process.env.NODE_ENV)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="2-3-mini-css-extract-plugin-amp-amp-extract-text-webpack-plugin"><a href="#2-3-mini-css-extract-plugin-amp-amp-extract-text-webpack-plugin" class="headerlink" title="2.3 mini-css-extract-plugin &amp;&amp; extract-text-webpack-plugin"></a>2.3 mini-css-extract-plugin &amp;&amp; extract-text-webpack-plugin</h3><blockquote><p>提取css样式，对比</p></blockquote><ul><li><code>mini-css-extract-plugin</code> 为<code>webpack4</code>及以上提供的<code>plugin</code>，支持<code>css chunk</code></li><li><code>extract-text-webpack-plugin</code> 只能在<code>webpack3</code> 及一下的版本使用，不支持<code>css chunk</code></li></ul><p><strong>基本用法 extract-text-webpack-plugin</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">"extract-text-webpack-plugin"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: ExtractTextPlugin.extract(&#123;</span><br><span class="line">          fallback: <span class="string">"style-loader"</span>,</span><br><span class="line">          use: <span class="string">"css-loader"</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> ExtractTextPlugin(<span class="string">"styles.css"</span>),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>基本用法 mini-css-extract-plugin</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">"mini-css-extract-plugin"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: MiniCssExtractPlugin.loader,</span><br><span class="line">            options: &#123;</span><br><span class="line">              publicPath: <span class="string">'/'</span>  <span class="comment">// chunk publicPath</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">"css-loader"</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">      filename: <span class="string">"[name].css"</span>, <span class="comment">// 主文件名</span></span><br><span class="line">      chunkFilename: <span class="string">"[id].css"</span>  <span class="comment">// chunk文件名</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、编译结果优化类"><a href="#三、编译结果优化类" class="headerlink" title="三、编译结果优化类"></a>三、编译结果优化类</h2><h3 id="3-1-wbepack-IgnorePlugin"><a href="#3-1-wbepack-IgnorePlugin" class="headerlink" title="3.1 wbepack.IgnorePlugin"></a>3.1 wbepack.IgnorePlugin</h3><blockquote><p>忽略<code>regExp</code>匹配的模块</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.IgnorePlugin(<span class="regexp">/^\.\/locale$/</span>, /moment$/)</span><br></pre></td></tr></table></figure><h3 id="3-2-uglifyjs-webpack-plugin"><a href="#3-2-uglifyjs-webpack-plugin" class="headerlink" title="3.2 uglifyjs-webpack-plugin"></a>3.2 uglifyjs-webpack-plugin</h3><blockquote><p>代码丑化，用于js压缩</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  optimization: &#123;</span><br><span class="line">    minimizer: [<span class="keyword">new</span> UglifyJsPlugin(&#123;</span><br><span class="line">      cache: <span class="literal">true</span>,   <span class="comment">// 开启缓存</span></span><br><span class="line">      parallel: <span class="literal">true</span>, <span class="comment">// 开启多线程编译</span></span><br><span class="line">      sourceMap: <span class="literal">true</span>,  <span class="comment">// 是否sourceMap</span></span><br><span class="line">      uglifyOptions: &#123;  <span class="comment">// 丑化参数</span></span><br><span class="line">        comments: <span class="literal">false</span>,</span><br><span class="line">        warnings: <span class="literal">false</span>,</span><br><span class="line">        compress: &#123;</span><br><span class="line">          unused: <span class="literal">true</span>,</span><br><span class="line">          dead_code: <span class="literal">true</span>,</span><br><span class="line">          collapse_vars: <span class="literal">true</span>,</span><br><span class="line">          reduce_vars: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        output: &#123;</span><br><span class="line">          comments: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-3-optimize-css-assets-webpack-plugin"><a href="#3-3-optimize-css-assets-webpack-plugin" class="headerlink" title="3.3 optimize-css-assets-webpack-plugin"></a>3.3 optimize-css-assets-webpack-plugin</h3><blockquote><p>css压缩，主要使用 <code>cssnano</code> 压缩器 <a href="https://github.com/cssnano/cssnano" target="_blank" rel="noopener">https://github.com/cssnano/cssnano</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  optimization: &#123;</span><br><span class="line">    minimizer: [<span class="keyword">new</span> OptimizeCssAssetsPlugin(&#123;</span><br><span class="line">      cssProcessor: <span class="built_in">require</span>(<span class="string">'cssnano'</span>),   <span class="comment">// css 压缩优化器</span></span><br><span class="line">      cssProcessorOptions: &#123; <span class="attr">discardComments</span>: &#123; <span class="attr">removeAll</span>: <span class="literal">true</span> &#125; &#125; <span class="comment">// 去除所有注释</span></span><br><span class="line">    &#125;)]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-4-webpack-md5-hash"><a href="#3-4-webpack-md5-hash" class="headerlink" title="3.4 webpack-md5-hash"></a>3.4 webpack-md5-hash</h3><blockquote><p>使你的<code>chunk</code>根据内容生成<code>md5</code>，用这个<code>md5</code>取代 <code>webpack chunkhash</code>。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> WebpackMd5Hash = <span class="built_in">require</span>(<span class="string">'webpack-md5-hash'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    chunkFilename: <span class="string">"[chunkhash].[id].chunk.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> WebpackMd5Hash()</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-5-SplitChunksPlugin"><a href="#3-5-SplitChunksPlugin" class="headerlink" title="3.5 SplitChunksPlugin"></a>3.5 SplitChunksPlugin</h3><ul><li><code>CommonChunkPlugin</code> 的后世，用于<code>chunk</code>切割。</li></ul><blockquote><p><code>webpack</code> 把 <code>chunk</code> 分为两种类型，一种是初始加载<code>initial chunk</code>，另外一种是异步加载 <code>async chunk</code>，如果不配置<code>SplitChunksPlugin</code>，<code>webpack</code>会在<code>production</code>的模式下自动开启，默认情况下，<code>webpack</code>会将 <code>node_modules</code> 下的所有模块定义为异步加载模块，并分析你的 <code>entry</code>、动态加载（<code>import()</code>、<code>require.ensure</code>）模块，找出这些模块之间共用的<code>node_modules</code>下的模块，并将这些模块提取到单独的<code>chunk</code>中，在需要的时候异步加载到页面当中，其中默认配置如下</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      chunks: <span class="string">'async'</span>, <span class="comment">// 异步加载chunk</span></span><br><span class="line">      minSize: <span class="number">30000</span>,</span><br><span class="line">      maxSize: <span class="number">0</span>,</span><br><span class="line">      minChunks: <span class="number">1</span>,</span><br><span class="line">      maxAsyncRequests: <span class="number">5</span>,</span><br><span class="line">      maxInitialRequests: <span class="number">3</span>,</span><br><span class="line">      automaticNameDelimiter: <span class="string">'~'</span>, <span class="comment">// 文件名中chunk分隔符</span></span><br><span class="line">      name: <span class="literal">true</span>,</span><br><span class="line">      cacheGroups: &#123;</span><br><span class="line">        vendors: &#123;</span><br><span class="line">          test: <span class="regexp">/[\\/]node_modules[\\/]/</span>,  <span class="comment">// </span></span><br><span class="line">          priority: <span class="number">-10</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">default</span>: &#123;</span><br><span class="line">          minChunks: <span class="number">2</span>,  <span class="comment">// 最小的共享chunk数</span></span><br><span class="line">          priority: <span class="number">-20</span>,</span><br><span class="line">          reuseExistingChunk: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="四、编译优化类"><a href="#四、编译优化类" class="headerlink" title="四、编译优化类"></a>四、编译优化类</h2><h3 id="4-1-DllPlugin-amp-amp-DllReferencePlugin-amp-amp-autodll-webpack-plugin"><a href="#4-1-DllPlugin-amp-amp-DllReferencePlugin-amp-amp-autodll-webpack-plugin" class="headerlink" title="4.1 DllPlugin &amp;&amp; DllReferencePlugin &amp;&amp; autodll-webpack-plugin"></a>4.1 DllPlugin &amp;&amp; DllReferencePlugin &amp;&amp; autodll-webpack-plugin</h3><ul><li><code>dllPlugin</code>将模块预先编译，<code>DllReferencePlugin</code> 将预先编译好的模块关联到当前编译中，当 <code>webpack</code> 解析到这些模块时，会直接使用预先编译好的模块。</li><li><code>autodll-webpack-plugin</code> 相当于 <code>dllPlugin</code> 和 <code>DllReferencePlugin</code> 的简化版，其实本质也是使用 <code>dllPlugin &amp;&amp; DllReferencePlugin</code>，它会在第一次编译的时候将配置好的需要预先编译的模块编译在缓存中，第二次编译的时候，解析到这些模块就直接使用缓存，而不是去编译这些模块</li></ul><p><strong>dllPlugin 基本用法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> output = &#123;</span><br><span class="line">  filename: <span class="string">'[name].js'</span>,</span><br><span class="line">  library: <span class="string">'[name]_library'</span>,</span><br><span class="line">  path: <span class="string">'./vendor/'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    vendor: [<span class="string">'react'</span>, <span class="string">'react-dom'</span>]  <span class="comment">// 我们需要事先编译的模块，用entry表示</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: output,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.DllPlugin(&#123;  <span class="comment">// 使用dllPlugin</span></span><br><span class="line">      path: path.join(output.path, <span class="string">`<span class="subst">$&#123;output.filename&#125;</span>.json`</span>),</span><br><span class="line">      name: output.library <span class="comment">// 全局变量名， 也就是 window 下 的 [output.library]</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>DllReferencePlugin 基本用法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> manifest = path.resolve(process.cwd(), <span class="string">'vendor'</span>, <span class="string">'vendor.js.json'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">      manifest: <span class="built_in">require</span>(manifest), <span class="comment">// 引进dllPlugin编译的json文件</span></span><br><span class="line">      name: <span class="string">'vendor_library'</span> <span class="comment">// 全局变量名，与dllPlugin声明的一致</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>autodll-webpack-plugin 基本用法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> AutoDllPlugin(&#123;</span><br><span class="line">      inject: <span class="literal">true</span>, <span class="comment">// 与 html-webpack-plugin 结合使用，注入html中</span></span><br><span class="line">      filename: <span class="string">'[name].js'</span>,</span><br><span class="line">      entry: &#123;</span><br><span class="line">        vendor: [</span><br><span class="line">          <span class="string">'react'</span>,</span><br><span class="line">          <span class="string">'react-dom'</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-happypack-amp-amp-thread-loader"><a href="#4-2-happypack-amp-amp-thread-loader" class="headerlink" title="4.2 happypack &amp;&amp; thread-loader"></a>4.2 happypack &amp;&amp; thread-loader</h3><blockquote><p>多线程编译，加快编译速度，<code>thread-loader</code>不可以和 <code>mini-css-extract-plugin</code> 结合使用</p></blockquote><p><strong>happypack 基本用法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HappyPack = <span class="built_in">require</span>(<span class="string">'happypack'</span>);</span><br><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">'os'</span>);</span><br><span class="line"><span class="keyword">const</span> happyThreadPool = HappyPack.ThreadPool(&#123; <span class="attr">size</span>: os.cpus().length &#125;);</span><br><span class="line"><span class="keyword">const</span> happyLoaderId = <span class="string">'happypack-for-react-babel-loader'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123;</span><br><span class="line">      test: <span class="regexp">/\.jsx?$/</span>,</span><br><span class="line">      loader: <span class="string">'happypack/loader'</span>,</span><br><span class="line">      query: &#123;</span><br><span class="line">        id: happyLoaderId</span><br><span class="line">      &#125;,</span><br><span class="line">      include: [path.resolve(process.cwd(), <span class="string">'src'</span>)]</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [<span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">    id: happyLoaderId,</span><br><span class="line">    threadPool: happyThreadPool,</span><br><span class="line">    loaders: [<span class="string">'babel-loader'</span>]</span><br><span class="line">  &#125;)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>thread-loader 基本用法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        include: path.resolve(<span class="string">"src"</span>),</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">"thread-loader"</span>,</span><br><span class="line">          <span class="comment">// your expensive loader (e.g babel-loader)</span></span><br><span class="line">          <span class="string">"babel-loader"</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-hard-source-webpack-plugin-amp-amp-cache-loader"><a href="#4-3-hard-source-webpack-plugin-amp-amp-cache-loader" class="headerlink" title="4.3 hard-source-webpack-plugin &amp;&amp; cache-loader"></a>4.3 hard-source-webpack-plugin &amp;&amp; cache-loader</h3><blockquote><p>使用模块编译缓存，加快编译速度</p></blockquote><p><strong>hard-source-webpack-plugin 基本用法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HardSourceWebpackPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>cache-loader 基本用法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.ext$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">'cache-loader'</span>,</span><br><span class="line">          ...loaders</span><br><span class="line">        ],</span><br><span class="line">        include: path.resolve(<span class="string">'src'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、编译分析类"><a href="#五、编译分析类" class="headerlink" title="五、编译分析类"></a>五、编译分析类</h2><h3 id="5-1-webpack-bundle-analyzer"><a href="#5-1-webpack-bundle-analyzer" class="headerlink" title="5.1 webpack-bundle-analyzer"></a>5.1 webpack-bundle-analyzer</h3><blockquote><p>编译模块分析插件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> BundleAnalyzerPlugin(&#123;</span><br><span class="line">  analyzerMode: <span class="string">'server'</span>,</span><br><span class="line">  analyzerHost: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">  analyzerPort: <span class="number">8889</span>,</span><br><span class="line">  reportFilename: <span class="string">'report.html'</span>,</span><br><span class="line">  defaultSizes: <span class="string">'parsed'</span>,</span><br><span class="line">  generateStatsFile: <span class="literal">false</span>,</span><br><span class="line">  statsFilename: <span class="string">'stats.json'</span>,</span><br><span class="line">  statsOptions: <span class="literal">null</span>,</span><br><span class="line">  logLevel: <span class="string">'info'</span></span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><h3 id="5-2-stats-webpack-plugin-amp-amp-PrefetchPlugin"><a href="#5-2-stats-webpack-plugin-amp-amp-PrefetchPlugin" class="headerlink" title="5.2 stats-webpack-plugin &amp;&amp; PrefetchPlugin"></a>5.2 stats-webpack-plugin &amp;&amp; PrefetchPlugin</h3><blockquote><p><code>stats-webpack-plugin</code> 将构建的统计信息写入文件，该文件可在 <a href="http://webpack.github.io/analyse中上传进行编译分析，并根据分析结果，可使用" target="_blank" rel="noopener">http://webpack.github.io/analyse中上传进行编译分析，并根据分析结果，可使用</a> <code>PrefetchPlugin</code> 对部分模块进行预解析编译</p></blockquote><p><strong>stats-webpack-plugin 基本用法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> StatsPlugin(<span class="string">'stats.json'</span>, &#123;</span><br><span class="line">      chunkModules: <span class="literal">true</span>,</span><br><span class="line">      exclude: [<span class="regexp">/node_modules[\\\/]react/</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>PrefetchPlugin 基本用法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.PrefetchPlugin(<span class="string">'/web/'</span>, <span class="string">'app/modules/HeaderNav.jsx'</span>),</span><br><span class="line">    <span class="keyword">new</span> webpack.PrefetchPlugin(<span class="string">'/web/'</span>, <span class="string">'app/pages/FrontPage.jsx'</span>)</span><br><span class="line">];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-speed-measure-webpack-plugin"><a href="#5-3-speed-measure-webpack-plugin" class="headerlink" title="5.3 speed-measure-webpack-plugin"></a>5.3 speed-measure-webpack-plugin</h3><blockquote><p>统计编译过程中，各<code>loader</code>和<code>plugin</code>使用的时间</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> SpeedMeasurePlugin = <span class="built_in">require</span>(<span class="string">"speed-measure-webpack-plugin"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> smp = <span class="keyword">new</span> SpeedMeasurePlugin();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> webpackConfig = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> MyPlugin(),</span><br><span class="line">    <span class="keyword">new</span> MyOtherPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = smp.wrap(webpackConfig);</span><br></pre></td></tr></table></figure><p><img src="https://segmentfault.com/img/remote/1460000016816816?w=400&amp;h=421" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、功能类&quot;&gt;&lt;a href=&quot;#一、功能类&quot; class=&quot;headerlink&quot; title=&quot;一、功能类&quot;&gt;&lt;/a&gt;一、功能类&lt;/h2&gt;&lt;h3 id=&quot;1-1-html-webpack-plugin&quot;&gt;&lt;a href=&quot;#1-1-html-webpack-p
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="优化" scheme="http://blog.poetries.top/tags/%E4%BC%98%E5%8C%96/"/>
    
      <category term="webpack" scheme="http://blog.poetries.top/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>前端性能之Performance以及动画帧率(FPS)</title>
    <link href="http://blog.poetries.top/2018/11/20/performance-fps/"/>
    <id>http://blog.poetries.top/2018/11/20/performance-fps/</id>
    <published>2018-11-20T16:20:43.000Z</published>
    <updated>2018-11-28T12:50:39.021Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>Performance</code>是一个做前端性能监控离不开的<code>API</code>，最好在页面完全加载完成之后再使用，因为很多值必须在页面完全加载之后才能得到。最简单的办法是在<code>window.onload</code>事件中读取各种数据。</p></blockquote><h2 id="一、回顾页面加载过程"><a href="#一、回顾页面加载过程" class="headerlink" title="一、回顾页面加载过程"></a>一、回顾页面加载过程</h2><blockquote><p>要学习这套<code>API</code>的使用，先简单介绍下前端的基础知识</p></blockquote><h3 id="1-1-页面加载"><a href="#1-1-页面加载" class="headerlink" title="1.1 页面加载"></a>1.1 页面加载</h3><blockquote><p>一个页面的请求到响应再到显示出来，需要经过下面一些重要过程，当我们在浏览器输入一个<code>URL</code>或者说点击一个<code>URL</code>开始，会出现如下流程</p></blockquote><ul><li>页面准备</li><li>重定向：在<code>header</code>定义了重定向才会有这个过程，如果没有重定向，不会产生这个过程。</li><li><code>app cache</code>：会先检查这个域名是否有缓存，如果有缓存就不需要DNS解析域名。这里的<code>app</code>是值应用程序<code>application</code>，不指手机<code>app</code>。</li><li><code>DNS</code>解析：把域名解析成<code>IP</code>，如果直接用<code>ip</code>地址访问，不产生这个过程。</li><li><code>TCP</code>连接：<code>http</code>协议是经过<code>TCP</code>来传输的，所以产生一个<code>http</code>请求就会有<code>TCP connect</code>，但是依赖于长连接，不会产生这个过程。</li><li><code>request header</code>：请求头信息。</li><li><code>request body</code>：请求体信息，比如<code>get</code>请求是没有请求体信息的，所以没有这个过程，这就是为什么把头跟体分开写的原因。</li><li><code>response header</code>：响应头信息。</li><li><code>response body</code>：响应体信息。</li><li>解析<code>HTML</code>结构</li><li>加载外部脚本和样式表文件：正常来说<code>JS</code>、<code>css</code>都是外部加载的，当然有不正常的人啊，比如我。</li><li>解析并执行脚本代码</li><li>构建与解析<code>HTML DOM</code>树：这个过程可以去了解下<code>DOM</code>树是怎样的就明白啦。</li><li>加载外部图片</li><li>页面加载完成，显示出来啦</li></ul><h3 id="1-2-重定向分析"><a href="#1-2-重定向分析" class="headerlink" title="1.2 重定向分析"></a>1.2 重定向分析</h3><ul><li><code>app cach</code></li><li><code>DNS</code>解析</li><li><code>TCP</code>连接</li><li><code>request header</code></li><li>重定向</li><li><code>app cach</code></li><li><code>DNS</code>解析</li><li><code>TCP</code>连接</li><li><code>request header</code></li></ul><h2 id="二、performance"><a href="#二、performance" class="headerlink" title="二、performance"></a>二、performance</h2><h3 id="2-1-performance-timing"><a href="#2-1-performance-timing" class="headerlink" title="2.1 performance.timing"></a>2.1 performance.timing</h3><blockquote><p>这个API能帮我们得到整个页面请求的时间，如下图，在<code>Chrome</code>的<code>Console</code>是可以直接运行的</p></blockquote><p><img src="https://img-blog.csdn.net/20170316140524418" alt=""></p><p>先解释下这些时间都是代表什么</p><p><strong>timing 对象里边的数据比较多，梳理如下几个关键性的节点</strong></p><ul><li><code>fetchStart</code>：发起获取当前文档的时间点，我的理解是浏览器收到发起页面请求的时间点；</li><li><code>domainLookupStart</code>：返回浏览器开始<code>DNS</code>查询的时间，如果此请求没有<code>DNS</code>查询过程，如长连接、资源<code>cache</code>、甚至是本地资源等，那么就返回<code>fetchStart</code>的值；</li><li><code>domainLookupEnd</code>：返回浏览器结束<code>DNS</code>查询的时间，如果没有<code>DNS</code>查询过程，同上；</li><li><code>connectStart</code>：浏览器向服务器请求文档，开始建立连接的时间，如果此连接是一个长连接，或者无需与服务器连接（命中缓存），则返回<code>domainLookupEnd</code>的值；</li><li><code>connectEnd</code>：浏览器向服务器请求文档，建立连接成功的时间；</li><li><code>requestStart</code>：开始请求文档的时间（注意没有<code>requestEnd</code>）;</li><li><code>responseStart</code>：浏览器开始接收第一个字节数据的时间，数据可能来自于服务器、缓存、或本地资源；</li><li><code>unloadEventStart</code>：卸载上一个文档开始的时间；</li><li><code>unloadEventEnd</code>：卸载上一个文档结束的时间；</li><li><code>domLoading</code>：浏览器把<code>document.readyState</code>设置为<code>“loading”</code>的时间点，开始构建<code>dom</code>树的时间点；</li><li><code>responseEnd</code>：浏览器接收最后一个字节数据的时间，或连接被关闭的时间；</li><li><code>domInteractive</code>：浏览器把<code>document.readyState设</code>置为<code>“interactive”</code>的时间点，<code>DOM</code>树创建结束；</li><li><code>domContentLoadedEventStart</code>：文档发生<code>DOMContentLoaded</code>事件的时间；</li><li><code>domContentLoadedEventEnd</code>：文档的<code>DOMContentLoaded</code>事件结束的时间；</li><li><code>domComplete</code>：浏览器把<code>document.readyState</code>设置为<code>“complete”</code>的时间点；</li><li><code>loadEventStart</code>：文档触发<code>load</code>事件的时间；</li><li><code>loadEventEnd</code>：文档出发<code>load</code>事件结束后的时间</li></ul><blockquote><p>再来一张图，表示各阶段的开始与结束对应的时间</p></blockquote><p><img src="https://user-images.githubusercontent.com/8554143/33872196-d6c35844-df50-11e7-8bcc-1fdcac66ce64.png" alt=""></p><blockquote><p>从以上的分析，我们就可以得到一些时间的计算</p></blockquote><ul><li>准备新页面耗时：<code>fetchStart - navigationStart</code></li><li>重定向时间：<code>redirectEnd - redirectStart</code></li><li><code>App Cache</code>时间：<code>domainLookupStart - fetchStart</code></li><li><code>DNS</code>解析时间：<code>domainLookupEnd -domainLookupStart</code></li><li><code>TCP</code>连接时间：<code>connectEnd - connectStart</code></li><li><code>request</code>时间：<code>responseEnd - requestStart</code>这个计算是代表请求响应加起来的时间</li><li>请求完毕到<code>DOM</code>树加载：<code>domInteractive -responseEnd</code></li><li>构建与解析<code>DOM</code>树，加载资源时间：<code>domCompleter -domInteractive</code></li><li><code>load</code>时间：<code>loadEventEnd - loadEventStart</code></li><li>整个页面加载时间：<code>loadEventEnd -navigationStart</code></li><li>白屏时间：<code>responseStart-navigationStart</code></li></ul><h3 id="2-2-performance-getEntries"><a href="#2-2-performance-getEntries" class="headerlink" title="2.2 performance.getEntries()"></a>2.2 performance.getEntries()</h3><blockquote><p>这个API能帮我们获得资源的请求时间，包括JS、CSS、图片等</p></blockquote><p><img src="https://img-blog.csdn.net/20170316155201356" alt=""></p><blockquote><p>如上图可以看到这个API请求返回的是一个数组，这个数组包括整个页面所有的资源加载，上图打开了一个其中一个资源，可以看到如下信息</p></blockquote><ul><li><code>entryType</code>：类型为<code>resource</code></li><li><code>name</code>：资源的<code>url</code></li><li><code>initiatorType</code>：资源是<code>link</code></li><li>资源时间：<code>duration</code>的值，是<code>responseEnd - startTime</code>得到的</li></ul><h3 id="2-3-performance-memory"><a href="#2-3-performance-memory" class="headerlink" title="2.3 performance.memory"></a>2.3 performance.memory</h3><blockquote><p>这个API主要是得到浏览器内存情况</p></blockquote><ul><li><code>jsHeapSizeLimit</code>：内存大小限制</li><li><code>totalJSHeapSize</code>：可使用的内容</li><li><code>userdJSHeapSize</code>：已使用的内容</li></ul><blockquote><p><code>userdJSHeapSize</code>表示所有被使用的JS堆栈内存，<code>totalJSHeapSize</code>可使用的JS堆栈内存，如果<code>userdJSHeapSize</code>的值大于<code>totalJSHeapSize</code>，就可能出现内存泄漏</p></blockquote><p><img src="https://img-blog.csdn.net/20170316155226893" alt=""></p><h2 id="三、动画帧率FPS"><a href="#三、动画帧率FPS" class="headerlink" title="三、动画帧率FPS"></a>三、动画帧率FPS</h2><h3 id="3-1-流畅动画的标准"><a href="#3-1-流畅动画的标准" class="headerlink" title="3.1 流畅动画的标准"></a>3.1 流畅动画的标准</h3><blockquote><p><code>FPS</code> 表示的是每秒钟画面更新次数。我们平时所看到的连续画面都是由一幅幅静止画面组成的，每幅画面称为一帧，<code>FPS</code> 是描述“帧”变化速度的物理量</p></blockquote><ul><li>理论上说，<code>FPS</code> 越高，动画会越流畅，目前大多数设备的屏幕刷新率为 <code>60</code> 次/秒，所以通常来讲 <code>FPS</code> 为 <code>60 frame/s</code> 时动画效果最好，也就是每帧的消耗时间为 <code>16.6</code>7ms</li></ul><p><strong>不同帧率的体验</strong></p><ul><li>帧率能够达到 <code>50 ～ 60 FPS</code> 的动画将会相当流畅，让人倍感舒适；</li><li>帧率在 <code>30 ～ 50 FPS</code> 之间的动画，因各人敏感程度不同，舒适度因人而异；</li><li>帧率在 <code>30 FPS</code> 以下的动画，让人感觉到明显的卡顿和不适感；</li><li>帧率波动很大的动画，亦会使人感觉到卡顿</li></ul><h3 id="3-2-获取我们页面动画当前的-FPS-值"><a href="#3-2-获取我们页面动画当前的-FPS-值" class="headerlink" title="3.2 获取我们页面动画当前的 FPS 值"></a>3.2 获取我们页面动画当前的 FPS 值</h3><blockquote><p>那么我们该如何准确的获取我们页面动画当前的 FPS 值呢？</p></blockquote><h4 id="3-2-1-方法一-借助-Chrome-开发者工具"><a href="#3-2-1-方法一-借助-Chrome-开发者工具" class="headerlink" title="3.2.1 方法一 借助 Chrome 开发者工具"></a>3.2.1 方法一 借助 Chrome 开发者工具</h4><blockquote><p><code>Chrome</code> 提供给开发者的功能十分强大，在开发者工具中，我们进行如下选择调出 <code>FPS meter</code> 选项：</p></blockquote><p><img src="https://user-images.githubusercontent.com/8554143/33823997-e25d42dc-de97-11e7-92e3-8521ede019df.png" alt=""></p><blockquote><p>通过这个按钮，可以开启页面实时 <code>Frame Rate</code> (帧率) 观测及页面 <code>GPU</code> 使用率</p></blockquote><p><strong>但是这个方法缺点太多了</strong></p><ul><li>这个只能一次观测一到几个页面，而且需要人工实时观测</li><li>数据只能是主观感受，并没有一个十分精确的数据不断上报或者被收集</li><li>因此，我们需要更加智能的方法。</li></ul><h4 id="3-2-2-方法二-借助-Frame-Timing-API"><a href="#3-2-2-方法二-借助-Frame-Timing-API" class="headerlink" title="3.2.2 方法二 借助 Frame Timing API"></a>3.2.2 方法二 借助 Frame Timing API</h4><blockquote><p>Blink 内核早期架构</p></blockquote><ul><li>以 <code>Chrome</code> 浏览器内核 <code>Blink</code> 渲染页面为例。对早期的 <code>Chrome</code> 浏览器而言，每个页面 <code>Tab</code> 对应一个独立的 <code>renderer</code> 进程，<code>Renderer</code>进程中包含了主线程和合成线程。早期 <code>Chrome</code> 内核架构</li></ul><p><img src="https://user-images.githubusercontent.com/8554143/33830985-4ab23108-deb1-11e7-89ed-6b9f60dcb2fd.jpg" alt=""></p><p><strong>其中，主线程主要负责</strong>：</p><ul><li><code>Javascript</code> 的计算与执行</li><li><code>CSS</code> 样式计算</li><li><code>Layout</code> 计算</li><li>将页面元素绘制成位图（<code>paint</code>），也就是光栅化（<code>Raster</code>）</li><li>将位图给合成线程</li></ul><p><strong>合成线程则主要负责</strong>：</p><ul><li>将位图(<code>GraphicsLayer</code> 层)以纹理(<code>texture</code>)的形式上传给 <code>GPU</code></li><li>计算页面的可见部分和即将可见部分（滚动）</li><li><code>CSS</code> 动画处理</li><li>通知 GPU 绘制位图到屏幕上</li></ul><blockquote><p>其实知道了这两个线程之后，下一个概念是厘清 <code>CSS</code> 动画与 <code>JS</code> 动画的细微区别（当然它们都是 Web 动画）</p></blockquote><p><strong>JS 动画与 CSS 动画的细微区别</strong></p><ul><li>对于 <code>JS</code>动画而言，它们运行时的帧率即是主线程和合成线程加起来消耗的时间。对于流畅动画而言，我们希望它们每一帧的耗时保持在 <code>16.67ms</code> 之内;</li><li>而对于 <code>CSS</code> 动画而言，由于其流程不受主线程的影响，所以希望能得到合成线程的消耗的时间，而合成线程的绘制频率也反映了滚动和 CSS 动画的流程性。</li></ul><blockquote><p>上面主要想得出的一个结论是。如果我们能够知道主线程和合成线程每一帧消耗的时间，那么我们就能大致得出对应的 Web 动画的帧率。那么上面说到的 <code>Frame Timing API</code> 是否可以帮助我们拿到这个时间点呢</p></blockquote><p><strong>什么是 Frame Timing API ？</strong></p><blockquote><p><code>Frame Timing API</code> 是 <code>Web Performance Timing API</code> 标准中的其中一位成员。<code>Web Performance Timing API</code> 是 W3C 推出的一套性能 API 标准，用于帮助开发者对网站各方面的性能进行精确的分析与控制，提升 Web 网站性能</p></blockquote><p>它包含许多子类 API，完成不同的功能，大致如下</p><p><img src="https://user-images.githubusercontent.com/8554143/33871575-0799a66a-df4e-11e7-85fd-9b40d43161da.png" alt=""></p><p>怎么使用呢？以 <code>Navigation Timing</code>, <code>Performance Timeline</code>, <code>Resource Timing</code> 为例子，对于兼容它的浏览器，它以只读属性的形式对外暴露挂载在 <code>window.performance</code> 上。</p><p>我们再来回顾这张图</p><p><img src="https://user-images.githubusercontent.com/8554143/33872196-d6c35844-df50-11e7-8bcc-1fdcac66ce64.png" alt=""></p><blockquote><p>通过这张图以及上面的 <code>window.performance.timing</code>，我们就可以轻松的统计出页面每个重要节点的耗时，这就是 <code>Web Performance Timing API</code> 的强大之处，感兴趣的可以详细去研究研究，使用在页面统计上</p></blockquote><p><strong>Frame Timing API 示意</strong></p><blockquote><p>终于可以回归正题，借助 <code>Web Performance Timing API</code> 中的<code>Frame Timing API</code>，可以轻松的拿到每一帧中，主线程以及合成线程的时间。或者更加容易，直接拿到每一帧的耗时</p></blockquote><p>获取 <code>Render</code> 主线程和合成线程的记录，每条记录包含的信息基本如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var rendererEvents = window.performance.getEntriesByType(&quot;renderer&quot;);</span><br><span class="line">var compositeThreadEvents = window.performance.getEntriesByType(&quot;composite&quot;);</span><br></pre></td></tr></table></figure><p>或者是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ar observer = <span class="keyword">new</span> PerformanceObserver(<span class="function"><span class="keyword">function</span>(<span class="params">list</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> perfEntries = list.getEntries();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; perfEntries.length; i++) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"frame: "</span>, perfEntries[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// subscribe to Frame Timing</span></span><br><span class="line">observer.observe(&#123;<span class="attr">entryTypes</span>: [<span class="string">'frame'</span>]&#125;);</span><br></pre></td></tr></table></figure><p>每条记录包含的信息基本如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  sourceFrameNumber: <span class="number">120</span>,</span><br><span class="line">  startTime: <span class="number">1342.549374253</span></span><br><span class="line">  cpuTime: <span class="number">6.454313323</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>每个记录都包括唯一的 <code>Frame Number</code>、<code>Frame</code> 开始时间以及 <code>cpuTime</code> 时间。通过计算每一条记录的 <code>startTime</code> ，我们就可以算出每两帧间的间隔，从而得到动画的帧率是否能够达到 <code>60 FPS</code></p></blockquote><p><strong>看看 Web Performance Timing API 整体的兼容性</strong></p><p><img src="https://user-images.githubusercontent.com/8554143/33873788-4ad802e2-df57-11e7-9174-13913bcaa9b5.png" alt=""></p><blockquote><p><code>Frame Timing API</code> 虽好，但是，现在 <code>Frame Timing API</code> 的兼容性不算很友好，额，不友好到什么程度呢。还没有任何浏览器支持，处于实验性阶段，属于面向未来编程</p></blockquote><h4 id="3-2-3-方法三-借助-requestAnimationFrame-API"><a href="#3-2-3-方法三-借助-requestAnimationFrame-API" class="headerlink" title="3.2.3 方法三 借助 requestAnimationFrame API"></a>3.2.3 方法三 借助 requestAnimationFrame API</h4><blockquote><p>从上面的介绍，我们得知，如果我们可以到得到每一帧中的固定一个时间点，那么两者相减，也能够近似得到一帧所消耗的时间</p></blockquote><p>这次，我们借助兼容性不错的 <code>requestAnimationFrame API</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 语法</span><br><span class="line">window.requestAnimationFrame(callback);</span><br></pre></td></tr></table></figure><ul><li><code>requestAnimationFrame</code> 大家应该都不陌生，方法告诉浏览器您希望执行动画并请求浏览器调用指定的函数在下一次重绘之前更新动画。</li><li>当你准备好更新屏幕画面时你就应用此方法。这会要求你的动画函数在浏览器下次重绘前执行。回调的次数常是每秒 <code>60</code> 次，大多数浏览器通常匹配 <code>W3C</code> 所建议的刷新率</li></ul><p><strong>使用 requestAnimationFrame 计算 FPS 原理</strong></p><blockquote><p>原理是，正常而言 <code>requestAnimationFrame</code> 这个方法在一秒内会执行 <code>60</code> 次，也就是不掉帧的情况下。假设动画在时间 <code>A</code> 开始执行，在时间 <code>B</code> 结束，耗时 <code>x ms</code>。而中间 <code>requestAnimationFrame</code> 一共执行了 <code>n</code> 次，则此段动画的帧率大致为：<code>n / (B - A)</code></p></blockquote><p>核心代码如下，能近似计算每秒页面帧率，以及我们额外记录一个 <code>allFrameCount</code>，用于记录 <code>rAF</code> 的执行次数，用于计算每次动画的帧率 ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rAF = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="built_in">window</span>.requestAnimationFrame ||</span><br><span class="line">        <span class="built_in">window</span>.webkitRequestAnimationFrame ||</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">window</span>.setTimeout(callback, <span class="number">1000</span> / <span class="number">60</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">&#125;();</span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> frame = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> allFrameCount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> lastTime = <span class="built_in">Date</span>.now();</span><br><span class="line"><span class="keyword">var</span> lastFameTime = <span class="built_in">Date</span>.now();</span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> loop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> now = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="keyword">var</span> fs = (now - lastFameTime);</span><br><span class="line">    <span class="keyword">var</span> fps = <span class="built_in">Math</span>.round(<span class="number">1000</span> / fs);</span><br><span class="line">  </span><br><span class="line">    lastFameTime = now;</span><br><span class="line">    <span class="comment">// 不置 0，在动画的开头及结尾记录此值的差值算出 FPS</span></span><br><span class="line">    allFrameCount++;</span><br><span class="line">    frame++;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (now &gt; <span class="number">1000</span> + lastTime) &#123;</span><br><span class="line">        <span class="keyword">var</span> fps = <span class="built_in">Math</span>.round((frame * <span class="number">1000</span>) / (now - lastTime));</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;</span> 1S内 FPS：`</span>, fps);</span><br><span class="line">        frame = <span class="number">0</span>;</span><br><span class="line">        lastTime = now;</span><br><span class="line">    &#125;;</span><br><span class="line">  </span><br><span class="line">    rAF(loop);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">loop();</span><br></pre></td></tr></table></figure><p>寻找一个有动画不断运行的页面进行测试，可以看到代码运行如下：</p><p><img src="https://user-images.githubusercontent.com/8554143/33877304-eae6fddc-df62-11e7-8d5f-8674dba3d1f9.png" alt=""></p><ul><li>使用了我之前制作的一个页面进行了测试，使用<code>Chrome</code> 同时调出页面的 <code>FPS meter</code>，对比两边的实时 <code>FPS</code> 值，基本吻合。</li><li>测试页面，<code>Solar System</code>。你可以将上面的代码贴到这个页面的 <code>console</code> 中，测试一下数据</li></ul><p><img src="https://user-images.githubusercontent.com/8554143/33877626-ed17f3c6-df63-11e7-8bae-40b9512c2645.gif" alt=""></p><ul><li>对比右上角的 <code>Frame Rate</code>，帧率基本一致。在大部分情况下，这种方法可以很好的得出 Web 动画的帧率。</li><li>如果我们需要统计某个特定动画过程的帧率，只需要在动画开始和结尾两处分别记录 <code>allFrameCount</code> 这个数值大小，再除以中间消耗的时间，也可以得出特定动画过程的 <code>FPS</code> 值。</li><li>值得注意的是，这个方法计算的结果和真实的帧率肯定是存在误差的，因为它是将每两次主线程执行 <code>javascript</code> 的时间间隔当成一帧，而非上面说的主线程加合成线程所消耗的时间为一帧。但是对于现阶段而言，算是一种可取的方法</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Performance&lt;/code&gt;是一个做前端性能监控离不开的&lt;code&gt;API&lt;/code&gt;，最好在页面完全加载完成之后再使用，因为很多值必须在页面完全加载之后才能得到。最简单的办法是在&lt;code&gt;window.onload&lt;/co
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="FPS" scheme="http://blog.poetries.top/tags/FPS/"/>
    
      <category term="Performance" scheme="http://blog.poetries.top/tags/Performance/"/>
    
  </entry>
  
  <entry>
    <title>Hexo接入DaoVoice实现在线聊天功能</title>
    <link href="http://blog.poetries.top/2018/11/20/hexo-chat/"/>
    <id>http://blog.poetries.top/2018/11/20/hexo-chat/</id>
    <published>2018-11-20T10:40:08.000Z</published>
    <updated>2018-11-28T12:50:39.001Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>DaoVoice 可以提供在线联系的功能，我们可以借助于此在自己的站点上接入了此功能</p></blockquote><p>效果</p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-257a8e64cd4f5c3f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="一、注册"><a href="#一、注册" class="headerlink" title="一、注册"></a>一、注册</h2><blockquote><p>首先需要注册一个 <code>DaoVoice</code>，点击注册 <a href="http://dashboard.daovoice.io/get-started?invite_code=7f3d6e70" target="_blank" rel="noopener">http://dashboard.daovoice.io/get-started?invite_code=7f3d6e70</a></p></blockquote><p>注册成功后，进入后台控制台，进入到 应用设置–&gt;安装到网站 页面，可以得到一个 <code>app_id</code></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-62c546cf2cbcb1b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="二、设置"><a href="#二、设置" class="headerlink" title="二、设置"></a>二、设置</h2><blockquote><p>以 fexo 主题为例，打开 themes//layout/_partials/head.ejs 文件中添加如下代码，位置随意</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.daovoice %&#125;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">i,s,o,g,r,a,m</span>)</span>&#123;i[<span class="string">"DaoVoiceObject"</span>]=r;i[r]=i[r]||<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;(i[r].q=i[r].q||[]).push(<span class="built_in">arguments</span>)&#125;,i[r].l=<span class="number">1</span>*<span class="keyword">new</span> <span class="built_in">Date</span>();a=s.createElement(o),m=s.getElementsByTagName(o)[<span class="number">0</span>];a.async=<span class="number">1</span>;a.src=g;a.charset=<span class="string">"utf-8"</span>;m.parentNode.insertBefore(a,m)&#125;)(<span class="built_in">window</span>,<span class="built_in">document</span>,<span class="string">"script"</span>,(<span class="string">'https:'</span> == <span class="built_in">document</span>.location.protocol ? <span class="string">'https:'</span> : <span class="string">'http:'</span>) + <span class="string">"//widget.daovoice.io/widget/0f81ff2f.js"</span>,<span class="string">"daovoice"</span>)</span><br><span class="line">  daovoice(<span class="string">'init'</span>, &#123;</span><br><span class="line">      app_id: <span class="string">"&#123;&#123;theme.daovoice_app_id&#125;&#125;"</span></span><br><span class="line">    &#125;);</span><br><span class="line">  daovoice(<span class="string">'update'</span>);</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>在主题配置文件 <code>_config.yml</code>，添加如下代码</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Online contact </span></span><br><span class="line">daovoice: <span class="literal">true</span></span><br><span class="line">daovoice_app_id: <span class="comment">#这里输入前面获取的app_id</span></span><br></pre></td></tr></table></figure><blockquote><p>应用设置–&gt; 聊天设置修改主题</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-b1960b6a1ae41a5d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>也可以绑定微信</p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-4eb3443dde9b8704.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;DaoVoice 可以提供在线联系的功能，我们可以借助于此在自己的站点上接入了此功能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;效果&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Hexo" scheme="http://blog.poetries.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>webpack打包结果依赖分析</title>
    <link href="http://blog.poetries.top/2018/11/20/webpack-bundleAnalyzer/"/>
    <id>http://blog.poetries.top/2018/11/20/webpack-bundleAnalyzer/</id>
    <published>2018-11-20T09:40:08.000Z</published>
    <updated>2018-11-28T12:50:39.025Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、使用webpack-bundle-analyzer插件分析"><a href="#一、使用webpack-bundle-analyzer插件分析" class="headerlink" title="一、使用webpack-bundle-analyzer插件分析"></a>一、使用webpack-bundle-analyzer插件分析</h2><p><strong>安装插件</strong></p><blockquote><p><a href="https://www.npmjs.com/package/webpack-bundle-analyzer" target="_blank" rel="noopener">https://www.npmjs.com/package/webpack-bundle-analyzer</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack-bundle-analyzer –save-dev</span><br></pre></td></tr></table></figure><p><strong>配置</strong></p><blockquote><p>在<code>package.json中</code></p></blockquote><p>传入环境变量<code>ANALYZE</code>，最后<code>process.env.ANALYZE</code>来读取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;build&quot;: &quot;node scripts/build.js&quot;,</span><br><span class="line">  &quot;analyze&quot;: &quot;cross-env ANALYZE=1 npm run build&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在<code>build/webpack.prod.config.js</code>的<code>plugin</code>后面加上判断</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">plugins.concat(process.env.ANALYZE?[</span><br><span class="line">    <span class="keyword">new</span> BundleAnalyzerPlugin(&#123;</span><br><span class="line">    <span class="comment">//  可以是`server`，`static`或`disabled`。</span></span><br><span class="line">    <span class="comment">//  在`server`模式下，分析器将启动HTTP服务器来显示软件包报告。</span></span><br><span class="line">    <span class="comment">//  在“静态”模式下，会生成带有报告的单个HTML文件。</span></span><br><span class="line">    <span class="comment">//  在`disabled`模式下，你可以使用这个插件来将`generateStatsFile`设置为`true`来生成Webpack Stats JSON文件。</span></span><br><span class="line">    analyzerMode: <span class="string">'server'</span>,</span><br><span class="line">    <span class="comment">//  将在“服务器”模式下使用的主机启动HTTP服务器。</span></span><br><span class="line">    analyzerHost: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">    <span class="comment">//  将在“服务器”模式下使用的端口启动HTTP服务器。</span></span><br><span class="line">    analyzerPort: <span class="number">8888</span>,</span><br><span class="line">    <span class="comment">//  路径捆绑，将在`static`模式下生成的报告文件。</span></span><br><span class="line">    <span class="comment">//  相对于捆绑输出目录。</span></span><br><span class="line">    reportFilename: <span class="string">'report.html'</span>,</span><br><span class="line">    <span class="comment">//  模块大小默认显示在报告中。</span></span><br><span class="line">    <span class="comment">//  应该是`stat`，`parsed`或者`gzip`中的一个。</span></span><br><span class="line">    <span class="comment">//  有关更多信息，请参见“定义”一节。</span></span><br><span class="line">    defaultSizes: <span class="string">'parsed'</span>,</span><br><span class="line">    <span class="comment">//  在默认浏览器中自动打开报告</span></span><br><span class="line">    openAnalyzer: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">//  如果为true，则Webpack Stats JSON文件将在bundle输出目录中生成</span></span><br><span class="line">    generateStatsFile: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">//  如果`generateStatsFile`为`true`，将会生成Webpack Stats JSON文件的名字。</span></span><br><span class="line">    <span class="comment">//  相对于捆绑输出目录。</span></span><br><span class="line">    statsFilename: <span class="string">'stats.json'</span>,</span><br><span class="line">    <span class="comment">//  stats.toJson（）方法的选项。</span></span><br><span class="line">    <span class="comment">//  例如，您可以使用`source：false`选项排除统计文件中模块的来源。</span></span><br><span class="line">    <span class="comment">//  在这里查看更多选项：https：  //github.com/webpack/webpack/blob/webpack-1/lib/Stats.js#L21</span></span><br><span class="line">    statsOptions: <span class="literal">null</span>,</span><br><span class="line">    logLevel: <span class="string">'info'</span> <span class="comment">// 日志级别。可以是'信息'，'警告'，'错误'或'沉默'。</span></span><br><span class="line">  &#125;)</span><br><span class="line">  ]:[])</span><br></pre></td></tr></table></figure><p> <strong>启动</strong></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run analyze</span><br></pre></td></tr></table></figure><blockquote><p>在对应地址后面添加端口<code>8888</code>，即可得到一个可视化模块大小界面</p></blockquote><p> <img src="https://upload-images.jianshu.io/upload_images/1480597-1d25e48d13694226.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>这个插件就是从<code>stats.json</code>中获取<code>chunks</code>然后最终使用<code>Canvas</code>画图。具体代码位于<code>analyzer.js</code>中的<code>getViewerData</code>方法</p></blockquote><h2 id="二、使用官方提供的在线工具"><a href="#二、使用官方提供的在线工具" class="headerlink" title="二、使用官方提供的在线工具"></a>二、使用官方提供的在线工具</h2><blockquote><p><code>webpack --proile --json &gt; stats.json</code> 生成一份<code>json</code>文件上传到<a href="http://webpack.github.io/analyse" target="_blank" rel="noopener">http://webpack.github.io/analyse</a> 分析</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-530d438145397ca8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、使用webpack-bundle-analyzer插件分析&quot;&gt;&lt;a href=&quot;#一、使用webpack-bundle-analyzer插件分析&quot; class=&quot;headerlink&quot; title=&quot;一、使用webpack-bundle-analyzer插件分
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="优化" scheme="http://blog.poetries.top/tags/%E4%BC%98%E5%8C%96/"/>
    
      <category term="webpack" scheme="http://blog.poetries.top/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客接入gitalk评论系统</title>
    <link href="http://blog.poetries.top/2018/11/20/hexo-comment/"/>
    <id>http://blog.poetries.top/2018/11/20/hexo-comment/</id>
    <published>2018-11-20T09:09:08.000Z</published>
    <updated>2018-11-28T12:50:39.001Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>官方文档 <a href="https://github.com/gitalk/gitalk/blob/master/readme-cn.md" target="_blank" rel="noopener">https://github.com/gitalk/gitalk/blob/master/readme-cn.md</a></p></blockquote><h2 id="一、申请GitHub-Application"><a href="#一、申请GitHub-Application" class="headerlink" title="一、申请GitHub Application"></a>一、申请GitHub Application</h2><blockquote><p><a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">https://github.com/settings/applications/new</a></p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-3dd76fc4b2d0cfe7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li><code>Application name</code>： # 应用名称，随意</li><li><code>Homepage URL</code>： # 网站URL，如<a href="http://blog.poetries.top">http://blog.poetries.top</a></li><li><code>Application description</code> # 描述，随意</li><li><code>Authorization callback URL</code>：# 网站URL，<a href="http://blog.poetries.top">http://blog.poetries.top</a></li></ul><blockquote><p>点击注册后，页面跳转如下，其中<code>Client ID</code>和<code>Client Secret</code>在后面的配置中需要用到，到时复制粘贴即可</p></blockquote><h2 id="二、fexo配置主题"><a href="#二、fexo配置主题" class="headerlink" title="二、fexo配置主题"></a>二、fexo配置主题</h2><p>这里以我个人博客的主题来配置</p><blockquote><p><code>themes/fexo/layout/_partial/component/</code>新建一个<code>gitalk.ejs</code></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">page.comments</span> &amp;&amp; <span class="attr">theme.gitalk.enable</span>)&#123; %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"gitalk-container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://unpkg.com/gitalk/dist/gitalk.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/gitalk/dist/gitalk.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> gitalk = <span class="keyword">new</span> Gitalk(&#123;</span></span><br><span class="line"><span class="javascript">        clientID: <span class="string">'&lt;%=theme.gitalk.ClientID%&gt;'</span>,</span></span><br><span class="line"><span class="javascript">        clientSecret: <span class="string">'&lt;%=theme.gitalk.ClientSecret%&gt;'</span>,</span></span><br><span class="line"><span class="javascript">        repo: <span class="string">'&lt;%=theme.gitalk.repo%&gt;'</span>,</span></span><br><span class="line"><span class="javascript">        owner: <span class="string">'&lt;%=theme.gitalk.githubID%&gt;'</span>,</span></span><br><span class="line"><span class="javascript">        admin: [<span class="string">'&lt;%=theme.gitalk.adminUser%&gt;'</span>],</span></span><br><span class="line"><span class="undefined">        id: location.pathname,</span></span><br><span class="line"><span class="javascript">        distractionFreeMode: <span class="string">'&lt;%=theme.gitalk.distractionFreeMode%&gt;'</span></span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="javascript">      gitalk.render(<span class="string">'gitalk-container'</span>)           </span></span><br><span class="line"><span class="undefined">     </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在<code>themes/fexo/layout/_partial/component/comments.ejs</code>中加入</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fexo-comments &lt;%= className %&gt;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">disqus</span>') %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">duoshuo</span>') %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">gitalk</span>') %&gt;</span> <span class="comment">&lt;!-- 加入上面新建的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在<code>themes/fexo/layout/_partial/article.ejs</code>中的article文章后面加入 </p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用gitalk作为评论系统 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">gitalk</span>') %&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>/static/css/style.css</code>中加入</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**gitalk css**/</span></span><br><span class="line"><span class="selector-class">.gt-header</span> <span class="selector-tag">a</span>, <span class="selector-class">.gt-comments</span> <span class="selector-tag">a</span>, <span class="selector-class">.gt-popup</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.gt-container</span> <span class="selector-class">.gt-popup</span> <span class="selector-class">.gt-action</span><span class="selector-class">.is--active</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0.7em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在主题配置文件<code>_config.yml</code>加入</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 评论配置</span></span><br><span class="line">gitalk:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  githubID: poetries</span><br><span class="line">  repo: poetries.github.io   <span class="comment"># 例：poetries.github.io</span></span><br><span class="line">  owner: poetries</span><br><span class="line">  ClientID: <span class="string">''</span></span><br><span class="line">  ClientSecret: <span class="string">''</span></span><br><span class="line">  adminUser: poetries <span class="comment">#指定可初始化评论账户</span></span><br><span class="line">  distractionFreeMode: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>  然后回到文章页面，刷新页面后授权初始化就看到了</p><h2 id="三、next主题配置"><a href="#三、next主题配置" class="headerlink" title="三、next主题配置"></a>三、next主题配置</h2><blockquote><p>新建<code>/layout/_third-party/comments/gitalk.swig</code>文件，并添加内容</p></blockquote>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  &#123;% if page.comments &amp;&amp; theme.gitalk.enable %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://unpkg.com/gitalk/dist/gitalk.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/gitalk/dist/gitalk.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> gitalk = <span class="keyword">new</span> Gitalk(&#123;</span></span><br><span class="line"><span class="javascript">          clientID: <span class="string">'&#123;&#123; theme.gitalk.ClientID &#125;&#125;'</span>,</span></span><br><span class="line"><span class="javascript">          clientSecret: <span class="string">'&#123;&#123; theme.gitalk.ClientSecret &#125;&#125;'</span>,</span></span><br><span class="line"><span class="javascript">          repo: <span class="string">'&#123;&#123; theme.gitalk.repo &#125;&#125;'</span>,</span></span><br><span class="line"><span class="javascript">          owner: <span class="string">'&#123;&#123; theme.gitalk.githubID &#125;&#125;'</span>,</span></span><br><span class="line"><span class="javascript">          admin: [<span class="string">'&#123;&#123; theme.gitalk.adminUser &#125;&#125;'</span>],</span></span><br><span class="line"><span class="undefined">          id: location.pathname,</span></span><br><span class="line"><span class="javascript">          distractionFreeMode: <span class="string">'&#123;&#123; theme.gitalk.distractionFreeMode &#125;&#125;'</span></span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="javascript">        gitalk.render(<span class="string">'gitalk-container'</span>)           </span></span><br><span class="line"><span class="undefined">       </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>修改<code>/layout/_partials/comments.swig</code>，添加内容如下，与前面的<code>elseif</code>同一级别上</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% elseif theme.gitalk.enable %&#125;</span><br><span class="line"> &lt;div id=&quot;gitalk-container&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><blockquote><p>修改<code>layout/_third-party/comments/index.swig</code>，在最后一行添加内容：</p></blockquote> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include &apos;gitalk.swig&apos; %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>新建<code>/source/css/_common/components/third-party/gitalk.styl</code>文件，添加内容：</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.gt-header</span> <span class="selector-tag">a</span>, <span class="selector-class">.gt-comments</span> <span class="selector-tag">a</span>, <span class="selector-class">.gt-popup</span> <span class="selector-tag">a</span></span><br><span class="line">  <span class="selector-tag">border-bottom</span>: <span class="selector-tag">none</span>;</span><br><span class="line"><span class="selector-class">.gt-container</span> <span class="selector-class">.gt-popup</span> <span class="selector-class">.gt-action</span><span class="selector-class">.is--active</span><span class="selector-pseudo">:before</span></span><br><span class="line">  <span class="selector-tag">top</span>: 0<span class="selector-class">.7em</span>;</span><br></pre></td></tr></table></figure><blockquote><p>修改<code>/source/css/_common/components/third-party/third-party.styl</code>，在最后一行上添加内容，引入样式</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@import &quot;gitalk&quot;;</span><br></pre></td></tr></table></figure><blockquote><p>在主题配置文件<code>next/_config.yml</code>中添加如下内容</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 评论配置</span></span><br><span class="line">gitalk:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  githubID: poetries</span><br><span class="line">  repo: poetries.github.io   <span class="comment"># 例：poetries.github.io</span></span><br><span class="line">  owner: poetries</span><br><span class="line">  ClientID: <span class="string">''</span></span><br><span class="line">  ClientSecret: <span class="string">''</span></span><br><span class="line">  adminUser: poetries <span class="comment">#指定可初始化评论账户</span></span><br><span class="line">  distractionFreeMode: <span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;官方文档 &lt;a href=&quot;https://github.com/gitalk/gitalk/blob/master/readme-cn.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/g
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Hexo" scheme="http://blog.poetries.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>移动端优化篇</title>
    <link href="http://blog.poetries.top/2018/11/20/mobile-opitize/"/>
    <id>http://blog.poetries.top/2018/11/20/mobile-opitize/</id>
    <published>2018-11-20T07:40:15.000Z</published>
    <updated>2018-11-28T12:50:39.017Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://image-static.segmentfault.com/462/322/462322984-553e3da07b565_articlex" alt=""></p><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><ul><li><code>PC</code>优化手段在<code>Mobile</code>侧同样适用</li><li>在<code>Mobile</code>侧我们提出三秒种渲染完成首屏指标</li><li>基于第二点，首屏加载<code>3</code>秒完成或使用<code>Loading</code></li><li>基于联通3G网络平均<code>338KB/s(2.71Mb/s</code>），所以首屏资源不应超过<code>1014KB</code></li><li><code>Mobile</code>侧因手机配置原因，除加载外渲染速度也是优化重点</li><li>基于第五点，要合理处理代码减少渲染损耗</li><li>基于第二、第五点，所有影响首屏加载和渲染的代码应在处理逻辑中后置</li><li>加载完成后用户交互使用时也需注意性能</li></ul><h2 id="二、加载优化"><a href="#二、加载优化" class="headerlink" title="二、加载优化"></a>二、加载优化</h2><blockquote><p>加载过程是最为耗时的过程，可能会占到总耗时的<code>80%</code>时间，因此是优化的重点</p></blockquote><h3 id="2-1-缓存"><a href="#2-1-缓存" class="headerlink" title="2.1 缓存"></a>2.1 缓存</h3><blockquote><p>使用缓存可以减少向服务器的请求数，节省加载时间，所以所有静态资源都要在服务器端设置缓存，并且尽量使用长<code>Cache</code>（长<code>Cache</code>资源的更新可使用时间戳）</p></blockquote><h3 id="2-2-压缩HTML、CSS、JavaScript"><a href="#2-2-压缩HTML、CSS、JavaScript" class="headerlink" title="2.2 压缩HTML、CSS、JavaScript"></a>2.2 压缩HTML、CSS、JavaScript</h3><blockquote><p>减少资源大小可以加快网页显示速度，所以要对<code>HTML</code>、<code>CSS</code>、<code>JavaScript</code>等进行代码压缩，并在服务器端设置<code>GZip</code></p></blockquote><ul><li>a） 压缩（例如，多余的空格、换行符和缩进）</li><li>b） 启用<code>GZip</code></li></ul><h3 id="2-3-无阻塞"><a href="#2-3-无阻塞" class="headerlink" title="2.3 无阻塞"></a>2.3 无阻塞</h3><blockquote><p>写在<code>HTML</code>头部的<code>JavaScript</code>（无异步），和写在<code>HTML</code>标签中的<code>Style</code>会阻塞页面的渲染，因此<code>CSS</code>放在页面头部并使用<code>Link</code>方式引入，避免在<code>HTML</code>标签中写<code>Style</code>，<code>JavaScript</code>放在页面尾部或使用异步方式加载</p></blockquote><h3 id="2-4-使用首屏加载"><a href="#2-4-使用首屏加载" class="headerlink" title="2.4 使用首屏加载"></a>2.4 使用首屏加载</h3><blockquote><p>首屏的快速显示，可以大大提升用户对页面速度的感知，因此应尽量针对首屏的快速显示做优化。</p></blockquote><h3 id="2-5-按需加载"><a href="#2-5-按需加载" class="headerlink" title="2.5 按需加载"></a>2.5 按需加载</h3><blockquote><p>将不影响首屏的资源和当前屏幕资源不用的资源放到用户需要时才加载，可以大大提升重要资源的显示速度和降低总体流量。</p></blockquote><p><strong>PS：按需加载会导致大量重绘，影响渲染性能</strong></p><ul><li>a） <code>LazyLoad</code></li><li>b） 滚屏加载</li><li>c） 通过<code>Media Query</code>加载</li></ul><h3 id="2-6-预加载"><a href="#2-6-预加载" class="headerlink" title="2.6 预加载"></a>2.6 预加载</h3><blockquote><p>大型重资源页面（如游戏）可使用增加<code>Loading</code>的方法，资源加载完成后再显示页面。但<code>Loading</code>时间过长，会造成用户流失。</p></blockquote><p>对用户行为分析，可以在当前页加载下一页资源，提升速度。</p><ul><li>a）可感知<code>Loading</code></li><li>b）不可感知的<code>Loading</code>（如提前加载下一页）</li></ul><h3 id="2-7-压缩图片"><a href="#2-7-压缩图片" class="headerlink" title="2.7 压缩图片"></a>2.7 压缩图片</h3><blockquote><p>图片是最占流量的资源，因此尽量避免使用他，使用时选择最合适的格式（实现需求的前提下，以大小判断），合适的大小，然后使用智图压缩，同时在代码中用<code>Srcset</code>来按需显示</p></blockquote><p><strong>PS：过度压缩图片大小影响图片显示效果</strong></p><ul><li>a）使用智图（ <a href="http://zhitu.tencent.com/" target="_blank" rel="noopener">http://zhitu.tencent.com/</a> ）</li><li>b）使用其它方式代替图片(1. 使用<code>CSS3</code> 2. 使用<code>SVG</code> 3. 使用<code>IconFont</code>）</li><li>c）使用<code>Srcset</code></li><li>d）选择合适的图片(1. <code>webP</code>优于<code>JPG</code>2. <code>PNG8</code>优于<code>GIF</code>）</li><li>e）选择合适的大小（1. 首次加载不大于<code>1014KB</code> 2. 不宽于<code>640</code>（基于手机屏幕一般宽度））</li></ul><h3 id="2-8-减少Cookie"><a href="#2-8-减少Cookie" class="headerlink" title="2.8 减少Cookie"></a>2.8 减少Cookie</h3><blockquote><p><code>Cookie</code>会影响加载速度，所以静态资源域名不使用<code>Cookie</code>。</p></blockquote><h3 id="2-9-避免重定向"><a href="#2-9-避免重定向" class="headerlink" title="2.9 避免重定向"></a>2.9 避免重定向</h3><p>重定向会影响加载速度，所以在服务器正确设置避免重定向。</p><h3 id="2-10-异步加载第三方资源"><a href="#2-10-异步加载第三方资源" class="headerlink" title="2.10 异步加载第三方资源"></a>2.10 异步加载第三方资源</h3><p>第三方资源不可控会影响页面的加载和显示，因此要异步加载第三方资源</p><h3 id="2-11-减少HTTP请求"><a href="#2-11-减少HTTP请求" class="headerlink" title="2.11 减少HTTP请求"></a>2.11 减少HTTP请求</h3><blockquote><p>因为手机浏览器同时响应请求为4个请求（<code>Android</code>支持4个，<code>iOS</code> 5后可支持6个），所以要尽量减少页面的请求数，首次加载同时请求数不能超过4个</p></blockquote><ul><li>a）合并<code>CSS</code>、<code>JavaScript</code></li><li>b）合并小图片，使用雪碧图</li></ul><h2 id="三、脚本执行优化"><a href="#三、脚本执行优化" class="headerlink" title="三、脚本执行优化"></a>三、脚本执行优化</h2><blockquote><p>脚本处理不当会阻塞页面加载、渲染，因此在使用时需当注意</p></blockquote><ul><li><code>CSS</code>写在头部，<code>JavaScript</code>写在尾部或异步</li><li>避免图片和<code>iFrame</code>等的空<code>Src</code>，空<code>Src</code>会重新加载当前页面，影响速度和效率。</li><li>尽量避免重设图片大小</li><li>重设图片大小是指在页面、<code>CSS</code>、J<code>avaScript</code>等中多次重置图片大小，多次重设图片大小会引发图片的多次重绘，影响性能</li><li>图片尽量避免使用<code>DataURL</code>，<code>DataURL</code>图片没有使用图片的压缩算法文件会变大，并且要解码后再渲染，加载慢耗时长</li></ul><h2 id="四、CSS优化"><a href="#四、CSS优化" class="headerlink" title="四、CSS优化"></a>四、CSS优化</h2><blockquote><p>尽量避免写在HTML标签中写<code>Style</code>属性</p></blockquote><h3 id="4-1-css3过渡动画开启硬件加速"><a href="#4-1-css3过渡动画开启硬件加速" class="headerlink" title="4.1 css3过渡动画开启硬件加速"></a>4.1 css3过渡动画开启硬件加速</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.translate3d</span>&#123;</span><br><span class="line">   <span class="attribute">-webkit-transform</span>: <span class="built_in">translate3d</span>(0, 0, 0);</span><br><span class="line">   <span class="attribute">-moz-transform</span>: <span class="built_in">translate3d</span>(0, 0, 0);</span><br><span class="line">   <span class="attribute">-ms-transform</span>: <span class="built_in">translate3d</span>(0, 0, 0);</span><br><span class="line">   <span class="attribute">transform</span>: <span class="built_in">translate3d</span>(0, 0, 0);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-避免CSS表达式"><a href="#4-2-避免CSS表达式" class="headerlink" title="4.2 避免CSS表达式"></a>4.2 避免CSS表达式</h3><p>CSS表达式的执行需跳出CSS树的渲染，因此请避免CSS表达式。</p><h3 id="4-3-不滥用Float"><a href="#4-3-不滥用Float" class="headerlink" title="4.3 不滥用Float"></a>4.3 不滥用Float</h3><p>Float在渲染时计算量比较大，尽量减少使用</p><h3 id="4-4-值为0时不需要任何单位"><a href="#4-4-值为0时不需要任何单位" class="headerlink" title="4.4 值为0时不需要任何单位"></a>4.4 值为0时不需要任何单位</h3><p>为了浏览器的兼容性和性能，值为<code>0</code>时不要带单位</p><h2 id="五、JavaScript执行优化"><a href="#五、JavaScript执行优化" class="headerlink" title="五、JavaScript执行优化"></a>五、JavaScript执行优化</h2><h3 id="5-1-减少重绘和回流"><a href="#5-1-减少重绘和回流" class="headerlink" title="5.1 减少重绘和回流"></a>5.1 减少重绘和回流</h3><ul><li>避免不必要的Dom操作</li><li>尽量改变<code>Class</code>而不是<code>Style</code>，使用<code>classList</code>代替<code>className</code></li><li>避免使用<code>document.write</code></li><li>减少<code>drawImage</code></li></ul><h3 id="5-2-TOUCH事件优化"><a href="#5-2-TOUCH事件优化" class="headerlink" title="5.2 TOUCH事件优化"></a>5.2 TOUCH事件优化</h3><blockquote><p>使用<code>touchstart</code>、<code>touchend</code>代替<code>click</code>，因快影响速度快。但应注意<code>Touch</code>响应过快，易引发误操作</p></blockquote><h2 id="六、渲染优化"><a href="#六、渲染优化" class="headerlink" title="六、渲染优化"></a>六、渲染优化</h2><h3 id="6-1-HTML使用Viewport"><a href="#6-1-HTML使用Viewport" class="headerlink" title="6.1 HTML使用Viewport"></a>6.1 HTML使用Viewport</h3><p><strong>Viewport可以加速页面的渲染，请使用以下代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=”viewport” content=”width=device-width, initial-scale=1″&gt;</span><br></pre></td></tr></table></figure><h3 id="6-2-动画优化"><a href="#6-2-动画优化" class="headerlink" title="6.2 动画优化"></a>6.2 动画优化</h3><ul><li>尽量使用<code>CSS3</code>动画</li><li>合理使用<code>requestAnimationFrame</code>动画代替<code>setTimeout</code></li><li>适当使用<code>Canvas</code>动画 <code>5</code>个元素以内使用<code>css</code>动画，<code>5</code>个以上使用<code>Canvas</code>动画（<code>iOS8</code>可使用<code>webGL</code>）</li></ul><h3 id="6-4-高频事件优化"><a href="#6-4-高频事件优化" class="headerlink" title="6.4 高频事件优化"></a>6.4 高频事件优化</h3><blockquote><p><code>Touchmove</code>、<code>Scroll</code> 事件可导致多次渲染</p></blockquote><ul><li>使用<code>requestAnimationFrame</code>监听帧变化，使得在正确的时间进行渲染</li><li>增加响应变化的时间间隔，减少重绘次数</li></ul><h3 id="6-5-GPU加速"><a href="#6-5-GPU加速" class="headerlink" title="6.5 GPU加速"></a>6.5 GPU加速</h3><blockquote><p><code>CSS</code>中以下属性（<code>CSS3 transitions</code>、<code>CSS3 3D transforms</code>、<code>Opacity</code>、<code>Canvas</code>、<code>WebGL</code>、<code>Video</code>）来触发<code>GPU</code>渲染，请合理使用</p></blockquote><h2 id="七、参考"><a href="#七、参考" class="headerlink" title="七、参考"></a>七、参考</h2><ul><li><a href="https://www.cnblogs.com/yexiaochai/p/4219523.html" target="_blank" rel="noopener">浅谈移动前端的最佳实践-叶小钗</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://image-static.segmentfault.com/462/322/462322984-553e3da07b565_articlex&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、概述&quot;&gt;&lt;a href=&quot;#一、概述&quot; class
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="移动端" scheme="http://blog.poetries.top/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
      <category term="优化" scheme="http://blog.poetries.top/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>React之Fiber</title>
    <link href="http://blog.poetries.top/2018/11/20/react-fiber/"/>
    <id>http://blog.poetries.top/2018/11/20/react-fiber/</id>
    <published>2018-11-20T04:50:40.000Z</published>
    <updated>2018-11-28T12:50:39.021Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、React-Fiber是什么"><a href="#一、React-Fiber是什么" class="headerlink" title="一、React Fiber是什么"></a>一、React Fiber是什么</h2><blockquote><p><code>React Fiber</code>是对核心算法的一次重新实现。<code>React Fiber</code>把更新过程碎片化，把一个耗时长的任务分成很多小片，每一个小片的运行时间很短，虽然总时间依然很长，但是在每个小片执行完之后，都给其他任务一个执行的机会，这样唯一的线程就不会被独占，其他任务依然有运行的机会</p></blockquote><ol><li>在<code>React Fiber</code>中，一次更新过程会分成多个分片完成，所以完全有可能一个更新任务还没有完成，就被另一个更高优先级的更新过程打断，这时候，优先级高的更新任务会优先处理完，而低优先级更新任务所做的工作则会完全作废，然后等待机会重头再来</li><li>因为一个更新过程可能被打断，所以<code>React Fiber</code>一个更新过程被分为两个阶段(<code>Phase</code>)：第一个阶段<code>Reconciliation Phase</code>和第二阶段<code>Commit Phase</code></li><li>在第一阶段<code>Reconciliation Phase</code>，<code>React Fiber</code>会找出需要更新哪些<code>DOM</code>，这个阶段是可以被打断的；但是到了第二阶段<code>Commit Phase</code>，那就一鼓作气把<code>DOM</code>更新完，绝不会被打断</li><li>这两个阶段大部分工作都是<code>React Fiber</code>做，和我们相关的也就是生命周期函数</li></ol><blockquote><p><code>React Fiber</code>改变了之前<code>react</code>的组件渲染机制，新的架构使原来同步渲染的组件现在可以异步化，可中途中断渲染，执行更高优先级的任务。释放浏览器主线程</p></blockquote><p><strong>关键特性</strong></p><ul><li>增量渲染（把渲染任务拆分成块，匀到多帧）</li><li>更新时能够暂停，终止，复用渲染任务</li><li>给不同类型的更新赋予优先级</li><li>并发方面新的基础能力</li></ul><blockquote><p>增量渲染用来解决掉帧的问题，渲染任务拆分之后，每次只做一小段，做完一段就把时间控制权交还给主线程，而不像之前长时间占用</p></blockquote><h2 id="二、组件的渲染顺序"><a href="#二、组件的渲染顺序" class="headerlink" title="二、组件的渲染顺序"></a>二、组件的渲染顺序</h2><blockquote><p>假如有A,B,C,D组件，层级结构为：</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/7512510-eab82217abe7dc17.png" alt=""></p><p>我们知道组件的生命周期为：</p><p><strong>挂载阶段</strong>：</p><ul><li><code>constructor()</code></li><li><code>componentWillMount()</code></li><li><code>render()</code></li><li><code>componentDidMount()</code></li></ul><p><strong>更新阶段为</strong>：</p><ul><li><code>componentWillReceiveProps()</code></li><li><code>shouldComponentUpdate()</code></li><li><code>componentWillUpdate()</code></li><li><code>render()</code></li><li><code>componentDidUpdate</code></li></ul><blockquote><p>那么在挂载阶段，<code>A,B,C,D</code>的生命周期渲染顺序是如何的呢？</p></blockquote><p>那么在挂载阶段，A,B,C,D的生命周期渲染顺序是如何的呢？</p><p><img src="https://upload-images.jianshu.io/upload_images/7512510-a622b2d69c5bf663.png" alt=""></p><blockquote><p>以<code>render()</code>函数为分界线。从顶层组件开始，一直往下，直至最底层子组件。然后再往上</p></blockquote><p>组件<code>update</code>阶段同理</p><p>前面是<code>react16</code>以前的组建渲染方式。这就存在一个问题</p><blockquote><p>如果这是一个很大，层级很深的组件，<code>react</code>渲染它需要几十甚至几百毫秒，在这期间，<code>react</code>会一直占用浏览器主线程，任何其他的操作（包括用户的点击，鼠标移动等操作）都无法执行</p></blockquote><p><strong>Fiber架构就是为了解决这个问题</strong></p><blockquote><p>看一下fiber架构 组建的渲染顺序</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/7512510-e920709f62c769cb.jpg" alt=""></p><blockquote><p>加入<code>fiber</code>的<code>react</code>将组件更新分为两个时期</p></blockquote><p><strong>这两个时期以render为分界</strong></p><ul><li><code>render</code>前的生命周期为<code>phase1</code>,</li><li><code>render</code>后的生命周期为<code>phase2</code></li></ul><blockquote><ul><li><code>phase1</code>的生命周期是可以被打断的，每隔一段时间它会跳出当前渲染进程，去确定是否有其他更重要的任务。此过程，<code>React</code>在 <code>workingProgressTree</code> （并不是真实的<code>virtualDomTree</code>）上复用 <code>current</code> 上的 <code>Fiber</code> 数据结构来一步地（通过<code>requestIdleCallback</code>）来构建新的 tree，标记处需要更新的节点，放入队列中</li><li><code>phase2</code>的生命周期是不可被打断的，<code>React</code> 将其所有的变更一次性更新到<code>DOM</code>上</li></ul></blockquote><p><strong>这里最重要的是phase1这是时期所做的事。因此我们需要具体了解phase1的机制</strong></p><ul><li>如果不被打断，那么<code>phase1</code>执行完会直接进入<code>render</code>函数，构建真实的<code>virtualDomTree</code></li><li>如果组件再<code>phase1</code>过程中被打断，即当前组件只渲染到一半（也许是在<code>willMount</code>,也许是<code>willUpdate</code>~反正是在render之前的生命周期），那么<code>react</code>会怎么干呢？ <code>react</code>会放弃当前组件所有干到一半的事情，去做更高优先级更重要的任务（当然，也可能是用户鼠标移动，或者其他react监听之外的任务），当所有高优先级任务执行完之后，<code>react</code>通过<code>callback</code>回到之前渲染到一半的组件，从头开始渲染。（看起来放弃已经渲染完的生命周期，会有点不合理，反而会增加渲染时长，但是<code>react</code>确实是这么干的）</li></ul><p><strong>所有phase1的生命周期函数都可能被执行多次，因为可能会被打断重来</strong></p><blockquote><p>这样的话，就和<code>react16</code>版本之前有很大区别了，因为可能会被执行多次，那么我们最好就得保证<code>phase1</code>的生命周期每一次执行的结果都是一样的，否则就会有问题，因此，最好都是纯函数</p></blockquote><ul><li>如果高优先级的任务一直存在，那么低优先级的任务则永远无法进行，组件永远无法继续渲染。这个问题facebook目前好像还没解决</li><li>所以，facebook在<code>react16</code>增加<code>fiber</code>结构，其实并不是为了减少组件的渲染时间，事实上也并不会减少，最重要的是现在可以使得一些更高优先级的任务，如用户的操作能够优先执行，提高用户的体验，至少用户不会感觉到卡顿</li></ul><h2 id="三、参考"><a href="#三、参考" class="headerlink" title="三、参考"></a>三、参考</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/26027085" target="_blank" rel="noopener">程墨Morgan知乎React Fiber是什么</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、React-Fiber是什么&quot;&gt;&lt;a href=&quot;#一、React-Fiber是什么&quot; class=&quot;headerlink&quot; title=&quot;一、React Fiber是什么&quot;&gt;&lt;/a&gt;一、React Fiber是什么&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="React" scheme="http://blog.poetries.top/tags/React/"/>
    
      <category term="Fiber" scheme="http://blog.poetries.top/tags/Fiber/"/>
    
  </entry>
  
  <entry>
    <title>工作中常用的Nginx配置总结回顾</title>
    <link href="http://blog.poetries.top/2018/11/20/nginx-config/"/>
    <id>http://blog.poetries.top/2018/11/20/nginx-config/</id>
    <published>2018-11-20T02:58:20.000Z</published>
    <updated>2018-11-28T12:50:39.021Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Nginx介绍"><a href="#一、Nginx介绍" class="headerlink" title="一、Nginx介绍"></a>一、Nginx介绍</h2><blockquote><p><code>Nginx</code>是一款面向性能设计的 <code>HTTP</code> 服务器，能反向代理 <code>HTTP</code>，<code>HTTPS</code> 和邮件相关(<code>SMTP</code>，<code>POP3</code>，<code>IMAP</code>)的协议链接。并且提供了负载均衡以及 <code>HTTP</code> 缓存。它的设计充分使用异步事件模型，削减上下文调度的开销，提高服务器并发能力。采用了模块化设计，提供了丰富模块的第三方模块。</p></blockquote><p>所以关于 <code>Nginx</code>，有这些标签：「异步」「事件」「模块化」「高性能」「高并发」「反向代理」「负载均衡」</p><ul><li><code>Linux</code>系统：<code>Centos 7 x64</code></li><li><code>Nginx</code>版本：<code>1.11.5</code></li></ul><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><h3 id="2-1-安装依赖"><a href="#2-1-安装依赖" class="headerlink" title="2.1 安装依赖"></a>2.1 安装依赖</h3><blockquote><p><code>prce</code>(重定向支持)和<code>openssl</code>(<code>https</code>支持，如果不需要<code>https</code>可以不安装。)</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y pcre-devel </span><br><span class="line">yum -y install gcc make gcc-c++ wget</span><br><span class="line">yum -y install openssl openssl-devel</span><br></pre></td></tr></table></figure><blockquote><p><code>CentOS 6.5</code> 我安装的时候是选择的“基本服务器”，默认这两个包都没安装全，所以这两个都运行安装即可。</p></blockquote><h3 id="2-2-下载"><a href="#2-2-下载" class="headerlink" title="2.2 下载"></a>2.2 下载</h3><p><a href="http://nginx.org/download/" target="_blank" rel="noopener">nginx的所有版本在这里</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.13.3.tar.gz</span><br><span class="line">wget http://nginx.org/download/nginx-1.13.7.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果没有安装wget</span></span><br><span class="line"><span class="comment"># 下载已编译版本</span></span><br><span class="line">$ yum install wget</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压压缩包</span></span><br><span class="line">tar zxf nginx-1.13.3.tar.gz</span><br></pre></td></tr></table></figure><h3 id="2-3-编译安装"><a href="#2-3-编译安装" class="headerlink" title="2.3 编译安装"></a>2.3 编译安装</h3><blockquote><p>然后进入目录编译安装，<a href="#configure参数说明">configure参数说明</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> nginx-1.11.5</span><br><span class="line">./configure</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">....</span><br><span class="line">Configuration summary</span><br><span class="line">  + using system PCRE library</span><br><span class="line">  + OpenSSL library is not used</span><br><span class="line">  + using system zlib library</span><br><span class="line"></span><br><span class="line">  nginx path prefix: <span class="string">"/usr/local/nginx"</span></span><br><span class="line">  nginx binary file: <span class="string">"/usr/local/nginx/sbin/nginx"</span></span><br><span class="line">  nginx modules path: <span class="string">"/usr/local/nginx/modules"</span></span><br><span class="line">  nginx configuration prefix: <span class="string">"/usr/local/nginx/conf"</span></span><br><span class="line">  nginx configuration file: <span class="string">"/usr/local/nginx/conf/nginx.conf"</span></span><br><span class="line">  nginx pid file: <span class="string">"/usr/local/nginx/logs/nginx.pid"</span></span><br><span class="line">  nginx error <span class="built_in">log</span> file: <span class="string">"/usr/local/nginx/logs/error.log"</span></span><br><span class="line">  nginx http access <span class="built_in">log</span> file: <span class="string">"/usr/local/nginx/logs/access.log"</span></span><br><span class="line">  nginx http client request body temporary files: <span class="string">"client_body_temp"</span></span><br><span class="line">  nginx http proxy temporary files: <span class="string">"proxy_temp"</span></span><br><span class="line">  nginx http fastcgi temporary files: <span class="string">"fastcgi_temp"</span></span><br><span class="line">  nginx http uwsgi temporary files: <span class="string">"uwsgi_temp"</span></span><br><span class="line">  nginx http scgi temporary files: <span class="string">"scgi_temp"</span></span><br></pre></td></tr></table></figure><blockquote><p>安装报错误的话比如：<code>“C compiler cc is not found”</code>，这个就是缺少编译环境，安装一下就可以了 <strong><code>yum -y install gcc make gcc-c++ openssl-devel</code></strong></p></blockquote><p>如果没有<code>error</code>信息，就可以执行下边的安装了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h3 id="2-4-nginx测试"><a href="#2-4-nginx测试" class="headerlink" title="2.4 nginx测试"></a>2.4 nginx测试</h3><blockquote><p>运行下面命令会出现两个结果，一般情况<code>nginx</code>会安装在<code>/usr/local/nginx</code>目录中</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx/sbin/</span><br><span class="line">./nginx -t</span><br><span class="line"></span><br><span class="line"><span class="comment"># nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok</span></span><br><span class="line"><span class="comment"># nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful</span></span><br></pre></td></tr></table></figure><h3 id="2-5-设置全局nginx命令"><a href="#2-5-设置全局nginx命令" class="headerlink" title="2.5 设置全局nginx命令"></a>2.5 设置全局nginx命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.bash_profile</span><br></pre></td></tr></table></figure><blockquote><p>将下面内容添加到 <code>~/.bash_profile</code> 文件中</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/bin:/usr/<span class="built_in">local</span>/nginx/sbin/</span><br><span class="line"><span class="built_in">export</span> PATH</span><br></pre></td></tr></table></figure><blockquote><p>运行命令 <strong><code>source ~/.bash_profile</code></strong> 让配置立即生效。你就可以全局运行 <code>nginx</code> 命令了。</p></blockquote><h2 id="三、开机自启动"><a href="#三、开机自启动" class="headerlink" title="三、开机自启动"></a>三、开机自启动</h2><p><strong>开机自启动方法一：</strong></p><blockquote><p>编辑 <strong><code>vi /lib/systemd/system/nginx.service</code></strong> 文件，没有创建一个 <strong><code>touch nginx.service</code></strong> 然后将如下内容根据具体情况进行修改后，添加到<code>nginx.service</code>文件中：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=nginx</span><br><span class="line">After=network.target remote-fs.target nss-lookup.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line"></span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/var/run/nginx.pid</span><br><span class="line">ExecStartPre=/usr/<span class="built_in">local</span>/nginx/sbin/nginx -t -c /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span><br><span class="line">ExecStart=/usr/<span class="built_in">local</span>/nginx/sbin/nginx -c /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span><br><span class="line">ExecReload=/bin/<span class="built_in">kill</span> -s HUP <span class="variable">$MAINPID</span></span><br><span class="line">ExecStop=/bin/<span class="built_in">kill</span> -s QUIT <span class="variable">$MAINPID</span></span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><ul><li><code>[Unit]</code>:服务的说明  </li><li><code>Description</code>:描述服务  </li><li><code>After</code>:描述服务类别  </li><li><code>[Service]</code>服务运行参数的设置  </li><li><code>Type=forking</code>是后台运行的形式  </li><li><code>ExecStart</code>为服务的具体运行命令  </li><li><code>ExecReload</code>为重启命令  </li><li><code>ExecStop</code>为停止命令  </li><li><code>PrivateTmp=True</code>表示给服务分配独立的临时空间  </li></ul><blockquote><p><strong>注意</strong>：<code>[Service]</code>的启动、重启、停止命令全部要求使用绝对路径<br><code>[Install]</code>运行级别下服务安装的相关设置，可设置为多用户，即系统运行级别为<code>3</code>  </p></blockquote><ul><li>保存退出。</li><li>设置开机启动，使配置生效：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> nginx.service</span><br><span class="line"><span class="comment"># 输出下面内容表示成功了</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/nginx.service to /usr/lib/systemd/system/nginx.service.</span><br></pre></td></tr></table></figure><p><strong>开机自启动方法二：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/rc.local</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 rc.local 文件中，添加下面这条命令</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx start</span><br></pre></td></tr></table></figure><blockquote><p>如果开机后发现自启动脚本没有执行，你要去确认一下<code>rc.local</code>这个文件的访问权限是否是可执行的，因为<code>rc.local</code>默认是不可执行的。修改<code>rc.local</code>访问权限，增加可执行权限：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure><h2 id="四、运维"><a href="#四、运维" class="headerlink" title="四、运维"></a>四、运维</h2><h3 id="4-1-服务管理"><a href="#4-1-服务管理" class="headerlink" title="4.1 服务管理"></a>4.1 服务管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -s reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭进程</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -s stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 平滑关闭nginx</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -s quit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看nginx的安装状态，</span></span><br><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -V</span><br></pre></td></tr></table></figure><p><strong>关闭防火墙，或者添加防火墙规则就可以测试了</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables stop</span><br></pre></td></tr></table></figure><p>或者编辑配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/iptables</span><br></pre></td></tr></table></figure><blockquote><p>添加这样一条开放<code>80</code>端口的规则后保存：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT</span><br></pre></td></tr></table></figure><p>重启服务即可:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service iptables restart</span><br><span class="line"><span class="comment"># 命令进行查看目前nat</span></span><br><span class="line">iptables -t nat -L</span><br></pre></td></tr></table></figure><h3 id="4-2-重启服务防火墙报错解决"><a href="#4-2-重启服务防火墙报错解决" class="headerlink" title="4.2 重启服务防火墙报错解决"></a>4.2 重启服务防火墙报错解决</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service iptables restart</span><br><span class="line"><span class="comment"># Redirecting to /bin/systemctl restart  iptables.service</span></span><br><span class="line"><span class="comment"># Failed to restart iptables.service: Unit iptables.service failed to load: No such file or directory.</span></span><br></pre></td></tr></table></figure><blockquote><p>在<code>CentOS 7</code>或<code>RHEL 7</code>或<code>Fedora</code>中防火墙由 <strong><code>firewalld</code></strong> 来管理，当然你可以还原传统的管理方式。或则使用新的命令进行管理。<br>假如采用传统请执行一下命令：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 传统命令</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl mask firewalld</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装命令</span></span><br><span class="line">yum install iptables-services</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> iptables </span><br><span class="line">service iptables restart</span><br></pre></td></tr></table></figure><h2 id="五、nginx卸载"><a href="#五、nginx卸载" class="headerlink" title="五、nginx卸载"></a>五、nginx卸载</h2><blockquote><p>如果通过<code>yum</code>安装，使用下面命令安装。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove nginx</span><br></pre></td></tr></table></figure><ul><li>编译安装，删除<code>/usr/local/nginx</code>目录即可</li><li>如果配置了自启动脚本，也需要删除。</li></ul><h2 id="六、参数说明"><a href="#六、参数说明" class="headerlink" title="六、参数说明"></a>六、参数说明</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>--prefix=&lt;path&gt;</code></td><td>Nginx安装路径。如果没有指定，默认为 <code>/usr/local/nginx</code>。</td></tr><tr><td><code>--sbin-path=&lt;path&gt;</code></td><td><code>Nginx</code>可执行文件安装路径。只能安装时指定，如果没有指定，默认为<code>&lt;prefix&gt;/sbin/nginx</code>。</td></tr><tr><td><code>--conf-path=&lt;path&gt;</code></td><td>在没有给定<code>-c</code>选项下默认的<code>nginx.conf</code>的路径。如果没有指定，默认为<code>&lt;prefix&gt;</code>/conf/nginx.conf`。</td></tr><tr><td><code>--pid-path=&lt;path&gt;</code></td><td>在<code>nginx.conf</code>中没有指定pid指令的情况下，默认的<code>nginx.pid</code>的路径。如果没有指定，默认为 <code>&lt;prefix&gt;/logs/nginx.pid</code>。</td></tr><tr><td><code>--lock-path=&lt;path&gt;</code></td><td><code>nginx.lock</code>文件的路径。</td></tr><tr><td><code>--error-log-path=&lt;path&gt;</code></td><td>在<code>nginx.conf</code>中没有指定<code>error_log</code>指令的情况下，默认的错误日志的路径。如果没有指定，默认为 <code>&lt;prefix&gt;/- logs/error.log</code>。</td></tr><tr><td><code>--http-log-path=&lt;path&gt;</code></td><td>在<code>nginx.conf</code>中没有指定<code>access_log</code>指令的情况下，默认的访问日志的路径。如果没有指定，默认为 <code>&lt;prefix&gt;/- logs/access.log</code>。</td></tr><tr><td><code>--user=&lt;user&gt;</code></td><td>在<code>nginx.conf</code>中没有指定<code>user</code>指令的情况下，默认的<code>nginx</code>使用的用户。如果没有指定，默认为 <code>nobody</code>。</td></tr><tr><td><code>--group=&lt;group&gt;</code></td><td>在<code>nginx.conf</code>中没有指定<code>user</code>指令的情况下，默认的<code>nginx</code>使用的组。如果没有指定，默认为 <code>nobody</code>。</td></tr><tr><td><code>--builddir=DIR</code></td><td>指定编译的目录</td></tr><tr><td><code>--with-rtsig_module</code></td><td>启用 <code>rtsig</code> 模块</td></tr><tr><td><code>--with-select_module --without-select_module</code></td><td>允许或不允许开启<code>SELECT</code>模式，如果<code>configure</code> 没有找到更合适的模式，比如：<code>kqueue(sun os)</code>,<code>epoll (linux kenel 2.6+)</code>,<code>rtsig(- 实时信号)</code>或者<code>/dev/poll</code>(一种类似select的模式，底层实现与SELECT基本相 同，都是采用轮训方法) SELECT模式将是默认安装模式</td></tr><tr><td><code>--with-poll_module --without-poll_module</code></td><td>Whether or not to enable the poll module. This module is enabled by, default if a more suitable method such as kqueue, epoll, rtsig or /dev/poll is not discovered by configure.</td></tr><tr><td><code>--with-http_ssl_module</code></td><td>Enable ngx_http_ssl_module. Enables SSL support and the ability to handle HTTPS requests. Requires OpenSSL. On Debian, this is libssl-dev. 开启HTTP SSL模块，使NGINX可以支持HTTPS请求。这个模块需要已经安装了OPENSSL，在DEBIAN上是libssl</td></tr><tr><td><code>--with-http_realip_module</code></td><td>启用 <code>ngx_http_realip_module</code></td></tr><tr><td><code>--with-http_addition_module</code></td><td>启用 <code>ngx_http_addition_module</code></td></tr><tr><td><code>--with-http_sub_module</code></td><td>启用 <code>ngx_http_sub_module</code></td></tr><tr><td><code>--with-http_dav_module</code></td><td>启用 <code>ngx_http_dav_module</code></td></tr><tr><td><code>--with-http_flv_module</code></td><td>启用 <code>ngx_http_flv_module</code></td></tr><tr><td><code>--with-http_stub_status_module</code></td><td>启用 <code>&quot;server status&quot;</code>页</td></tr><tr><td><code>--without-http_charset_module</code></td><td>禁用 <code>ngx_http_charset_module</code></td></tr><tr><td><code>--without-http_gzip_module</code></td><td>禁用 <code>ngx_http_gzip_module</code>. 如果启用，需要 zlib 。</td></tr><tr><td><code>--without-http_ssi_module</code></td><td>禁用 <code>ngx_http_ssi_module</code></td></tr><tr><td><code>--without-http_userid_module</code></td><td>禁用 <code>ngx_http_userid_module</code></td></tr><tr><td><code>--without-http_access_module</code></td><td>禁用 <code>ngx_http_access_module</code></td></tr><tr><td><code>--without-http_auth_basic_module</code></td><td>禁用 <code>ngx_http_auth_basic_module</code></td></tr><tr><td><code>--without-http_autoindex_module</code></td><td>禁用 <code>ngx_http_autoindex_module</code></td></tr><tr><td><code>--without-http_geo_module</code></td><td>禁用 <code>ngx_http_geo_module</code></td></tr><tr><td><code>--without-http_map_module</code></td><td>禁用 <code>ngx_http_map_module</code></td></tr><tr><td><code>--without-http_referer_module</code></td><td>禁用 <code>ngx_http_referer_module</code></td></tr><tr><td><code>--without-http_rewrite_module</code></td><td>禁用 <code>ngx_http_rewrite_module.</code> 如果启用需要<code>PCRE</code> 。</td></tr><tr><td><code>--without-http_proxy_module</code></td><td>禁用 ngx_http_proxy_module</td></tr><tr><td><code>--without-http_fastcgi_module</code></td><td>禁用 ngx_http_fastcgi_module</td></tr><tr><td><code>--without-http_memcached_module</code></td><td>禁用 ngx_http_memcached_module</td></tr><tr><td><code>--without-http_limit_zone_module</code></td><td>禁用 ngx_http_limit_zone_module</td></tr><tr><td><code>--without-http_empty_gif_module</code></td><td>禁用 ngx_http_empty_gif_module</td></tr><tr><td><code>--without-http_browser_module</code></td><td>禁用 ngx_http_browser_module</td></tr><tr><td><code>--without-http_upstream_ip_hash_module</code></td><td>禁用 ngx_http_upstream_ip_hash_module`</td></tr><tr><td><code>--with-http_perl_module</code></td><td>启用 ngx_http_perl_module</td></tr><tr><td><code>--with-perl_modules_path=PATH</code></td><td>指定 perl 模块的路径</td></tr><tr><td><code>--with-perl=PATH</code></td><td>指定 perl 执行文件的路径</td></tr><tr><td><code>--http-log-path=PATH</code></td><td>Set path to the http access log</td></tr><tr><td><code>--http-client-body-temp-path=PATH</code></td><td>Set path to the http client request body temporary files</td></tr><tr><td><code>--http-proxy-temp-path=PATH</code></td><td>Set path to the http proxy temporary files</td></tr><tr><td><code>--http-fastcgi-temp-path=PATH</code></td><td>Set path to the http fastcgi temporary files</td></tr><tr><td><code>--without-http</code></td><td>禁用 HTTP server</td></tr><tr><td><code>--with-mail</code></td><td>启用 IMAP4/POP3/SMTP 代理模块</td></tr><tr><td><code>--with-mail_ssl_module</code></td><td>启用 ngx_mail_ssl_module</td></tr><tr><td><code>--with-cc=PATH</code></td><td>指定 C 编译器的路径</td></tr><tr><td><code>--with-cpp=PATH</code></td><td>指定 C 预处理器的路径</td></tr><tr><td><code>--with-cc-opt=OPTIONS</code></td><td>Additional parameters which will be added to the variable CFLAGS. With the use of the system library PCRE in FreeBSD, it is necessary to indicate –with-cc-opt=”-I /usr/local/include”. If we are using select() and it is necessary to increase the number of file descriptors, then this also can be assigned here: –with-cc-opt=”-D FD_SETSIZE=2048”.</td></tr><tr><td><code>--with-ld-opt=OPTIONS</code></td><td>Additional parameters passed to the linker. With the use of the system library PCRE in - FreeBSD, it is necessary to indicate –with-ld-opt=”-L /usr/local/lib”.</td></tr><tr><td><code>--with-cpu-opt=CPU</code></td><td>为特定的 CPU 编译，有效的值包括：pentium, pentiumpro, pentium3, pentium4, athlon, opteron, amd64, sparc32, sparc64, ppc64</td></tr><tr><td><code>--without-pcre</code></td><td>禁止 PCRE 库的使用。同时也会禁止 HTTP rewrite 模块。在 “location” 配置指令中的正则表达式也需要 PCRE 。</td></tr><tr><td><code>--with-pcre=DIR</code></td><td>指定 PCRE 库的源代码的路径。</td></tr><tr><td><code>--with-pcre-opt=OPTIONS</code></td><td>Set additional options for PCRE building.</td></tr><tr><td><code>--with-md5=DIR</code></td><td>Set path to md5 library sources.</td></tr><tr><td><code>--with-md5-opt=OPTIONS</code></td><td>Set additional options for md5 building.</td></tr><tr><td><code>--with-md5-asm</code></td><td>Use md5 assembler sources.</td></tr><tr><td><code>--with-sha1=DIR</code></td><td>Set path to sha1 library sources.</td></tr><tr><td><code>--with-sha1-opt=OPTIONS</code></td><td>Set additional options for sha1 building.</td></tr><tr><td><code>--with-sha1-asm</code></td><td>Use sha1 assembler sources.</td></tr><tr><td><code>--with-zlib=DIR</code></td><td>Set path to zlib library sources.</td></tr><tr><td><code>--with-zlib-opt=OPTIONS</code></td><td>Set additional options for zlib building.</td></tr><tr><td><code>--with-zlib-asm=CPU</code></td><td>Use zlib assembler sources optimized for specified CPU, valid values are: pentium, pentiumpro</td></tr><tr><td><code>--with-openssl=DIR</code></td><td>Set path to OpenSSL library sources</td></tr><tr><td><code>--with-openssl-opt=OPTIONS</code></td><td>Set additional options for OpenSSL building</td></tr><tr><td><code>--with-debug</code></td><td>启用调试日志</td></tr><tr><td><code>--add-module=PATH</code></td><td>Add in a third-party module found in directory PATH</td></tr></tbody></table><h2 id="七、配置"><a href="#七、配置" class="headerlink" title="七、配置"></a>七、配置</h2><blockquote><p>在<code>Centos</code> 默认配置文件在 <strong><code>/usr/local/nginx-1.5.1/conf/nginx.conf</code></strong> 我们要在这里配置一些文件。<code>nginx.conf</code>是主配置文件，由若干个部分组成，每个大括号<code>{}</code>表示一个部分。每一行指令都由分号结束<code>;</code>，标志着一行的结束。</p></blockquote><h3 id="7-1-常用正则"><a href="#7-1-常用正则" class="headerlink" title="7.1 常用正则"></a>7.1 常用正则</h3><table><thead><tr><th>正则</th><th>说明</th><th>正则</th><th>说明</th></tr></thead><tbody><tr><td><code>.</code></td><td>匹配除换行符以外的任意字符</td><td><code>$</code></td><td>匹配字符串的结束</td></tr><tr><td><code>?</code></td><td>重复<code>0</code>次或<code>1</code>次</td><td><code>{n}</code></td><td>重复<code>n</code>次</td></tr><tr><td><code>+</code></td><td>重复<code>1</code>次或更多次</td><td><code>{n,}</code></td><td>重复<code>n</code>次或更多次</td></tr><tr><td><code>*</code></td><td>重复<code>0</code>次或更多次</td><td><code>[c]</code></td><td>匹配单个字符<code>c</code></td></tr><tr><td><code>\d</code></td><td>匹配数字</td><td><code>[a-z]</code></td><td>匹配<code>a-z</code>小写字母的任意一个</td></tr><tr><td><code>^</code></td><td>匹配字符串的开始</td><td>-</td><td>-</td></tr></tbody></table><h3 id="7-2-全局变量"><a href="#7-2-全局变量" class="headerlink" title="7.2 全局变量"></a>7.2 全局变量</h3><table><thead><tr><th>变量</th><th>说明</th><th>变量</th><th>说明</th></tr></thead><tbody><tr><td><code>$args</code></td><td>这个变量等于请求行中的参数，同<code>$query_string</code></td><td><code>$remote_port</code></td><td>客户端的端口。</td></tr><tr><td><code>$content_length</code></td><td>请求头中的<code>Content-length</code>字段。</td><td><code>$remote_user</code></td><td>已经经过<code>Auth Basic Module</code>验证的用户名。</td></tr><tr><td><code>$content_type</code></td><td>请求头中的<code>Content-Type</code>字段。</td><td><code>$request_filename</code></td><td>当前请求的文件路径，由<code>root</code>或<code>alias</code>指令与<code>URI</code>请求生成。</td></tr><tr><td><code>$document_root</code></td><td>当前请求在<code>root</code>指令中指定的值。</td><td><code>$scheme</code></td><td><code>HTTP</code>方法（如<code>http</code>，<code>https</code>）。</td></tr><tr><td><code>$host</code></td><td>请求主机头字段，否则为服务器名称。</td><td><code>$server_protocol</code></td><td>请求使用的协议，通常是<code>HTTP/1.0</code>或<code>HTTP/1.1</code>。</td></tr><tr><td><code>$http_user_agent</code></td><td>客户端<code>agent</code>信息</td><td><code>$server_addr</code></td><td>服务器地址，在完成一次系统调用后可以确定这个值。</td></tr><tr><td><code>$http_cookie</code></td><td>客户端<code>cookie</code>信息</td><td><code>$server_name</code></td><td>服务器名称。</td></tr><tr><td><code>$limit_rate</code></td><td>这个变量可以限制连接速率。</td><td><code>$server_port</code></td><td>请求到达服务器的端口号。</td></tr><tr><td><code>$request_method</code></td><td>客户端请求的动作，通常为<code>GET</code>或<code>POST</code>。</td><td><code>$request_uri</code></td><td>包含请求参数的原始<code>URI</code>，不包含主机名，如：<code>/foo/bar.php?arg=baz</code>。</td></tr><tr><td><code>$remote_addr</code></td><td>客户端的<code>IP</code>地址。</td><td><code>$uri</code></td><td>不带请求参数的当前<code>URI</code>，<code>$uri</code>不包含主机名，如<code>/foo/bar.html</code>。</td></tr><tr><td><code>$document_uri</code></td><td>与$uri`相同。</td><td>-</td><td>-</td></tr></tbody></table><blockquote><p>例如请求：<code>http://localhost:3000/test1/test2/test.php</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$host：localhost  </span><br><span class="line">$server_port：3000  </span><br><span class="line">$request_uri：/test1/test2/test.php  </span><br><span class="line">$document_uri：/test1/test2/test.php  </span><br><span class="line">$document_root：/var/www/html  </span><br><span class="line">$request_filename：/var/www/html/test1/test2/test.php</span><br></pre></td></tr></table></figure><h3 id="7-3-符号参考"><a href="#7-3-符号参考" class="headerlink" title="7.3 符号参考"></a>7.3 符号参考</h3><table><thead><tr><th>符号</th><th>说明</th><th>符号</th><th>说明</th><th>符号</th><th>说明</th></tr></thead><tbody><tr><td><code>k</code>,<code>K</code></td><td>千字节</td><td><code>m</code>,<code>M</code></td><td>兆字节</td><td><code>ms</code></td><td>毫秒</td></tr><tr><td><code>s</code></td><td>秒</td><td><code>m</code></td><td>分钟</td><td><code>h</code></td><td>小时</td></tr><tr><td><code>d</code></td><td>日</td><td><code>w</code></td><td>周</td><td><code>M</code></td><td>一个月, <code>30</code>天</td></tr></tbody></table><p>例如，”8k”，”1m” 代表字节数计量。<br>例如，”1h 30m”，”1y 6M”。代表 “1小时 30分”，”1年零6个月”。 </p><h3 id="7-4-配置文件"><a href="#7-4-配置文件" class="headerlink" title="7.4 配置文件"></a>7.4 配置文件</h3><blockquote><p><code>nginx</code> 的配置系统由一个主配置文件和其他一些辅助的配置文件构成。这些配置文件均是纯文本文件，全部位于 <code>nginx</code> 安装目录下的 <code>conf</code> 目录下。</p></blockquote><ul><li>指令由 <code>nginx</code> 的各个模块提供，不同的模块会提供不同的指令来实现配置。<br>指令除了<code>Key-Value</code> 的形式，还有作用域指令。</li><li><code>nginx.conf</code> 中的配置信息，根据其逻辑上的意义，对它们进行了分类，也就是分成了多个作用域，或者称之为配置指令上下文。不同的作用域含有一个或者多个配置项。</li></ul><p><strong>下面的这些上下文指令是用的比较多</strong></p><table><thead><tr><th>Directive</th><th>Description</th><th>Contains Directive</th></tr></thead><tbody><tr><td><code>main</code></td><td><code>nginx</code> 在运行时与具体业务功能（比如 <code>http</code> 服务或者 <code>email</code> 服务代理）无关的一些参数，比如工作进程数，运行的身份等。</td><td><code>user</code>, <code>worker_processes</code>, <code>error_log</code>, <code>events</code>, <code>http</code>, <code>mail</code></td></tr><tr><td><code>http</code></td><td>与提供 <code>http</code> 服务相关的一些配置参数。例如：是否使用 <code>keepalive</code> 啊，是否使用 <code>gzip</code> 进行压缩等。</td><td><code>server</code></td></tr><tr><td><code>server</code></td><td><code>http</code> 服务上支持若干虚拟主机。每个虚拟主机一个对应的 <code>server</code> 配置项，配置项里面包含该虚拟主机相关的配置。在提供 <code>mail</code> 服务的代理时，也可以建立若干 <code>server</code>. 每个 <code>server</code> 通过监听的地址来区分。</td><td><code>listen</code>, <code>server_name</code>, <code>access_log</code>, <code>location</code>, <code>protocol</code>, <code>proxy</code>, <code>smtp_auth</code>, <code>xclient</code></td></tr><tr><td><code>location</code></td><td><code>http</code> 服务中，某些特定的 <code>URL</code>对应的一系列配置项。</td><td><code>index</code>, <code>root</code></td></tr><tr><td><code>mail</code></td><td>实现 <code>email</code> 相关的 <code>SMTP/IMAP/POP3</code> 代理时，共享的一些配置项（因为可能实现多个代理，工作在多个监听地址上）。</td><td><code>server</code>, <code>http</code>,<code>imap_capabilities</code></td></tr><tr><td><code>include</code></td><td>以便增强配置文件的可读性，使得部分配置文件可以重新使用。</td><td>-</td></tr><tr><td><code>valid_referers</code></td><td>用来校验<code>Http</code>请求头<code>Referer</code>是否有效。</td><td>-</td></tr><tr><td><code>try_files</code></td><td>用在<code>server</code>部分，不过最常见的还是用在<code>location</code>部分，它会按照给定的参数顺序进行尝试，第一个被匹配到的将会被使用。</td><td>-</td></tr><tr><td><code>if</code></td><td>当在<code>location</code>块中使用<code>if</code>指令，在某些情况下它并不按照预期运行，一般来说避免使用if指令。</td><td>-</td></tr></tbody></table><blockquote><p>例如我们再 <strong><code>nginx.conf</code></strong> 里面引用两个配置 <code>vhost/example.com.conf</code> 和 <code>vhost/gitlab.com.conf</code> 它们都被放在一个我自己新建的目录 <code>vhost</code> 下面。<code>nginx.conf</code> 配置如下：</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">    <span class="comment">#                  '$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">    <span class="comment">#                  '"$http_user_agent" "$http_x_forwarded_for"';</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  localhost;</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">        <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">include</span>  vhost/example.com.conf;</span><br><span class="line">    <span class="attribute">include</span>  vhost/gitlab.com.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>简单的配置: <code>example.com.conf</code></p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="comment">#侦听的80端口</span></span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  baidu.com app.baidu.com; <span class="comment"># 这里指定域名</span></span><br><span class="line">    <span class="attribute">index</span>        index.html index.htm;    <span class="comment"># 这里指定默认入口页面</span></span><br><span class="line">    <span class="attribute">root</span> /home/www/app.baidu.com;         <span class="comment"># 这里指定目录</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-5-内置预定义变量"><a href="#7-5-内置预定义变量" class="headerlink" title="7.5 内置预定义变量"></a>7.5 内置预定义变量</h3><blockquote><p><code>Nginx</code>提供了许多预定义的变量，也可以通过使用set来设置变量。你可以在<code>if</code>中使用预定义变量，也可以将它们传递给代理服务器。以下是一些常见的预定义变量，<a href="http://nginx.org/en/docs/varindex.html" target="_blank" rel="noopener">更多详见</a></p></blockquote><table><thead><tr><th>变量名称</th><th>值</th></tr></thead><tbody><tr><td><code>$args_name</code></td><td>在请求中的<code>name</code>参数</td></tr><tr><td><code>$args</code></td><td>所有请求参数</td></tr><tr><td><code>$query_string</code></td><td><code>$args</code>的别名</td></tr><tr><td><code>$content_length</code></td><td>请求头<code>Content-Length</code>的值</td></tr><tr><td><code>$content_type</code></td><td>请求头<code>Content-Type</code>的值</td></tr><tr><td><code>$host</code></td><td>如果当前有<code>Host</code>，则为请求头<code>Host</code>的值；如果没有这个头，那么该值等于匹配该请求的<code>server_name</code>的值</td></tr><tr><td><code>$remote_addr</code></td><td>客户端的IP地址</td></tr><tr><td><code>$request</code></td><td>完整的请求，从客户端收到，包括<code>Http</code>请求方法、<code>URI</code>、<code>Http</code>协议、头、请求体</td></tr><tr><td><code>$request_uri</code></td><td>完整请求的<code>URI</code>，从客户端来的请求，包括参数</td></tr><tr><td><code>$scheme</code></td><td>当前请求的协议</td></tr><tr><td><code>$uri</code></td><td>当前请求的标准化<code>URI</code></td></tr></tbody></table><h3 id="7-6-反向代理"><a href="#7-6-反向代理" class="headerlink" title="7.6 反向代理"></a>7.6 反向代理</h3><blockquote><p>反向代理是一个<code>Web</code>服务器，它接受客户端的连接请求，然后将请求转发给上游服务器，并将从服务器得到的结果返回给连接的客户端。下面简单的反向代理的例子：</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;  </span><br><span class="line">  <span class="attribute">listen</span>       <span class="number">80</span>;                                                        </span><br><span class="line">  <span class="attribute">server_name</span>  localhost;                                              </span><br><span class="line">  <span class="attribute">client_max_body_size</span> <span class="number">1024M</span>;  <span class="comment"># 允许客户端请求的最大单文件字节数</span></span><br><span class="line"></span><br><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span>                         http://localhost:8080;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host              <span class="variable">$host</span>:<span class="variable">$server_port</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For   <span class="variable">$remote_addr</span>; <span class="comment"># HTTP的请求端真实的IP</span></span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;      <span class="comment"># 为了正确地识别实际用户发出的协议是 http 还是 https</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>复杂的配置: <code>gitlab.com.conf</code>。</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="comment">#侦听的80端口</span></span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  git.example.cn;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span>   http://localhost:3000;</span><br><span class="line">        <span class="comment">#以下是一些反向代理的配置可删除</span></span><br><span class="line">        <span class="attribute">proxy_redirect</span>             <span class="literal">off</span>;</span><br><span class="line">        <span class="comment">#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span>           Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">client_max_body_size</span>       <span class="number">10m</span>; <span class="comment">#允许客户端请求的最大单文件字节数</span></span><br><span class="line">        <span class="attribute">client_body_buffer_size</span>    <span class="number">128k</span>; <span class="comment">#缓冲区代理缓冲用户端请求的最大字节数</span></span><br><span class="line">        <span class="attribute">proxy_connect_timeout</span>      <span class="number">300</span>; <span class="comment">#nginx跟后端服务器连接超时时间(代理连接超时)</span></span><br><span class="line">        <span class="attribute">proxy_send_timeout</span>         <span class="number">300</span>; <span class="comment">#后端服务器数据回传时间(代理发送超时)</span></span><br><span class="line">        <span class="attribute">proxy_read_timeout</span>         <span class="number">300</span>; <span class="comment">#连接成功后，后端服务器响应时间(代理接收超时)</span></span><br><span class="line">        <span class="attribute">proxy_buffer_size</span>          <span class="number">4k</span>; <span class="comment">#设置代理服务器（nginx）保存用户头信息的缓冲区大小</span></span><br><span class="line">        <span class="attribute">proxy_buffers</span>              <span class="number">4</span> <span class="number">32k</span>; <span class="comment">#proxy_buffers缓冲区，网页平均在32k以下的话，这样设置</span></span><br><span class="line">        <span class="attribute">proxy_busy_buffers_size</span>    <span class="number">64k</span>; <span class="comment">#高负荷下缓冲大小（proxy_buffers*2）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>代理到上游服务器的配置中，最重要的是<code>proxy_pass</code>指令。以下是代理模块中的一些常用指令：</p></blockquote><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td><code>proxy_connect_timeout</code></td><td><code>Nginx</code>从接受请求至连接到上游服务器的最长等待时间</td></tr><tr><td><code>proxy_send_timeout</code></td><td>后端服务器数据回传时间(代理发送超时)</td></tr><tr><td><code>proxy_read_timeout</code></td><td>连接成功后，后端服务器响应时间(代理接收超时)</td></tr><tr><td><code>proxy_cookie_domain</code></td><td>替代从上游服务器来的<code>Set-Cookie</code>头的<code>domain</code>属性</td></tr><tr><td><code>proxy_cookie_path</code></td><td>替代从上游服务器来的<code>Set-Cookie</code>头的<code>path</code>属性</td></tr><tr><td><code>proxy_buffer_size</code></td><td>设置代理服务器（<code>nginx</code>）保存用户头信息的缓冲区大小</td></tr><tr><td><code>proxy_buffers</code></td><td><code>proxy_buffers</code>缓冲区，网页平均在多少<code>k</code>以下</td></tr><tr><td><code>proxy_set_header</code></td><td>重写发送到上游服务器头的内容，也可以通过将某个头部的值设置为空字符串，而不发送某个头部的方法实现</td></tr><tr><td><code>proxy_ignore_headers</code></td><td>这个指令禁止处理来自代理服务器的应答。</td></tr><tr><td><code>proxy_intercept_errors</code></td><td>使<code>nginx</code>阻止<code>HTTP</code>应答代码为400或者更高的应答。</td></tr></tbody></table><h3 id="7-7-负载均衡"><a href="#7-7-负载均衡" class="headerlink" title="7.7 负载均衡"></a>7.7 负载均衡</h3><blockquote><p><code>upstream</code>指令启用一个新的配置区段，在该区段定义一组上游服务器。这些服务器可能被设置不同的权重，也可能出于对服务器进行维护，标记为<code>down</code>。</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> gitlab &#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    <span class="comment"># upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。</span></span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.122.11:8081</span> ;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:82</span> weight=<span class="number">3</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:83</span> weight=<span class="number">3</span> down;</span><br><span class="line">    server 127.0.0.1:84 weight=3; max_fails=3  fail_timeout=20s;</span><br><span class="line">    server 127.0.0.1:85 weight=4;;</span><br><span class="line">    <span class="attribute">keepalive</span> <span class="number">32</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="comment">#侦听的80端口</span></span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  git.example.cn;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span>   http://gitlab;    <span class="comment">#在这里设置一个代理，和upstream的名字一样</span></span><br><span class="line">        <span class="comment">#以下是一些反向代理的配置可删除</span></span><br><span class="line">        <span class="attribute">proxy_redirect</span>             <span class="literal">off</span>;</span><br><span class="line">        <span class="comment">#后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span>           Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>           X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span>           X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">client_max_body_size</span>       <span class="number">10m</span>;  <span class="comment">#允许客户端请求的最大单文件字节数</span></span><br><span class="line">        <span class="attribute">client_body_buffer_size</span>    <span class="number">128k</span>; <span class="comment">#缓冲区代理缓冲用户端请求的最大字节数</span></span><br><span class="line">        <span class="attribute">proxy_connect_timeout</span>      <span class="number">300</span>;  <span class="comment">#nginx跟后端服务器连接超时时间(代理连接超时)</span></span><br><span class="line">        <span class="attribute">proxy_send_timeout</span>         <span class="number">300</span>;  <span class="comment">#后端服务器数据回传时间(代理发送超时)</span></span><br><span class="line">        <span class="attribute">proxy_read_timeout</span>         <span class="number">300</span>;  <span class="comment">#连接成功后，后端服务器响应时间(代理接收超时)</span></span><br><span class="line">        <span class="attribute">proxy_buffer_size</span>          <span class="number">4k</span>; <span class="comment">#设置代理服务器（nginx）保存用户头信息的缓冲区大小</span></span><br><span class="line">        <span class="attribute">proxy_buffers</span>              <span class="number">4</span> <span class="number">32k</span>;<span class="comment"># 缓冲区，网页平均在32k以下的话，这样设置</span></span><br><span class="line">        <span class="attribute">proxy_busy_buffers_size</span>    <span class="number">64k</span>; <span class="comment">#高负荷下缓冲大小（proxy_buffers*2）</span></span><br><span class="line">        <span class="attribute">proxy_temp_file_write_size</span> <span class="number">64k</span>; <span class="comment">#设定缓存文件夹大小，大于这个值，将从upstream服务器传</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器<code>down</code>掉，能自动剔除。</p></blockquote><p><strong>负载均衡：</strong></p><p><code>upstream</code>模块能够使用3种负载均衡算法：轮询、<code>IP</code>哈希、最少连接数。</p><p><strong>轮询：</strong> 默认情况下使用轮询算法，不需要配置指令来激活它，它是基于在队列中谁是下一个的原理确保访问均匀地分布到每个上游服务器；<br><strong>IP哈希：</strong> 通过<code>ip_hash</code>指令来激活，<code>Nginx</code>通过<code>IPv4</code>地址的前<code>3</code>个字节或者整个<code>IPv6</code>地址作为哈希键来实现，同一个IP地址总是能被映射到同一个上游服务器；<br><strong>最少连接数：</strong> 通过<code>least_conn</code>指令来激活，该算法通过选择一个活跃数最少的上游服务器进行连接。如果上游服务器处理能力不同，可以通过给<code>server</code>配置<code>weight</code>权重来说明，该算法将考虑到不同服务器的加权最少连接数。</p><h4 id="7-7-1-RR"><a href="#7-7-1-RR" class="headerlink" title="7.7.1 RR"></a>7.7.1 RR</h4><p><strong>简单配置</strong> ，这里我配置了<code>2</code>台服务器，当然实际上是一台，只是端口不一样而已，而<code>8081</code>的服务器是不存在的，也就是说访问不到，但是我们访问 <code>http://localhost</code> 的时候，也不会有问题，会默认跳转到<code>http://localhost:8080</code>具体是因为Nginx会自动判断服务器的状态，如果服务器处于不能访问（服务器挂了），就不会跳转到这台服务器，所以也避免了一台服务器挂了影响使用的情况，由于Nginx默认是RR策略，所以我们不需要其他更多的设置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> test &#123;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8080</span>;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8081</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">81</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">1024M</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://test;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>:<span class="variable">$server_port</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>负载均衡的核心代码为</strong> </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> test &#123;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8080</span>;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8081</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-7-2-权重"><a href="#7-7-2-权重" class="headerlink" title="7.7.2 权重"></a>7.7.2 权重</h4><blockquote><p>指定轮询几率，<code>weight</code>和访问比率成正比，用于后端服务器性能不均的情况。 例如</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> test &#123;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8080</span> weight=<span class="number">9</span>;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8081</span> weight=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>那么<code>10</code>次一般只会有<code>1</code>次会访问到<code>8081</code>，而有<code>9</code>次会访问到<code>8080</code></p></blockquote><h4 id="7-7-3-ip-hash"><a href="#7-7-3-ip-hash" class="headerlink" title="7.7.3 ip_hash"></a>7.7.3 ip_hash</h4><blockquote><p>上面的2种方式都有一个问题，那就是下一个请求来的时候请求可能分发到另外一个服务器，当我们的程序不是无状态的时候（采用了<code>session</code>保存数据），这时候就有一个很大的很问题了，比如把登录信息保存到了<code>session</code>中，那么跳转到另外一台服务器的时候就需要重新登录了，所以很多时候我们需要一个客户只访问一个服务器，那么就需要用<code>iphash</code>了，<code>iphash</code>的每个请求按访问<code>ip</code>的<code>hash</code>结果分配，这样每个访客固定访问一个后端服务器，可以解决<code>session</code>的问题。</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> test &#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8080</span>;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8081</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-7-4-fair"><a href="#7-7-4-fair" class="headerlink" title="7.7.4 fair"></a>7.7.4 fair</h4><blockquote><p>这是个第三方模块，按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend &#123;</span><br><span class="line">    fair;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8080</span>;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8081</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-7-5-url-hash"><a href="#7-7-5-url-hash" class="headerlink" title="7.7.5 url_hash"></a>7.7.5 url_hash</h4><blockquote><p>这是个第三方模块，按访问<code>url</code>的<code>hash</code>结果来分配请求，使每个<code>url</code>定向到同一个后端服务器，后端服务器为缓存时比较有效。 在<code>upstream</code>中加入<code>hash</code>语句，<code>server</code>语句中不能写入<code>weight</code>等其他的参数，<code>hash_method</code>是使用的<code>hash</code>算法</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend &#123;</span><br><span class="line">    <span class="attribute">hash</span> <span class="variable">$request_uri</span>;</span><br><span class="line">    <span class="attribute">hash_method</span> crc32;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8080</span>;</span><br><span class="line">    <span class="attribute">server</span> localhost:<span class="number">8081</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以上<code>5</code>种负载均衡各自适用不同情况下使用，所以可以根据实际情况选择使用哪种策略模式，不过<code>fair</code>和<code>url_hash</code>需要安装第三方模块才能使用</p></blockquote><p><strong>server指令可选参数：</strong></p><ol><li><code>weight</code>：设置一个服务器的访问权重，数值越高，收到的请求也越多；</li><li><code>fail_timeout</code>：在这个指定的时间内服务器必须提供响应，如果在这个时间内没有收到响应，那么服务器将会被标记为<code>down</code>状态；</li><li><code>max_fails</code>：设置在<code>fail_timeout</code>时间之内尝试对一个服务器连接的最大次数，如果超过这个次数，那么服务器将会被标记为<code>down</code>;</li><li><code>down</code>：标记一个服务器不再接受任何请求；</li><li><code>backup</code>：一旦其他服务器宕机，那么有该标记的机器将会接收请求。</li></ol><p><strong>keepalive指令：</strong></p><blockquote><p><code>Nginx</code>服务器将会为每一个<code>worker</code>进行保持同上游服务器的连接。</p></blockquote><h3 id="7-8-屏蔽ip"><a href="#7-8-屏蔽ip" class="headerlink" title="7.8 屏蔽ip"></a>7.8 屏蔽ip</h3><blockquote><p>在<code>nginx</code>的配置文件<code>nginx.conf</code>中加入如下配置，可以放到<code>http</code>, <code>server</code>, <code>location</code>, <code>limit_except</code>语句块，需要注意相对路径，本例当中<code>nginx.conf</code>，<code>blocksip.conf</code>在同一个目录中。</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">include</span> blockip.conf;</span><br></pre></td></tr></table></figure><blockquote><p>在<code>blockip.conf</code>里面输入内容，如：</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deny</span> <span class="number">165.91.122.67</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">deny</span> IP;   <span class="comment"># 屏蔽单个ip访问</span></span><br><span class="line"><span class="attribute">allow</span> IP;  <span class="comment"># 允许单个ip访问</span></span><br><span class="line"><span class="attribute">deny</span> all;  <span class="comment"># 屏蔽所有ip访问</span></span><br><span class="line"><span class="attribute">allow</span> all; <span class="comment"># 允许所有ip访问</span></span><br><span class="line"><span class="attribute">deny</span> <span class="number">123.0.0.0</span>/<span class="number">8</span>   <span class="comment"># 屏蔽整个段即从123.0.0.1到123.255.255.254访问的命令</span></span><br><span class="line">deny <span class="number">124.45.0.0</span>/<span class="number">16</span> <span class="comment"># 屏蔽IP段即从123.45.0.1到123.45.255.254访问的命令</span></span><br><span class="line">deny <span class="number">123.45.6.0</span>/<span class="number">24</span> <span class="comment"># 屏蔽IP段即从123.45.6.1到123.45.6.254访问的命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果你想实现这样的应用，除了几个IP外，其他全部拒绝</span></span><br><span class="line">allow <span class="number">1.1.1.1</span>; </span><br><span class="line"><span class="attribute">allow</span> <span class="number">1.1.1.2</span>;</span><br><span class="line"><span class="attribute">deny</span> all;</span><br></pre></td></tr></table></figure><h2 id="八、第三方模块安装方法"><a href="#八、第三方模块安装方法" class="headerlink" title="八、第三方模块安装方法"></a>八、第三方模块安装方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/你的安装目录  --add-module=/第三方模块目录</span><br></pre></td></tr></table></figure><h2 id="九、重定向"><a href="#九、重定向" class="headerlink" title="九、重定向"></a>九、重定向</h2><ul><li><code>permanent</code> 永久性重定向。请求日志中的状态码为301</li><li><code>redirect</code> 临时重定向。请求日志中的状态码为302</li></ul><h3 id="9-1-重定向整个网站"><a href="#9-1-重定向整个网站" class="headerlink" title="9.1 重定向整个网站"></a>9.1 重定向整个网站</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">server_name</span> old-site.com</span><br><span class="line">    return <span class="number">301</span> <span class="variable">$scheme</span>://new-site.com<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-2-重定向单页"><a href="#9-2-重定向单页" class="headerlink" title="9.2 重定向单页"></a>9.2 重定向单页</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">location</span> = /oldpage.html &#123;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">301</span> http://example.org/newpage.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-3-重定向整个子路径"><a href="#9-3-重定向整个子路径" class="headerlink" title="9.3 重定向整个子路径"></a>9.3 重定向整个子路径</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /old-site &#123;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/old-site/(.*)</span> http://example.org/new-site/<span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十、性能"><a href="#十、性能" class="headerlink" title="十、性能"></a>十、性能</h2><h3 id="10-1-内容缓存"><a href="#10-1-内容缓存" class="headerlink" title="10.1 内容缓存"></a>10.1 内容缓存</h3><blockquote><p>允许浏览器基本上永久地缓存静态内容。 <code>Nginx</code>将为您设置<code>Expires</code>和<code>Cache-Control</code>头信息。</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /static &#123;</span><br><span class="line">    <span class="attribute">root</span> /data;</span><br><span class="line">    <span class="attribute">expires</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果要求浏览器永远不会缓存响应（例如用于跟踪请求），请使用<code>-1</code>。</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> = /empty.gif &#123;</span><br><span class="line">    empty_gif;</span><br><span class="line">    <span class="attribute">expires</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-2-Gzip压缩"><a href="#10-2-Gzip压缩" class="headerlink" title="10.2 Gzip压缩"></a>10.2 Gzip压缩</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">gzip</span>  <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">gzip_buffers</span> <span class="number">16</span> <span class="number">8k</span>;</span><br><span class="line"><span class="attribute">gzip_comp_level</span> <span class="number">6</span>;</span><br><span class="line"><span class="attribute">gzip_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line"><span class="attribute">gzip_min_length</span> <span class="number">256</span>;</span><br><span class="line"><span class="attribute">gzip_proxied</span> any;</span><br><span class="line"><span class="attribute">gzip_vary</span> <span class="literal">on</span>;</span><br><span class="line">gzip_types</span><br><span class="line">    text/xml application/xml application/atom+xml application/rss+xml application/xhtml+xml image/svg+xml</span><br><span class="line">    text/javascript application/javascript application/x-javascript</span><br><span class="line">    text/x-json application/json application/x-web-app-manifest+json</span><br><span class="line">    text/css text/plain text/x-component</span><br><span class="line">    font/opentype application/x-font-ttf application/vnd.ms-fontobject</span><br><span class="line">    image/x-icon;</span><br><span class="line"><span class="attribute">gzip_disable</span>  <span class="string">"msie6"</span>;</span><br></pre></td></tr></table></figure><h3 id="10-3-打开文件缓存"><a href="#10-3-打开文件缓存" class="headerlink" title="10.3 打开文件缓存"></a>10.3 打开文件缓存</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">open_file_cache</span> max=<span class="number">1000</span> inactive=<span class="number">20s</span>;</span><br><span class="line"><span class="attribute">open_file_cache_valid</span> <span class="number">30s</span>;</span><br><span class="line"><span class="attribute">open_file_cache_min_uses</span> <span class="number">2</span>;</span><br><span class="line"><span class="attribute">open_file_cache_errors</span> <span class="literal">on</span>;</span><br></pre></td></tr></table></figure><h3 id="10-4-SSL缓存"><a href="#10-4-SSL缓存" class="headerlink" title="10.4 SSL缓存"></a>10.4 SSL缓存</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ssl_session_cache</span> shared:SSL:<span class="number">10m</span>;</span><br><span class="line"><span class="attribute">ssl_session_timeout</span> <span class="number">10m</span>;</span><br></pre></td></tr></table></figure><h3 id="10-5-上游Keepalive"><a href="#10-5-上游Keepalive" class="headerlink" title="10.5 上游Keepalive"></a>10.5 上游Keepalive</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> backend &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8080</span>;</span><br><span class="line">    <span class="attribute">keepalive</span> <span class="number">32</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="attribute">location</span> /api/ &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://backend;</span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-6-监控"><a href="#10-6-监控" class="headerlink" title="10.6 监控"></a>10.6 监控</h3><blockquote><p>使用<code>ngxtop</code>实时解析<code>nginx</code>访问日志，并且将处理结果输出到终端，功能类似于系统命令<code>top</code>。所有示例都读取<code>nginx</code>配置文件的访问日志位置和格式。如果要指定访问日志文件和<code>/</code>或日志格式，请使用<code>-f</code>和<code>-a</code>选项。</p></blockquote><p><strong>注意</strong>：在<code>nginx</code>配置中<code>/usr/local/nginx/conf/nginx.conf</code>日志文件必须是绝对路径。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 ngxtop</span></span><br><span class="line">pip install ngxtop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实时状态</span></span><br><span class="line">ngxtop</span><br><span class="line"><span class="comment"># 状态为404的前10个请求的路径：</span></span><br><span class="line">ngxtop top request_path --filter <span class="string">'status == 404'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送总字节数最多的前10个请求</span></span><br><span class="line">ngxtop --order-by <span class="string">'avg(bytes_sent) * count'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 排名前十位的IP，例如，谁攻击你最多</span></span><br><span class="line">ngxtop --group-by remote_addr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印具有4xx或5xx状态的请求，以及status和http referer</span></span><br><span class="line">ngxtop -i <span class="string">'status &gt;= 400'</span> <span class="built_in">print</span> request status http_referer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由200个请求路径响应发送的平均正文字节以'foo'开始：</span></span><br><span class="line">ngxtop avg bytes_sent --filter <span class="string">'status == 200 and request_path.startswith("foo")'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用“common”日志格式从远程机器分析apache访问日志</span></span><br><span class="line">ssh remote tail -f /var/<span class="built_in">log</span>/apache2/access.log | ngxtop -f common</span><br></pre></td></tr></table></figure><h2 id="十一、常见使用场景"><a href="#十一、常见使用场景" class="headerlink" title="十一、常见使用场景"></a>十一、常见使用场景</h2><h3 id="11-1-跨域问题"><a href="#11-1-跨域问题" class="headerlink" title="11.1 跨域问题"></a>11.1 跨域问题</h3><blockquote><p>在工作中，有时候会遇到一些接口不支持跨域，这时候可以简单的添加<code>add_headers</code>来支持<code>cors</code>跨域。配置如下：</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span> api.xxx.com;</span><br><span class="line">    </span><br><span class="line">  <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Origin'</span> <span class="string">'*'</span>;</span><br><span class="line">  <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Credentials'</span> <span class="string">'true'</span>;</span><br><span class="line">  <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Methods'</span> <span class="string">'GET,POST,HEAD'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:3000;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host  <span class="variable">$http_host</span>;    </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面更改头信息，还有一种，使用 <a href="http://nginx.org/en/docs/http/ngx_http_rewrite_module.html" target="_blank" rel="noopener">rewrite</a> 指令重定向URI来解决跨域问题。</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> test &#123;</span><br><span class="line">  <span class="attribute">server</span> <span class="number">127.0.0.1:8080</span>;</span><br><span class="line">  <span class="attribute">server</span> localhost:<span class="number">8081</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span> api.xxx.com;</span><br><span class="line">  <span class="attribute">location</span> / &#123; </span><br><span class="line">    <span class="attribute">root</span>  html;                   <span class="comment">#去请求../html文件夹里的文件</span></span><br><span class="line">    <span class="attribute">index</span>  index.html index.htm;  <span class="comment">#首页响应地址</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment"># 用于拦截请求，匹配任何以 /api/开头的地址，</span></span><br><span class="line">  <span class="comment"># 匹配符合以后，停止往下搜索正则。</span></span><br><span class="line">  <span class="attribute">location</span><span class="regexp"> ^~/api/</span>&#123; </span><br><span class="line">    <span class="comment"># 代表重写拦截进来的请求，并且只能对域名后边的除去传递的参数外的字符串起作用，</span></span><br><span class="line">    <span class="comment"># 例如www.a.com/proxy/api/msg?meth=1&amp;par=2重写，只对/proxy/api/msg重写。</span></span><br><span class="line">    <span class="comment"># rewrite后面的参数是一个简单的正则 ^/api/(.*)$，</span></span><br><span class="line">    <span class="comment"># $1代表正则中的第一个()，$2代表第二个()的值，以此类推。</span></span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/api/(.*)$</span> /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 把请求代理到其他主机 </span></span><br><span class="line">    <span class="comment"># 其中 http://www.b.com/ 写法和 http://www.b.com写法的区别如下</span></span><br><span class="line">    <span class="comment"># 如果你的请求地址是他 http://server/html/test.jsp</span></span><br><span class="line">    <span class="comment"># 配置一： http://www.b.com/ 后面有“/” </span></span><br><span class="line">    <span class="comment">#         将反向代理成 http://www.b.com/html/test.jsp 访问</span></span><br><span class="line">    <span class="comment"># 配置一： http://www.b.com 后面没有有“/” </span></span><br><span class="line">    <span class="comment">#         将反向代理成 http://www.b.com/test.jsp 访问</span></span><br><span class="line">    <span class="attribute">proxy_pass</span> http://test;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果 proxy_pass  URL 是 http://a.xx.com/platform/ 这种情况</span></span><br><span class="line">    <span class="comment"># proxy_cookie_path应该设置成 /platform/ / (注意两个斜杠之间有空格)。</span></span><br><span class="line">    <span class="attribute">proxy_cookie_path</span> /platfrom/ /;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass_header</span></span><br><span class="line">    <span class="comment"># 设置 Cookie 头通过</span></span><br><span class="line">    <span class="attribute">proxy_pass_header</span> Set-Cookie;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-2-跳转到带www的域上面"><a href="#11-2-跳转到带www的域上面" class="headerlink" title="11.2 跳转到带www的域上面"></a>11.2 跳转到带www的域上面</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="comment"># 配置正常的带www的域名</span></span><br><span class="line">    <span class="attribute">server_name</span> www.wangchujiang.com;</span><br><span class="line">    <span class="attribute">root</span> /home/www/wabg/download;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html =<span class="number">404</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="comment"># 这个要放到下面，</span></span><br><span class="line">    <span class="comment"># 将不带www的 wangchujiang.com 永久性重定向到  https://www.wangchujiang.com</span></span><br><span class="line">    <span class="attribute">server_name</span> wangchujiang.com;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^(.*)</span> https://www.wangchujiang.com<span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-3-代理转发"><a href="#11-3-代理转发" class="headerlink" title="11.3 代理转发"></a>11.3 代理转发</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> server-api&#123;</span><br><span class="line">    <span class="comment"># api 代理服务地址</span></span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:3110</span>;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">upstream</span> server-resource&#123;</span><br><span class="line">    <span class="comment"># 静态资源 代理服务地址</span></span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:3120</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">3111</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;      <span class="comment"># 这里指定域名</span></span><br><span class="line">    <span class="attribute">root</span> /home/www/server-statics;</span><br><span class="line">    <span class="comment"># 匹配 api 路由的反向代理到API服务</span></span><br><span class="line">    <span class="attribute">location</span><span class="regexp"> ^~/api/</span> &#123;</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://server-api;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 假设这里验证码也在API服务中</span></span><br><span class="line">    <span class="attribute">location</span><span class="regexp"> ^~/captcha</span> &#123;</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://server-api;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 假设你的图片资源全部在另外一个服务上面</span></span><br><span class="line">    <span class="attribute">location</span><span class="regexp"> ^~/img/</span> &#123;</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://server-resource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 路由在前端，后端没有真实路由，在路由不存在的 404状态的页面返回 /index.html</span></span><br><span class="line">    <span class="comment"># 这个方式使用场景，你在写React或者Vue项目的时候，没有真实路由</span></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html =<span class="number">404</span>;</span><br><span class="line">        <span class="comment">#                               ^ 空格很重要</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-4-代理转发连接替换"><a href="#11-4-代理转发连接替换" class="headerlink" title="11.4 代理转发连接替换"></a>11.4 代理转发连接替换</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span><span class="regexp"> ^~/api/upload</span> &#123;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> /wfs/v1/upload <span class="literal">break</span>;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://wfs-api;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-5-ssl配置"><a href="#11-5-ssl配置" class="headerlink" title="11.5 ssl配置"></a>11.5 ssl配置</h3><blockquote><p>超文本传输安全协议（缩写：<code>HTTPS</code>，英语：Hypertext Transfer Protocol Secure）是超文本传输协议和SSL/TLS的组合，用以提供加密通讯及对网络服务器身份的鉴定。<code>HTTPS</code>连接经常被用于万维网上的交易支付和企业信息系统中敏感信息的传输。<code>HTTPS</code>不应与在<code>RFC 2660</code>中定义的安全超文本传输协议（S-HTTP）相混。HTTPS 目前已经是所有注重隐私和安全的网站的首选，随着技术的不断发展，<code>HTTPS</code> 网站已不再是大型网站的专利，所有普通的个人站长和博客均可以自己动手搭建一个安全的加密的网站。</p></blockquote><p>创建<code>SSL</code>证书，如果你购买的证书，就可以直接下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /etc/nginx/ssl</span><br><span class="line"><span class="comment"># 创建了有效期100年，加密强度为RSA2048的SSL密钥key和X509证书文件。</span></span><br><span class="line">sudo openssl req -x509 -nodes -days 36500 -newkey rsa:2048 -keyout /etc/nginx/ssl/nginx.key -out /etc/nginx/ssl/nginx.crt</span><br><span class="line"><span class="comment"># 上面命令，会有下面需要填写内容</span></span><br><span class="line">Country Name (2 letter code) [AU]:US</span><br><span class="line">State or Province Name (full name) [Some-State]:New York</span><br><span class="line">Locality Name (eg, city) []:New York City</span><br><span class="line">Organization Name (eg, company) [Internet Widgits Pty Ltd]:Bouncy Castles, Inc.</span><br><span class="line">Organizational Unit Name (eg, section) []:Ministry of Water Slides</span><br><span class="line">Common Name (e.g. server FQDN or YOUR name) []:your_domain.com</span><br><span class="line">Email Address []:admin@your_domain.com</span><br></pre></td></tr></table></figure><p>创建自签证书</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">首先，创建证书和私钥的目录</span><br><span class="line"><span class="comment"># mkdir -p /etc/nginx/cert</span></span><br><span class="line"><span class="comment"># cd /etc/nginx/cert</span></span><br><span class="line">创建服务器私钥，命令会让你输入一个口令：</span><br><span class="line"><span class="comment"># openssl genrsa -des3 -out nginx.key 2048</span></span><br><span class="line">创建签名请求的证书（CSR）：</span><br><span class="line"><span class="comment"># openssl req -new -key nginx.key -out nginx.csr</span></span><br><span class="line">在加载SSL支持的Nginx并使用上述私钥时除去必须的口令：</span><br><span class="line"><span class="comment"># cp nginx.key nginx.key.org</span></span><br><span class="line"><span class="comment"># openssl rsa -in nginx.key.org -out nginx.key</span></span><br><span class="line">最后标记证书使用上述私钥和CSR：</span><br><span class="line"><span class="comment"># openssl x509 -req -days 365 -in nginx.csr -signkey nginx.key -out nginx.crt</span></span><br></pre></td></tr></table></figure><p>查看目前<code>nginx</code>编译选项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sbin/nginx -V</span><br></pre></td></tr></table></figure><p>输出下面内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nginx version: nginx/1.7.8</span><br><span class="line">built by gcc 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC)</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/local/nginx-1.7.8 --with-http_ssl_module --with-http_spdy_module --with-http_stub_status_module --with-pcre</span><br></pre></td></tr></table></figure><p>如果依赖的模块不存在，可以进入安装目录，输入下面命令重新编译安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx --with-http_stub_status_module --with-http_ssl_module</span><br></pre></td></tr></table></figure><p>运行完成之后还需要<code>make</code> (不用<code>make install</code>)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份nginx的二进制文件</span></span><br><span class="line">cp -rf /usr/<span class="built_in">local</span>/nginx/sbin/nginx　 /usr/<span class="built_in">local</span>/nginx/sbin/nginx.bak</span><br><span class="line"><span class="comment"># 覆盖nginx的二进制文件</span></span><br><span class="line">cp -rf objs/nginx   /usr/<span class="built_in">local</span>/nginx/sbin/</span><br></pre></td></tr></table></figure><p><strong>HTTPS server</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/nginx/ssl/nginx.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/nginx/ssl/nginx.key;</span><br><span class="line">    <span class="comment"># 禁止在header中出现服务器版本，防止黑客利用版本漏洞攻击</span></span><br><span class="line">    <span class="attribute">server_tokens</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="comment"># 设置ssl/tls会话缓存的类型和大小。如果设置了这个参数一般是shared，buildin可能会参数内存碎片，默认是none，和off差不多，停用缓存。如shared:SSL:10m表示我所有的nginx工作进程共享ssl会话缓存，官网介绍说1M可以存放约4000个sessions。 </span></span><br><span class="line">    <span class="attribute">ssl_session_cache</span>    shared:SSL:<span class="number">1m</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 客户端可以重用会话缓存中ssl参数的过期时间，内网系统默认5分钟太短了，可以设成30m即30分钟甚至4h。</span></span><br><span class="line">    <span class="attribute">ssl_session_timeout</span>  <span class="number">5m</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 选择加密套件，不同的浏览器所支持的套件（和顺序）可能会不同。</span></span><br><span class="line">    <span class="comment"># 这里指定的是OpenSSL库能够识别的写法，你可以通过 openssl -v cipher 'RC4:HIGH:!aNULL:!MD5'（后面是你所指定的套件加密算法） 来看所支持算法。</span></span><br><span class="line">    <span class="attribute">ssl_ciphers</span>  HIGH:!aNULL:!MD5;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置协商加密算法时，优先使用我们服务端的加密套件，而不是客户端浏览器的加密套件。</span></span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span>  <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>   html;</span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-6-强制将http重定向到https"><a href="#11-6-强制将http重定向到https" class="headerlink" title="11.6 强制将http重定向到https"></a>11.6 强制将http重定向到https</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  example.com;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^</span> https://<span class="variable">$http_host</span><span class="variable">$request_uri</span>? <span class="literal">permanent</span>;    <span class="comment"># 强制将http重定向到https</span></span><br><span class="line">    <span class="comment"># 在错误页面和“服务器”响应头字段中启用或禁用发射nginx版本。 防止黑客利用版本漏洞攻击</span></span><br><span class="line">    <span class="attribute">server_tokens</span> <span class="literal">off</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-7-两个虚拟主机"><a href="#11-7-两个虚拟主机" class="headerlink" title="11.7 两个虚拟主机"></a>11.7 两个虚拟主机</h3><blockquote><p>纯静态<code>-html</code>支持</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>          <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>     www.domain1.com;</span><br><span class="line">        <span class="attribute">access_log</span>      logs/domain1.access.log main;</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">index</span> index.html;</span><br><span class="line">            <span class="attribute">root</span>  /var/www/domain1.com/htdocs;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>          <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>     www.domain2.com;</span><br><span class="line">        <span class="attribute">access_log</span>      logs/domain2.access.log main;</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">index</span> index.html;</span><br><span class="line">            <span class="attribute">root</span>  /var/www/domain2.com/htdocs;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-8-虚拟主机标准配置"><a href="#11-8-虚拟主机标准配置" class="headerlink" title="11.8 虚拟主机标准配置"></a>11.8 虚拟主机标准配置</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">  <span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>          <span class="number">80</span> default;</span><br><span class="line">    <span class="attribute">server_name</span>     _ *;</span><br><span class="line">    <span class="attribute">access_log</span>      logs/default.access.log main;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">       <span class="attribute">index</span> index.html;</span><br><span class="line">       <span class="attribute">root</span>  /var/www/default/htdocs;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-9-防盗链"><a href="#11-9-防盗链" class="headerlink" title="11.9 防盗链"></a>11.9 防盗链</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~* \.(gif|jpg|png|swf|flv)$</span> &#123;</span><br><span class="line">   <span class="attribute">root</span> html</span><br><span class="line">   valid_referers <span class="literal">none</span> <span class="literal">blocked</span> <span class="regexp">*.nginxcn.com</span>;</span><br><span class="line">   <span class="attribute">if</span> (<span class="variable">$invalid_referer</span>) &#123;</span><br><span class="line">     <span class="attribute">rewrite</span><span class="regexp"> ^/</span> www.nginx.cn</span><br><span class="line">     <span class="comment">#return 404;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-10虚拟目录配置"><a href="#11-10虚拟目录配置" class="headerlink" title="11.10虚拟目录配置"></a>11.10虚拟目录配置</h3><blockquote><p><code>alias</code>指定的目录是准确的，<code>root</code>是指定目录的上级目录，并且该上级目录要含有<code>location</code>指定名称的同名目录。</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /img/ &#123;</span><br><span class="line">    <span class="attribute">alias</span> /var/www/image/;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 访问/img/目录里面的文件时，ningx会自动去/var/www/image/目录找文件</span></span><br><span class="line"><span class="attribute">location</span> /img/ &#123;</span><br><span class="line">    <span class="attribute">root</span> /var/www/image;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 访问/img/目录下的文件时，nginx会去/var/www/image/img/目录下找文件。]</span></span><br></pre></td></tr></table></figure><h3 id="11-11-防盗图配置"><a href="#11-11-防盗图配置" class="headerlink" title="11.11 防盗图配置"></a>11.11 防盗图配置</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ \/public\/(css|js|img)\/.*\.(js|css|gif|jpg|jpeg|png|bmp|swf)</span> &#123;</span><br><span class="line">    <span class="attribute">valid_referers</span> <span class="literal">none</span> <span class="literal">blocked</span> <span class="regexp">*.jslite.io</span>;</span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$invalid_referer</span>) &#123;</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^/</span>  http://wangchujiang.com/piratesp.png;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-12-屏蔽-git等文件"><a href="#11-12-屏蔽-git等文件" class="headerlink" title="11.12 屏蔽.git等文件"></a>11.12 屏蔽.git等文件</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~ (.git|.gitattributes|.gitignore|.svn)</span> &#123;</span><br><span class="line">    <span class="attribute">deny</span> all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11-13-域名路径加不加需要都能正常访问"><a href="#11-13-域名路径加不加需要都能正常访问" class="headerlink" title="11.13 域名路径加不加需要都能正常访问"></a>11.13 域名路径加不加需要都能正常访问</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http://wangchujiang.com/api/index.php?a=1&amp;name=wcj</span><br><span class="line">                                  ^ 有后缀</span><br><span class="line"></span><br><span class="line">http://wangchujiang.com/api/index?a=1&amp;name=wcj</span><br><span class="line">                                 ^ 没有后缀</span><br></pre></td></tr></table></figure><blockquote><p><code>nginx rewrite</code>规则如下：</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">rewrite</span><span class="regexp"> ^/(.*)/$</span> /index.php?/<span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line"><span class="attribute">if</span> (!-d <span class="variable">$request_filename</span>)&#123;</span><br><span class="line">        <span class="attribute">set</span> <span class="variable">$rule_1</span> <span class="number">1</span><span class="variable">$rule_1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">if</span> (!-f <span class="variable">$request_filename</span>)&#123;</span><br><span class="line">        <span class="attribute">set</span> <span class="variable">$rule_1</span> <span class="number">2</span><span class="variable">$rule_1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">if</span> (<span class="variable">$rule_1</span> = <span class="string">"21"</span>)&#123;</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^/</span> /index.php <span class="literal">last</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十二、错误问题"><a href="#十二、错误问题" class="headerlink" title="十二、错误问题"></a>十二、错误问题</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The plain HTTP request was sent to HTTPS port</span><br></pre></td></tr></table></figure><blockquote><p>解决办法，<code>fastcgi_param HTTPS $https if_not_empty</code> 添加这条规则，</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl; <span class="comment"># 注意这条规则</span></span><br><span class="line">    <span class="attribute">server_name</span>  my.domain.com;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">fastcgi_param</span> HTTPS <span class="variable">$https</span> if_not_empty;</span><br><span class="line">    <span class="attribute">fastcgi_param</span> HTTPS <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/ssl/certs/your.pem;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/ssl/private/your.key;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="comment"># Your config here...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十三、Nginx思维导图"><a href="#十三、Nginx思维导图" class="headerlink" title="十三、Nginx思维导图"></a>十三、Nginx思维导图</h2><p><img src="https://upload-images.jianshu.io/upload_images/1480597-f6a3fd62b01d77f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="nginx"></p><h2 id="十四、精品文章参考"><a href="#十四、精品文章参考" class="headerlink" title="十四、精品文章参考"></a>十四、精品文章参考</h2><ul><li><a href="https://my.oschina.net/u/3341316/blog/877206" target="_blank" rel="noopener">负载均衡原理的解析</a></li><li><a href="http://blog.githuber.cn/posts/73" target="_blank" rel="noopener">Nginx泛域名解析，实现多个二级域名 </a></li><li><a href="https://www.nginx.com/blog/inside-nginx-how-we-designed-for-performance-scale/" target="_blank" rel="noopener">深入 NGINX: 我们如何设计性能和扩展</a></li><li><a href="https://www.nginx.com/blog/inside-nginx-how-we-designed-for-performance-scale/" target="_blank" rel="noopener">Inside NGINX: How We Designed for Performance &amp; Scale</a></li><li><a href="http://tengine.taobao.org/book/index.html" target="_blank" rel="noopener">Nginx开发从入门到精通</a></li><li><a href="http://os.51cto.com/art/201703/535326.htm#topx" target="_blank" rel="noopener">Nginx的优化与防盗链</a></li><li><a href="https://segmentfault.com/a/1190000009769143" target="_blank" rel="noopener">实战开发一个Nginx扩展 (Nginx Module)</a></li><li><a href="https://my.oschina.net/xshuai/blog/917097" target="_blank" rel="noopener">Nginx+Keepalived(双机热备)搭建高可用负载均衡环境(HA)</a></li><li><a href="http://www.huxd.org/articles/2017/07/24/1500890692329.html" target="_blank" rel="noopener">Nginx 平滑升级</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzIxNzg5ODE0OA==&amp;mid=2247483708&amp;idx=1&amp;sn=90b0b1dccd9c337922a0588245277666&amp;chksm=97f38cf7a08405e1928e0b46d923d630e529e7db8ac7ca2a91310a075986f8bcb2cee5b4953d#rd" target="_blank" rel="noopener">Nginx最新模块—ngx_http_mirror_module分析可以做版本发布前的预先验证，进行流量放大后的压测等等</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、Nginx介绍&quot;&gt;&lt;a href=&quot;#一、Nginx介绍&quot; class=&quot;headerlink&quot; title=&quot;一、Nginx介绍&quot;&gt;&lt;/a&gt;一、Nginx介绍&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Nginx&lt;/code&gt;是一款面向性能设计的 
      
    
    </summary>
    
      <category term="Back-end" scheme="http://blog.poetries.top/categories/Back-end/"/>
    
    
      <category term="部署" scheme="http://blog.poetries.top/tags/%E9%83%A8%E7%BD%B2/"/>
    
      <category term="Nginx" scheme="http://blog.poetries.top/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Docker小结篇</title>
    <link href="http://blog.poetries.top/2018/11/20/docker-summary/"/>
    <id>http://blog.poetries.top/2018/11/20/docker-summary/</id>
    <published>2018-11-20T02:20:10.000Z</published>
    <updated>2018-11-28T12:50:38.997Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>Docker</code>是一个开源的应用容器引擎，而一个容器其实是一个虚拟化的独立的环境，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 <code>Linux</code> 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。</p></blockquote><ul><li><code>Docker</code> 的局限性之一，它只能用在 <code>64</code> 位的操作系统上。</li></ul><h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">yum install docker        <span class="comment"># CentOS 中安装</span></span><br><span class="line">apt-get install docker-ce <span class="comment"># Ubuntu 中安装</span></span><br><span class="line">pacman -S docker          <span class="comment"># Arch 中安装</span></span><br><span class="line">emerge --ask docker       <span class="comment"># Gentoo 中安装</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#=====================</span></span><br><span class="line"></span><br><span class="line">docker version      <span class="comment"># 通过查看版本，检查安装是否成功</span></span><br><span class="line"><span class="comment"># Client:</span></span><br><span class="line"><span class="comment">#  Version:         1.12.6</span></span><br><span class="line"><span class="comment">#  API version:     1.24</span></span><br><span class="line"><span class="comment">#  Package version: docker-1.12.6-55.gitc4618fb.el7.centos.x86_64</span></span><br><span class="line"><span class="comment">#  Go version:      go1.8.3</span></span><br><span class="line"><span class="comment">#  Git commit:      c4618fb/1.12.6</span></span><br><span class="line"><span class="comment">#  Built:           Thu Sep 21 22:33:52 2017</span></span><br><span class="line"><span class="comment">#  OS/Arch:         linux/amd64</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># Server:</span></span><br><span class="line"><span class="comment">#  Version:         1.12.6</span></span><br><span class="line"><span class="comment">#  API version:     1.24</span></span><br><span class="line"><span class="comment">#  Package version: docker-1.12.6-55.gitc4618fb.el7.centos.x86_64</span></span><br><span class="line"><span class="comment">#  Go version:      go1.8.3</span></span><br><span class="line"><span class="comment">#  Git commit:      c4618fb/1.12.6</span></span><br><span class="line"><span class="comment">#  Built:           Thu Sep 21 22:33:52 2017</span></span><br><span class="line"><span class="comment">#  OS/Arch:         linux/amd64</span></span><br></pre></td></tr></table></figure><h2 id="二、命令介绍"><a href="#二、命令介绍" class="headerlink" title="二、命令介绍"></a>二、命令介绍</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">$ docker --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">管理命令:</span><br><span class="line">  container   管理容器</span><br><span class="line">  image       管理镜像</span><br><span class="line">  network     管理网络</span><br><span class="line">命令：</span><br><span class="line">  attach      介入到一个正在运行的容器</span><br><span class="line">  build       根据 Dockerfile 构建一个镜像</span><br><span class="line">  commit      根据容器的更改创建一个新的镜像</span><br><span class="line">  cp          在本地文件系统与容器中复制 文件/文件夹</span><br><span class="line">  create      创建一个新容器</span><br><span class="line">  <span class="built_in">exec</span>        在容器中执行一条命令</span><br><span class="line">  images      列出镜像</span><br><span class="line">  <span class="built_in">kill</span>        杀死一个或多个正在运行的容器    </span><br><span class="line">  logs        取得容器的日志</span><br><span class="line">  pause       暂停一个或多个容器的所有进程</span><br><span class="line">  ps          列出所有容器</span><br><span class="line">  pull        拉取一个镜像或仓库到 registry</span><br><span class="line">  push        推送一个镜像或仓库到 registry</span><br><span class="line">  rename      重命名一个容器</span><br><span class="line">  restart     重新启动一个或多个容器</span><br><span class="line">  rm          删除一个或多个容器</span><br><span class="line">  rmi         删除一个或多个镜像</span><br><span class="line">  run         在一个新的容器中执行一条命令</span><br><span class="line">  search      在 Docker Hub 中搜索镜像</span><br><span class="line">  start       启动一个或多个已经停止运行的容器</span><br><span class="line">  stats       显示一个容器的实时资源占用</span><br><span class="line">  stop        停止一个或多个正在运行的容器</span><br><span class="line">  tag         为镜像创建一个新的标签</span><br><span class="line">  top         显示一个容器内的所有进程</span><br><span class="line">  unpause     恢复一个或多个容器内所有被暂停的进程</span><br></pre></td></tr></table></figure><h2 id="三、服务管理"><a href="#三、服务管理" class="headerlink" title="三、服务管理"></a>三、服务管理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service docker start       <span class="comment"># 启动 docker 服务，守护进程</span></span><br><span class="line">service docker stop        <span class="comment"># 停止 docker 服务</span></span><br><span class="line">chkconfig docker on        <span class="comment"># 设置为开机启动</span></span><br></pre></td></tr></table></figure><h2 id="四、镜像管理"><a href="#四、镜像管理" class="headerlink" title="四、镜像管理"></a>四、镜像管理</h2><p>镜像可以看做我们平时装系统的镜像，里面就是一个运行环境。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos:latest  <span class="comment"># 从docker.io中下载centos镜像到本地</span></span><br><span class="line">docker images              <span class="comment"># 查看已下载的镜像</span></span><br><span class="line">docker rm image_id         <span class="comment"># 删除镜像，指定镜像id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有镜像</span></span><br><span class="line"><span class="comment"># none 默认为 docker.io</span></span><br><span class="line">docker rmi $(docker images | grep none | awk <span class="string">'&#123;print $3&#125;'</span> | sort -r)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接进行进入命令行模式，exit命令退出。</span></span><br><span class="line">docker run -t -i nginx:latest /bin/bash</span><br></pre></td></tr></table></figure><h3 id="4-1-通过容器创建镜像"><a href="#4-1-通过容器创建镜像" class="headerlink" title="4.1 通过容器创建镜像"></a>4.1 通过容器创建镜像</h3><p>我们可以通过以下两种方式对镜像进行更改。</p><ol><li>从已经创建的容器中更新镜像，并且提交这个镜像</li><li>使用<code>Dockerfile</code> 指令来创建一个新的镜像</li></ol><p>下面通过已存在的容器创建一个新的镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit -m=<span class="string">"First Docker"</span> -a=<span class="string">"wcjiang"</span> a6b0a6cfdacf wcjiang/nginx:v1.2.1</span><br></pre></td></tr></table></figure><p><strong>上面命令参数说明</strong>：</p><ul><li><code>-m</code> 提交的描述信息</li><li><code>-a</code> 指定镜像作者</li><li><code>a6b0a6cfdacf</code> 记住这个是容器id，不是镜像id</li><li><code>wcjiang/nginx:v1.2.1</code> 创建的目标镜像名</li></ul><h3 id="4-2-发布自己的镜像"><a href="#4-2-发布自己的镜像" class="headerlink" title="4.2 发布自己的镜像"></a>4.2 发布自己的镜像</h3><ol><li>在<a href="https://www.docker.com/" target="_blank" rel="noopener">Docker</a> 注册账户，发布的镜像都在<a href="https://cloud.docker.com/repository/list" target="_blank" rel="noopener">这个页面里</a>展示</li><li>将上面做的镜像<code>nginx</code>，起个新的名字<code>nginx-test</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag wcjiang/nginx:v1.2.1 wcjiang/nginx-test:lastest</span><br></pre></td></tr></table></figure><ol start="3"><li>登录<code>docker</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login</span><br></pre></td></tr></table></figure><ol start="4"><li>上传<code>nginx-test</code>镜像</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker push wcjiang/nginx-test:lastest</span><br><span class="line"><span class="comment"># The push refers to a repository [docker.io/wcjiang/nginx-test]</span></span><br><span class="line"><span class="comment"># 2f5c6a3c22e3: Mounted from wcjiang/nginx</span></span><br><span class="line"><span class="comment"># cf516324493c: Mounted from wcjiang/nginx</span></span><br><span class="line"><span class="comment"># lastest: digest: sha256:73ae804b2c60327d1269aa387cf782f664bc91da3180d10dbd49027d7adaa789 size: 736</span></span><br></pre></td></tr></table></figure><h3 id="4-3-镜像中安装软件"><a href="#4-3-镜像中安装软件" class="headerlink" title="4.3 镜像中安装软件"></a>4.3 镜像中安装软件</h3><blockquote><p>通常情况下，使用<code>docker</code>官方镜像，如 <code>mysql</code>镜像，默认情况下镜像中啥软件也没有，通过下面命令安装你所需要的软件：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一次需要运行这个命令，确保源的索引是最新的</span></span><br><span class="line"><span class="comment"># 同步 /etc/apt/sources.list 和 /etc/apt/sources.list.d 中列出的源的索引</span></span><br><span class="line">apt-get update</span><br><span class="line"><span class="comment"># 做过上面更新同步之后，可以运行下面的命令了</span></span><br><span class="line">apt-get install vim</span><br></pre></td></tr></table></figure><blockquote><p>如果你安装了<code>CentOS</code>或者<code>Ubuntu</code>系统可以进入系统安装相关软件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入到centos7镜像系统</span></span><br><span class="line">docker run -i -t centos:7 /bin/bash</span><br><span class="line">yum update</span><br><span class="line">yum install vim</span><br></pre></td></tr></table></figure><h2 id="五、容器管理"><a href="#五、容器管理" class="headerlink" title="五、容器管理"></a>五、容器管理</h2><p>容器就像一个类的实例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run centos <span class="built_in">echo</span> <span class="string">"hello world"</span>  <span class="comment"># 在docker容器中运行hello world!</span></span><br><span class="line">docker run centos yum install -y wget <span class="comment"># 在docker容器中，安装wget软件</span></span><br><span class="line">docker ps                           <span class="comment"># 列出包括未运行的容器</span></span><br><span class="line">docker ps -a                        <span class="comment"># 查看所有容器(包括正在运行和已停止的)</span></span><br><span class="line">docker logs my-nginx                <span class="comment"># 查看 my-nginx 容器日志</span></span><br><span class="line"></span><br><span class="line">docker run -i -t centos /bin/bash   <span class="comment"># 启动一个容器</span></span><br><span class="line">docker inspect centos     <span class="comment"># 检查运行中的镜像</span></span><br><span class="line">docker commit 8bd centos  <span class="comment"># 保存对容器的修改</span></span><br><span class="line">docker commit -m <span class="string">"n changed"</span> my-nginx my-nginx-image <span class="comment"># 使用已经存在的容器创建一个镜像</span></span><br><span class="line">docker inspect -f &#123;&#123;.State.Pid&#125;&#125; 44fc0f0582d9 <span class="comment"># 获取id为 44fc0f0582d9 的PID进程编号</span></span><br></pre></td></tr></table></figure><h3 id="5-1-容器服务管理"><a href="#5-1-容器服务管理" class="headerlink" title="5.1 容器服务管理"></a>5.1 容器服务管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name my-nginx2 nginx <span class="comment"># 通过nginx镜像，【创建】容器名为 my-nginx2 的容器</span></span><br><span class="line">docker start my-nginx --restart=always    <span class="comment"># 【启动策略】一个已经存在的容器启动添加策略</span></span><br><span class="line">                               <span class="comment"># no - 容器不重启</span></span><br><span class="line">                               <span class="comment"># on-failure - 容器推出状态非0时重启</span></span><br><span class="line">                               <span class="comment"># always - 始终重启</span></span><br><span class="line">docker start my-nginx               <span class="comment"># 【启动】一个已经存在的容器</span></span><br><span class="line">docker restart my-nginx             <span class="comment"># 【重启】容器</span></span><br><span class="line">docker stop my-nginx                <span class="comment"># 【停止运行】一个容器</span></span><br><span class="line">docker <span class="built_in">kill</span> my-nginx                <span class="comment"># 【杀死】一个运行中的容器</span></span><br><span class="line">docker rename my-nginx new-nginx    <span class="comment"># 【重命名】容器</span></span><br><span class="line">docker rm new-nginx                 <span class="comment"># 【删除】容器</span></span><br></pre></td></tr></table></figure><h3 id="5-2-进入容器"><a href="#5-2-进入容器" class="headerlink" title="5.2 进入容器"></a>5.2 进入容器</h3><ol><li>创建一个守护状态的<code>Docker</code>容器</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd my-nginx /bin/bash</span><br></pre></td></tr></table></figure><ol start="2"><li>使用<code>docker ps</code>查看到该容器信息</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br><span class="line"><span class="comment"># CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span></span><br><span class="line"><span class="comment"># 6bd0496da64f        nginx               "/bin/bash"         20 seconds ago      Up 18 seconds       80/tcp              high_shirley</span></span><br></pre></td></tr></table></figure><ol start="3"><li>使用<code>docker exec</code>命令进入一个已经在运行的容器</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 6bd0496da64f /bin/bash</span><br></pre></td></tr></table></figure><blockquote><p>通常有下面几种方式进入<code>Docker</code>的容器，推荐使用<code>exec</code>，使用<code>attach</code>一直进入失败。</p></blockquote><ul><li>使用<code>docker attach</code></li><li>使用<code>SSH</code> <a href="http://www.oschina.net/translate/why-you-dont-need-to-run-sshd-in-docker?cmp" target="_blank" rel="noopener">为什么不需要在 Docker 容器中运行 sshd</a></li><li>使用<code>nsenter</code>进入Docker容器，<a href="https://github.com/jpetazzo/nsenter" target="_blank" rel="noopener">nsenter官方仓库</a></li><li>使用<code>docker exec</code>，在<code>1.3.*</code>之后提供了一个新的命令<code>exec</code>用于进入容器</li></ul><h2 id="六、使用Docker实战"><a href="#六、使用Docker实战" class="headerlink" title="六、使用Docker实战"></a>六、使用Docker实战</h2><h3 id="6-1-部署Nginx"><a href="#6-1-部署Nginx" class="headerlink" title="6.1 部署Nginx"></a>6.1 部署Nginx</h3><p>1.在 <code>docker hub</code> 中查找 <code>nginx</code>相关镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ docker search nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># INDEX       NAME                                                             DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span></span><br><span class="line"><span class="comment"># docker.io   docker.io/nginx                                                  Official build of Nginx.                        7006      [OK]</span></span><br><span class="line"><span class="comment"># docker.io   docker.io/jwilder/nginx-proxy                                    Automated Nginx reverse proxy for docker c...   1137                 [OK]</span></span><br><span class="line"><span class="comment"># docker.io   docker.io/richarvey/nginx-php-fpm                                Container running Nginx + PHP-FPM capable ...   453                  [OK]</span></span><br><span class="line"><span class="comment"># docker.io   docker.io/jrcs/letsencrypt-nginx-proxy-companion                 LetsEncrypt container to use with nginx as...   230                  [OK]</span></span><br><span class="line"><span class="comment"># docker.io   docker.io/kong                                                   Open-source Microservice &amp; API Management ...   116       [OK]</span></span><br><span class="line"><span class="comment"># docker.io   docker.io/webdevops/php-nginx                                    Nginx with PHP-FPM                              90                   [OK]</span></span><br></pre></td></tr></table></figure><p>2.拉取官方镜像，其中上面的非官方镜像是用户们根据自己的需要制作的镜像，方便大家的使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull nginx</span><br><span class="line"><span class="comment"># Using default tag: latest</span></span><br><span class="line"><span class="comment"># Trying to pull repository docker.io/library/nginx ...</span></span><br><span class="line"><span class="comment"># latest: Pulling from docker.io/library/nginx</span></span><br><span class="line"><span class="comment"># bc95e04b23c0: Pull complete</span></span><br><span class="line"><span class="comment"># 110767c6efff: Pull complete</span></span><br><span class="line"><span class="comment"># f081e0c4df75: Pull complete</span></span><br><span class="line"><span class="comment"># Digest: sha256:004ac1d5e791e705f12a1</span></span><br></pre></td></tr></table></figure><p>3.利用这个镜像启动一个新的容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run --name my-nginx -d -p 8080:80 nginx</span><br><span class="line"><span class="comment"># faaed6a2d63af248961aab59713e515c76aea447</span></span><br></pre></td></tr></table></figure><p>4.查看容器运行日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs my-nginx</span><br></pre></td></tr></table></figure><p>启动一个更复杂<code>Nginx</code>的例子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 上面的命令将本地文件中的 nginx.conf 配置文件挂载到容器，并且将要展示的静态页面也挂载到容器。</span></span><br><span class="line">docker run --name my-nginx \ </span><br><span class="line">    -v /host/path/nginx.conf:/etc/nginx/nginx.conf:ro \</span><br><span class="line">    -v /some/html:/usr/share/nginx/html:ro \</span><br><span class="line">    -p 8080:80 \</span><br><span class="line">    -d nginx</span><br></pre></td></tr></table></figure><p><code>-v</code> 参数语法为 <code>-v host dir:container dir[:ro|rw]</code></p><ul><li><code>--name</code> 为容器取一个名字</li><li><code>-p</code> 参数语法为 <code>-p host port:container port</code>; <code>-p 8080:80</code> 将主机上的<code>8080</code>端口绑定到容器上的80端口，因此在主机中访问<code>8080</code>端口时其实就是访问 <code>nginx</code> 容器的<code>80</code>端口</li><li><code>-d</code> 后台运行容器</li></ul><h3 id="6-2-部署MySQL"><a href="#6-2-部署MySQL" class="headerlink" title="6.2 部署MySQL"></a>6.2 部署MySQL</h3><blockquote><p>拉取官方的镜像，标签为<code>5.7</code>，<a href="https://docs.docker.com/samples/library/mysql/#-via-docker-stack-deploy-or-docker-compose" target="_blank" rel="noopener">Docker官方资料</a>、<a href="https://dev.mysql.com/doc/refman/8.0/en/docker-mysql-more-topics.html" target="_blank" rel="noopener">MySQL 官方资料</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br><span class="line"><span class="comment"># Trying to pull repository docker.io/library/mysql ...</span></span><br><span class="line"><span class="comment"># 5.7: Pulling from docker.io/library/mysql</span></span><br><span class="line"><span class="comment"># 85b1f47fba49: Already exists</span></span><br><span class="line"><span class="comment"># f34057997f40: Pull complete</span></span><br><span class="line"><span class="comment"># ....</span></span><br><span class="line"><span class="comment"># Digest: sha256:bfb22e93ee87c6aab6c1c9a4e70f28fa289f9ffae9fe8e173</span></span><br></pre></td></tr></table></figure><p><strong>创建目录</strong></p><ul><li><code>data</code>目录将映射为<code>mysql</code>容器配置的数据文件存放路径</li><li><code>logs</code>目录将映射为<code>mysql</code>容器的日志目录</li><li><code>conf</code>目录里的配置文件将映射为<code>mysql</code>容器的配置文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/mysql/data ~/mysql/logs ~/mysql/conf</span><br></pre></td></tr></table></figure><p><strong>运行容器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run --name my-mysql \ </span><br><span class="line">-p 3306:3306 \ </span><br><span class="line">-v <span class="variable">$PWD</span>/conf/my.cnf:/etc/mysql/my.cnf \ </span><br><span class="line">-v <span class="variable">$PWD</span>/logs:/logs \ </span><br><span class="line">-v <span class="variable">$PWD</span>/data:/mysql_data \ </span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \ </span><br><span class="line">-d mysql:5.7</span><br></pre></td></tr></table></figure><ul><li><code>-p 3306:3306</code>：将容器的<code>3306</code>端口映射到主机的<code>3306</code>端口</li><li><code>-v $PWD/conf/my.cnf:/etc/mysql/my.cnf</code>：将主机当前目录下的<code>conf/my.cnf</code>挂载到容器的<code>/etc/mysql/my.cnf</code></li><li><code>-v $PWD/logs:/logs</code>：将主机当前目录下的<code>logs</code>目录挂载到容器的<code>/logs</code></li><li><code>-v $PWD/data:/mysql_data</code>：将主机当前目录下的<code>data</code>目录挂载到容器的<code>/mysql_data</code></li><li><code>-e MYSQL_ROOT_PASSWORD=123456</code>：初始化root用户的密码</li></ul><h2 id="七、Docker私有仓库搭建"><a href="#七、Docker私有仓库搭建" class="headerlink" title="七、Docker私有仓库搭建"></a>七、Docker私有仓库搭建</h2><blockquote><p>通过官方提供的私有仓库镜像<code>registry</code>来搭建私有仓库。通过 <a href="https://humpback.github.io" target="_blank" rel="noopener">humpback</a> 快速搭建轻量级的Docker容器云管理平台。关于仓库配置说明请参见<a href="https://github.com/docker/distribution/blob/master/docs/configuration.md" target="_blank" rel="noopener">configuration.md</a></p></blockquote><h3 id="7-1-部署registry"><a href="#7-1-部署registry" class="headerlink" title="7.1 部署registry"></a>7.1 部署registry</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry:2.6.2</span><br></pre></td></tr></table></figure><blockquote><p>为了定制一些配置，和在 <a href="https://humpback.github.io" target="_blank" rel="noopener">humpback</a> 中使用，我们还需要提供一个定制化的配置文件（使用yml来编写配置文件），文件放在<code>/etc/docker/registry/config.yml</code>，如下：</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">0.1</span></span><br><span class="line"><span class="attr">log:</span></span><br><span class="line"><span class="attr">  fields:</span></span><br><span class="line"><span class="attr">    service:</span> <span class="string">registry</span></span><br><span class="line"><span class="attr">storage:</span> </span><br><span class="line"><span class="attr">  cache:</span></span><br><span class="line"><span class="attr">    blobdescriptor:</span> <span class="string">inmemory</span></span><br><span class="line"><span class="attr">  filesystem:</span></span><br><span class="line"><span class="attr">    rootdirectory:</span> <span class="string">/var/lib/registry</span></span><br><span class="line"><span class="attr">http:</span></span><br><span class="line"><span class="attr">  addr:</span> <span class="string">:7000</span></span><br><span class="line"><span class="attr">  secret:</span> <span class="string">docker-registry</span></span><br><span class="line"><span class="attr">  headers:</span></span><br><span class="line"><span class="attr">    X-Content-Type-Options:</span> <span class="string">[nosniff]</span></span><br><span class="line"><span class="attr">    Access-Control-Allow-Headers:</span> <span class="string">['*']</span></span><br><span class="line"><span class="attr">    Access-Control-Allow-Origin:</span> <span class="string">['*']</span></span><br><span class="line"><span class="attr">    Access-Control-Allow-Methods:</span> <span class="string">['GET,POST,PUT,DELETE']</span></span><br><span class="line"><span class="attr">health:</span></span><br><span class="line"><span class="attr">  storagedriver:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    interval:</span> <span class="number">10</span><span class="string">s</span></span><br><span class="line"><span class="attr">    threshold:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><blockquote><p>创建容器并运行，创建成功之后，可访问 <code>http://192.168.99.100:7000/v2/</code>，来检查仓库是否正常运行，当返回 <code>{}</code> 时，表示部署成功。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 7000:7000 --restart=always \</span><br><span class="line"> -v /var/lib/registry/:/var/lib/registry/ \</span><br><span class="line"> -v /etc/docker/registry/config.yml:/etc/docker/registry/config.yml \</span><br><span class="line"> --name humpback-registry \</span><br><span class="line"> registry:2.6.2</span><br></pre></td></tr></table></figure><p>推送镜像到私有仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从官方仓库拉取一个镜像</span></span><br><span class="line">docker pull nginx:1.13</span><br><span class="line"><span class="comment"># 为镜像 `nginx:1.13` 创建一个新标签 `192.168.99.100:7000/test-nginx:1.13`</span></span><br><span class="line">docker tag nginx:1.13 192.168.99.100:7000/<span class="built_in">test</span>-nginx:1.13</span><br><span class="line"><span class="comment"># 推送到私有仓库中</span></span><br><span class="line">docker push 192.168.99.100:7000/<span class="built_in">test</span>-nginx:1.13</span><br><span class="line"><span class="comment"># The push refers to a repository [192.168.99.100:7000/test-nginx]</span></span><br><span class="line"><span class="comment"># Get https://192.168.99.100:7000/v1/_ping: http: server gave HTTP response to HTTPS client</span></span><br></pre></td></tr></table></figure><blockquote><p>在推送到的时候报错误，默认是使用<code>https</code>提交，这个搭建的默认使用的是 <code>http</code>，解决方法两个：</p></blockquote><ol><li>创建一个<code>https</code>映射</li><li>将仓库地址加入到不安全的仓库列表中</li></ol><p>我们使用第二种方法，加入到不安全的仓库列表中，修改docker配置文件<code>vi /etc/docker/daemon.json</code> 添加 <code>insecure-registries</code>配置信息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">//... 其他配置项</span></span><br><span class="line">  <span class="comment">//关键配置项，将仓库将入到不安全的仓库列表中</span></span><br><span class="line">  <span class="string">"insecure-registries"</span>:[ </span><br><span class="line">    <span class="string">"192.168.99.100:7000"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>重启服务 <code>service docker restart</code>，默认情况下 push 是会报如下错误的：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker push 192.168.99.100:7000/<span class="built_in">test</span>-nginx:1.13</span><br><span class="line"><span class="comment"># The push refers to a repository [192.168.99.100:7000/test-nginx]</span></span><br><span class="line"><span class="comment"># a1a53f8d99b5: Retrying in 1 second</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># received unexpected HTTP status: 500 Internal Server Error</span></span><br></pre></td></tr></table></figure><blockquote><p>上面错误是<code>SELinux</code>强制访问控制安全系统，阻止导致的错误，通过下面方法禁用<code>SELinux</code>之后就可以push了。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0  </span><br><span class="line">getenforce   </span><br><span class="line"><span class="comment"># Permissive</span></span><br></pre></td></tr></table></figure><h3 id="7-2-部署Humpback"><a href="#7-2-部署Humpback" class="headerlink" title="7.2 部署Humpback"></a>7.2 部署Humpback</h3><blockquote><p>首先创建放持久化数据文件夹，<code>mkdir -p /opt/app/humpback-web</code>，里面存放持久化数据文件，会存储站点管理和分组信息，启动后请妥善保存。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建放持久化数据文件夹</span></span><br><span class="line">mkdir -p /opt/app/humpback-web</span><br><span class="line"><span class="comment"># 下载humpback-web镜像到本地</span></span><br><span class="line">docker pull humpbacks/humpback-web:1.0.0</span><br><span class="line"><span class="comment"># 启动 humpback-web 容器，将容器命名为 humpback-web</span></span><br><span class="line">docker run -d --net=host --restart=always \</span><br><span class="line"> -e HUMPBACK_LISTEN_PORT=7001 \</span><br><span class="line"> -v /opt/app/humpback-web/dbFiles:/humpback-web/dbFiles \</span><br><span class="line"> --name humpback-web \</span><br><span class="line"> humpbacks/humpback-web:1.0.0</span><br></pre></td></tr></table></figure><blockquote><p>访问站点，打开浏览器输入：·<a href="http://192.168.99.100:7001·" target="_blank" rel="noopener">http://192.168.99.100:7001·</a> ，默认账户：<code>admin</code> 密码：<code>123456</code></p></blockquote><h2 id="八、参考资料"><a href="#八、参考资料" class="headerlink" title="八、参考资料"></a>八、参考资料</h2><h3 id="8-1-官方英文资源"><a href="#8-1-官方英文资源" class="headerlink" title="8.1 官方英文资源"></a>8.1 官方英文资源</h3><ul><li>Docker官网：<a href="http://www.docker.com" target="_blank" rel="noopener">http://www.docker.com</a></li><li>Docker windows入门：<a href="https://docs.docker.com/windows/" target="_blank" rel="noopener">https://docs.docker.com/windows/</a></li><li>Docker Linux 入门：<a href="https://docs.docker.com/linux/" target="_blank" rel="noopener">https://docs.docker.com/linux/</a></li><li>Docker mac 入门：<a href="https://docs.docker.com/mac/" target="_blank" rel="noopener">https://docs.docker.com/mac/</a></li><li>Docker 用户指引：<a href="https://docs.docker.com/engine/userguide/" target="_blank" rel="noopener">https://docs.docker.com/engine/userguide/</a></li><li>Docker 官方博客：<a href="http://blog.docker.com/" target="_blank" rel="noopener">http://blog.docker.com/</a></li><li>Docker Hub: <a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a></li><li>Docker开源： <a href="https://www.docker.com/open-source" target="_blank" rel="noopener">https://www.docker.com/open-source</a></li></ul><h3 id="8-2-中文资源"><a href="#8-2-中文资源" class="headerlink" title="8.2 中文资源"></a>8.2 中文资源</h3><ul><li>Docker中文网站：<a href="http://www.docker.org.cn" target="_blank" rel="noopener">http://www.docker.org.cn</a></li><li>Docker中文文档：<a href="http://www.dockerinfo.net/document" target="_blank" rel="noopener">http://www.dockerinfo.net/document</a></li><li>Docker安装手册：<a href="http://www.docker.org.cn/book/install.html" target="_blank" rel="noopener">http://www.docker.org.cn/book/install.html</a></li><li>一小时Docker教程 ：<a href="https://blog.csphere.cn/archives/22" target="_blank" rel="noopener">https://blog.csphere.cn/archives/22</a></li><li>Docker中文指南：<a href="http://www.widuu.com/chinese_docker/index.html" target="_blank" rel="noopener">http://www.widuu.com/chinese_docker/index.html</a></li></ul><h3 id="8-3-其它资源"><a href="#8-3-其它资源" class="headerlink" title="8.3 其它资源"></a>8.3 其它资源</h3><ul><li><a href="https://github.com/eon01/DockerCheatSheet" target="_blank" rel="noopener">Docker 快速手册！</a></li><li><a href="http://www.runoob.com/docker/docker-tutorial.html" target="_blank" rel="noopener">Docker 教程</a></li><li><a href="http://blog.csdn.net/zhangchao19890805/article/details/52756865" target="_blank" rel="noopener">MySQL Docker 单一机器上如何配置自动备份</a></li><li><a href="https://segmentfault.com/t/docker" target="_blank" rel="noopener">https://segmentfault.com/t/docker</a></li><li><a href="https://github.com/docker/docker" target="_blank" rel="noopener">https://github.com/docker/docker</a></li><li><a href="https://wiki.openstack.org/wiki/Docker" target="_blank" rel="noopener">https://wiki.openstack.org/wiki/Docker</a></li><li><a href="https://wiki.archlinux.org/index.php/Docker" target="_blank" rel="noopener">https://wiki.archlinux.org/index.php/Docker</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Docker&lt;/code&gt;是一个开源的应用容器引擎，而一个容器其实是一个虚拟化的独立的环境，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 &lt;code&gt;Linux&lt;/code&gt; 机器上，也可以实现虚拟化。
      
    
    </summary>
    
      <category term="Back-end" scheme="http://blog.poetries.top/categories/Back-end/"/>
    
    
      <category term="Docker" scheme="http://blog.poetries.top/tags/Docker/"/>
    
      <category term="部署" scheme="http://blog.poetries.top/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>Docker入门基础篇</title>
    <link href="http://blog.poetries.top/2018/11/20/docker-base/"/>
    <id>http://blog.poetries.top/2018/11/20/docker-base/</id>
    <published>2018-11-20T02:12:08.000Z</published>
    <updated>2018-11-28T12:50:38.997Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>来源掘金小册docker资料</p></blockquote><h2 id="一、Docker-的四大组成对象"><a href="#一、Docker-的四大组成对象" class="headerlink" title="一、Docker 的四大组成对象"></a>一、<code>Docker</code> 的四大组成对象</h2><blockquote><p>在 <code>Docker</code> 体系里，有四个对象 (<code>Object</code>) 是我们不得不进行介绍的，因为几乎所有 <code>Docker</code> 以及周边生态的功能，都是围绕着它们所展开的。它们分别是：镜像 ( <code>Image</code> )、容器 ( <code>Container</code> )、网络 ( <code>Network</code> )、数据卷 ( <code>Volume</code> )…</p></blockquote><h3 id="1-1-镜像"><a href="#1-1-镜像" class="headerlink" title="1.1 镜像"></a>1.1 镜像</h3><blockquote><p>所谓镜像，可以理解为一个只读的文件包，其中包含了虚拟环境运行最原始文件系统的内容</p></blockquote><h3 id="1-2-容器"><a href="#1-2-容器" class="headerlink" title="1.2 容器"></a>1.2 容器</h3><blockquote><p>容器就是用来隔离虚拟环境的基础设施，而在 <code>Docker</code> 里，它也被引申为隔离出来的虚拟环境。</p></blockquote><ul><li>如果把镜像理解为编程中的类，那么容器就可以理解为类的实例。镜像内存放的是不可变化的东西，当以它们为基础的容器启动后，容器内也就成为了一个“活”的空间</li></ul><p><strong><code>Docker</code> 的容器应该有三项内容组成</strong></p><ul><li>一个 <code>Docker</code> 镜像</li><li>一个程序运行环境</li><li>一个指令集合</li></ul><h3 id="1-3-网络"><a href="#1-3-网络" class="headerlink" title="1.3 网络"></a>1.3 网络</h3><blockquote><p>在 <code>Docker</code> 中，实现了强大的网络功能，我们不但能够十分轻松的对每个容器的网络进行配置，还能在容器间建立虚拟网络，将数个容器包裹其中，同时与其他网络环境隔离</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/9/5/165a810ad2c81714" alt=""></p><blockquote><p><code>Docker</code> 能够在容器中营造独立的域名解析环境，这使得我们可以在不修改代码和配置的前提下直接迁移容器，<code>Docker</code> 会为我们完成新环境的网络适配。对于这个功能，我们甚至能够在不同的物理服务器间实现，让处在两台物理机上的两个 Docker 所提供的容器，加入到同一个虚拟网络中，形成完全屏蔽硬件的效果…</p></blockquote><h3 id="1-4-数据卷"><a href="#1-4-数据卷" class="headerlink" title="1.4 数据卷"></a>1.4 数据卷</h3><ol><li>除了网络之外，文件也是重要的进行数据交互的资源。在以往的虚拟机中，我们通常直接采用虚拟机的文件系统作为应用数据等文件的存储位置。然而这种方式其实并非完全安全的，当虚拟机或者容器出现问题导致文件系统无法使用时，虽然我们可以很快的通过镜像重置文件系统使得应用快速恢复运行，但是之前存放的数据也就消失了。</li><li>为了保证数据的独立性，我们通常会单独挂载一个文件系统来存放数据。这种操作在虚拟机中是繁琐的，因为我们不但要搞定挂载在不同宿主机中实现的方法，还要考虑挂载文件系统兼容性，虚拟操作系统配置等问题。值得庆幸的是，这些在 Docker 里都已经为我们轻松的实现了，我们只需要简单的一两个命令或参数，就能完成文件系统目录的挂载。</li><li>能够这么简单的实现挂载，主要还是得益于 <code>Docker</code> 底层的 Union File System 技术。在 <code>UnionFS</code> 的加持下，除了能够从宿主操作系统中挂载目录外，还能够建立独立的目录持久存放数据，或者在容器间共享。</li><li>在 <code>Docker</code> 中，通过这几种方式进行数据共享或持久化的文件或目录，我们都称为数据卷 ( <code>Volume</code> )…</li></ol><h2 id="二、搭建运行Docker环境"><a href="#二、搭建运行Docker环境" class="headerlink" title="二、搭建运行Docker环境"></a>二、搭建运行Docker环境</h2><h3 id="2-1-Docker-Engine-的版本"><a href="#2-1-Docker-Engine-的版本" class="headerlink" title="2.1 Docker Engine 的版本"></a>2.1 Docker Engine 的版本</h3><p><strong>对于 Docker Engine 来说，其主要分为两个系列</strong></p><ul><li>社区版 ( <code>CE</code>, Community Edition )</li><li>企业版 ( <code>EE</code>, Enterprise Edition )</li></ul><ol><li>社区版 ( <code>Docker Engine CE</code> ) 主要提供了 <code>Docker</code> 中的容器管理等基础功能，主要针对开发者和小型团队进行开发和试验。而企业版 ( <code>Docker Engine EE</code> ) 则在社区版的基础上增加了诸如容器管理、镜像管理、插件、安全等额外服务与功能，为容器的稳定运行提供了支持，适合于中大型项目的线上运行…</li><li>社区版和企业版的另一区别就是免费与收费了。对于我们开发者来说，社区版已经提供了 <code>Docker</code> 所有核心的功能，足够满足我们在开发、测试中的需求，所以我们直接选择使用社区版进行开发即可。在这本小册中，所有的内容也是围绕着社区版的 <code>Docker Engine</code> 展开的…</li><li>从另外一个角度，<code>Docker Engine</code> 的迭代版本又会分为稳定版 ( <code>Stable release</code> ) 和预览版 ( <code>Edge release</code> )。不论是稳定版还是预览版，它们都会以发布时的年月来命名版本号，例如如 17 年 3 月的版本，版本号就是 17.03…</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/8/29/165863f7df36e81f" alt=""></p><ol><li><code>Docker Engine</code> 的稳定版固定为每三个月更新一次，而预览版则每月都会更新。在预览版中可以及时掌握到最新的功能特性，不过这对于我们仅是使用 <code>Docker</code> 的开发者来说，意义并不是特别重大的，所以我还是更推荐安装更有保障的稳定版本。</li><li>在主要版本之外，<code>Docker</code> 官方也以解决 <code>Bug</code> 为主要目的，不定期发布次要版本。次要版本的版本号由主要版本和发布序号组成，如：<code>17.03.2</code>就是对 <code>17.03</code> 版本的第二次修正…</li></ol><h3 id="2-2-Docker-的环境依赖"><a href="#2-2-Docker-的环境依赖" class="headerlink" title="2.2 Docker 的环境依赖"></a>2.2 Docker 的环境依赖</h3><ul><li>由于 <code>Docker</code> 的容器隔离依赖于 <code>Linux</code> 内核中的相关支持，所以使用 <code>Docker</code> 首先需要确保安装机器的 <code>Linux kernel</code>中包含 <code>Docker</code> 所需要使用的特性。以目前 Docker 官方主要维护的版本为例，我们需要使用基于 <code>Linux kernel 3.10</code> 以上版本的 <code>Linux</code> 系统来安装 <code>Docker.</code>..</li><li>也许 <code>Linux kernel</code> 的版本还不够直观，下面的表格就直接展示了 <code>Docker</code> 对主流几款 <code>Linux</code> 系统版本的要求</li></ul><table><thead><tr><th>操作系统</th><th>支持的系统版本</th></tr></thead><tbody><tr><td><code>CentOS</code></td><td><code>CentOS 7</code></td></tr><tr><td><code>Debian</code></td><td><code>Debian Wheezy 7.7 (LTS)</code></td></tr><tr><td><code>Debian</code></td><td><code>Jessie 8 (LTS)</code></td></tr><tr><td><code>Debian</code></td><td><code>Stretch 9</code></td></tr><tr><td><code>Debian</code></td><td><code>Buster 10</code></td></tr><tr><td><code>Fedora</code></td><td><code>Fedora 26</code>、<code>Fedora 27</code></td></tr><tr><td><code>Ubuntu</code></td><td><code>Ubuntu Trusty 14.04 (LTS)</code></td></tr><tr><td><code>Ubuntu</code></td><td><code>Xenial 16.04 (LTS)</code></td></tr><tr><td><code>Ubuntu</code></td><td><code>Artful 17.10...</code></td></tr></tbody></table><h3 id="2-3-在-Linux-系统中安装-Docker"><a href="#2-3-在-Linux-系统中安装-Docker" class="headerlink" title="2.3 在 Linux 系统中安装 Docker"></a>2.3 在 Linux 系统中安装 Docker</h3><blockquote><p>因为 <code>Docker</code> 本身就基于 <code>Linux</code> 的核心能力，同时目前主流的 <code>Linux</code> 系统中所拥有的软件包管理程序，已经可以很轻松的帮助我们处理各种依赖问题，所以在 <code>Linux</code>中安装 <code>Docker</code> 并非什么难事</p></blockquote><p><strong>CentOS</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">$</span><br><span class="line">$ sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">$ sudo yum install docker-ce</span><br><span class="line">$</span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line">$ sudo systemctl start docker...</span><br></pre></td></tr></table></figure><p><strong>Debian</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install apt-transport-https ca-certificates curl gnupg2 software-properties-common</span><br><span class="line">$</span><br><span class="line">$ curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -</span><br><span class="line">$ sudo add-apt-repository <span class="string">"deb [arch=amd64] https://download.docker.com/linux/debian <span class="variable">$(lsb_release -cs)</span> stable"</span></span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install docker-ce</span><br><span class="line">$</span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line">$ sudo systemctl start docker...</span><br></pre></td></tr></table></figure><p><strong>Fedora</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo dnf -y install dnf-plugins-core</span><br><span class="line">$</span><br><span class="line">$ sudo dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo</span><br><span class="line">$ sudo dnf install docker-ce</span><br><span class="line">$</span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line">$ sudo systemctl start docker...</span><br></pre></td></tr></table></figure><p><strong>Ubuntu</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line">$</span><br><span class="line">$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">$ sudo add-apt-repository <span class="string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class="variable">$(lsb_release -cs)</span> stable"</span></span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install docker-ce</span><br><span class="line">$</span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line">$ sudo systemctl start docker...</span><br></pre></td></tr></table></figure><h3 id="2-4-上手使用"><a href="#2-4-上手使用" class="headerlink" title="2.4 上手使用"></a>2.4 上手使用</h3><blockquote><p>在安装 <code>Docker</code> 完成之后，我们需要先启动 <code>docker daemon</code> 使其能够为我们提供 <code>Docker</code> 服务，这样我们才能正常使用 <code>Docker</code></p></blockquote><p>在我们通过软件包的形式安装 <code>Docker Engine</code> 时，安装包已经为我们在 <code>Linux</code> 系统中注册了一个 <code>Docker</code> 服务，所以我们不需要直接启动 <code>docker daemon</code> 对应的 <code>dockerd</code> 这个程序，而是直接启动 <code>Docker</code> 服务即可。启动的 <code>Docker</code> 服务的命令其实我已经包含在了前面谈到的安装命令中，也就是…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><blockquote><p>当然，为了实现 <code>Docker</code> 服务开机自启动，我们还可以运行这个命令</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl enable docker</span><br></pre></td></tr></table></figure><p><strong>docker version</strong></p><blockquote><p>在 <code>Docker</code>服务启动之后，我们先来尝试一个最简单的查看 <code>Docker</code> 版本的命令：<code>docker version</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker version</span><br><span class="line">Client:</span><br><span class="line"> Version:           18.06.1-ce</span><br><span class="line"> API version:       1.38</span><br><span class="line"> Go version:        go1.10.3</span><br><span class="line"> Git commit:        e68fc7a</span><br><span class="line"> Built:             Tue Aug 21 17:23:03 2018</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Experimental:      false</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          18.06.1-ce</span><br><span class="line">  API version:      1.38 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.10.3</span><br><span class="line">  Git commit:       e68fc7a</span><br><span class="line">  Built:            Tue Aug 21 17:25:29 2018</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     false...</span><br></pre></td></tr></table></figure><blockquote><p>这个命令能够显示 <code>Docker C/S</code>结构中的服务端 ( <code>docker daemon</code> ) 和客户端 ( <code>docker CLI</code> ) 相关的版本信息。在默认情况下，<code>docker CLI</code> 连接的是本机运行的 <code>docker daemon</code> ，由于 <code>docker daemon</code> 和 <code>docker CLI</code> 通过<code>RESTful</code> 接口进行了解耦，所以我们也能修改配置用于操作其他机器上运行的 <code>docker daemon</code>…</p></blockquote><p><strong>docker info</strong></p><blockquote><p>如果想要了解 <code>Docker Engine</code> 更多相关的信息，我们还可以通过 <code>docker info</code> 这个命令</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker info</span><br><span class="line">Containers: 0</span><br><span class="line"> Running: 0</span><br><span class="line"> Paused: 0</span><br><span class="line"> Stopped: 0</span><br><span class="line">Images: 0</span><br><span class="line">Server Version: 18.06.0-ce</span><br><span class="line">Storage Driver: overlay2</span><br><span class="line"> Backing Filesystem: extfs</span><br><span class="line"> Supports d_type: true</span><br><span class="line"> Native Overlay Diff: true</span><br><span class="line">Logging Driver: json-file</span><br><span class="line">Cgroup Driver: cgroupfs</span><br><span class="line">## ......</span><br><span class="line">Live Restore Enabled: false...</span><br></pre></td></tr></table></figure><p><strong>配置国内镜像源</strong></p><blockquote><p>一个由 Docker 官方提供的国内镜像源 registry.docker-cn.com</p></blockquote><p>那么有了地址，我们要如何将其配置到 Docker 中呢？</p><blockquote><p>在 Linux 环境下，我们可以通过修改 <code>/etc/docker/daemon.json</code> ( 如果文件不存在，你可以直接创建它 ) 这个 Docker 服务的配置文件达到效果</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;registry-mirrors&quot;: [</span><br><span class="line">        &quot;https://registry.docker-cn.com&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在修改之后，别忘了重新启动 <code>docker daemon</code> 来让配置生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p>要验证我们配置的镜像源是否生效，我们可以通过 <code>docker info</code> 来查阅当前注册的镜像源列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker info</span><br><span class="line">## ......</span><br><span class="line">Registry Mirrors:</span><br><span class="line"> https://registry.docker-cn.com/</span><br><span class="line">## ......</span><br></pre></td></tr></table></figure><h2 id="三、在-Windows-和-Mac-中使用-Docker"><a href="#三、在-Windows-和-Mac-中使用-Docker" class="headerlink" title="三、在 Windows 和 Mac 中使用 Docker"></a>三、在 Windows 和 Mac 中使用 Docker</h2><h3 id="3-1-Docker-Desktop"><a href="#3-1-Docker-Desktop" class="headerlink" title="3.1 Docker Desktop"></a>3.1 Docker Desktop</h3><p><strong>对于 Windows 系统来说，安装 Docker for Windows 需要符合以下条件</strong></p><ul><li>必须使用 <code>Windows 10 Pro</code> ( 专业版 )</li><li>必须使用 <code>64 bit</code> 版本的 <code>Windows</code></li></ul><p><strong>对于 macOS 系统来说，安装 Docker for Mac 需要符合以下条件</strong></p><ul><li><code>Mac</code>硬件必须为 <code>2010</code> 年以后的型号</li><li>必须使用 <code>macOS El Capitan 10.11</code> 及以后的版本</li></ul><blockquote><p>另外，虚拟机软件 <code>VirtualBox</code> 与 <code>Docker Desktop</code> 兼容性不佳，建议在安装 <code>Docker for Windows</code>和 <code>Docker for Mac</code> 之前先卸载 <code>VirtualBox</code></p></blockquote><p>在确认系统能够支持 <code>Docker Desktop</code> 之后，我们就从 <code>Docker</code> 官方网站下载这两个软件的安装程序，这里直接附上 <code>Docker Store</code> 的下载链接，供大家直接下载</p><ul><li><a href="https://store.docker.com/editions/community/docker-ce-desktop-windows" target="_blank" rel="noopener">Docker for Windows</a></li><li><a href="https://store.docker.com/editions/community/docker-ce-desktop-mac" target="_blank" rel="noopener">Docker for Mac</a></li></ul><h3 id="3-2-启动-Docker"><a href="#3-2-启动-Docker" class="headerlink" title="3.2 启动 Docker"></a>3.2 启动 Docker</h3><ul><li>像 <code>Linux</code> 中一样，我们要在 <code>Windows</code> 和 <code>macOS</code> 中使用 <code>Docker</code> 前，我们需要先将 <code>Docker</code>服务启动起来。在这两个系统中，我们需要启动的就是刚才我们安装的 <code>Docker for Windows</code> 和 <code>Docker for Mac</code> 了…</li><li>启动两个软件的方式很简单，我们只需要通过操作系统的快捷访问功能查找到 <code>Docker for Windows</code> 或 <code>Docker for Mac</code> 并启动即可</li><li>打开软件之后，我们会在<code>Windows</code> 的任务栏或者 <code>macOS</code> 的状态栏中看到 <code>Docker</code> 的大鲸鱼图标</li></ul><p><img src="https://user-gold-cdn.xitu.io/2018/9/10/165c1d1fb7030b63" alt=""></p><blockquote><p><code>Docker Desktop</code> 为我们在 <code>Windows</code> 和 <code>macOS</code> 中使用 <code>Docker</code>提供了与 <code>Linux</code> 中几乎一致的方法，我们只需要打开 <code>Windows</code> 中的 <code>PowerShell</code> 获得 <code>macOS</code> 中的 Terminal，亦或者 <code>Git Bash</code>、<code>Cmder</code>、<code>iTerm</code>等控制台类软件，输入 <code>docker</code> 命令即可…</p></blockquote><p>使用 <code>docker version</code> 能够看到 <code>Docker</code> 客户端的信息，我们可以在这里发现程序运行的平台</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">λ docker version</span><br><span class="line">Client:</span><br><span class="line">## ......</span><br><span class="line"> OS/Arch:  windows/amd64</span><br><span class="line">## ......</span><br></pre></td></tr></table></figure><h3 id="3-3-Docker-Desktop-的实现原理"><a href="#3-3-Docker-Desktop-的实现原理" class="headerlink" title="3.3 Docker Desktop 的实现原理"></a>3.3 Docker Desktop 的实现原理</h3><blockquote><p>我们知道 <code>Docker</code> 的核心功能，也就是容器实现，是基于 <code>Linux</code>内核中 <code>Namespaces</code>、<code>CGroups</code> 等功能的。那么大体上可以说，<code>Docker</code> 是依赖于 <code>Linux</code> 而存在的。那么问题来了，<code>Docker Desktop</code> 是如何实现让我们在 <code>Windows</code>和 <code>macOS</code> 中如此顺畅的使用 Docker 的呢？…</p></blockquote><ul><li>其实 <code>Docker Desktop</code> 的实现逻辑很简单：既然 <code>Windows</code> 和 <code>macOS</code> 中没有 <code>Docker</code>能够利用的 <code>Linux</code> 环境，那么我们生造一个 <code>Linux</code> 环境就行啦！<code>Docker for Windows</code>和 <code>Docker for Mac</code> 正是这么实现的…</li><li>由于虚拟化在云计算时代的广泛使用，<code>Windows</code> 和 <code>MacOS</code> 也将虚拟化引入到了系统本身的实现中，这其中就包含了之前我们所提到的通过 <code>Hypervisor</code>实现虚拟化的功能。在 <code>Windows</code> 中，我们可以通过 <code>Hyper-V</code> 实现虚拟化，而在 <code>macOS</code> 中，我们可以通过 HyperKit 实现虚拟化…</li><li><code>Docker for Windows</code> 和 <code>Docker for Mac</code> 这里利用了这两个操作系统提供的功能来搭建一个虚拟 <code>Linux</code> 系统，并在其之上安装和运行 <code>docker daemon</code>。</li></ul><p><img src="https://user-gold-cdn.xitu.io/2018/9/12/165cb3b94b24b951" alt=""></p><blockquote><p>除了搭建 <code>Linux</code> 系统并运行 <code>docker daemon</code> 之外，<code>Docker Desktop</code> 系列最突出的一项功能就是我们能够直接通过 <code>PowerShell</code>、<code>Terminal</code> 这类的控制台软件在 <code>Windows</code> 和 <code>macOS</code> 中直接操作虚拟 Linux 系统中运行的 docker daemon…</p></blockquote><h3 id="3-4-主机文件挂载"><a href="#3-4-主机文件挂载" class="headerlink" title="3.4 主机文件挂载"></a>3.4 主机文件挂载</h3><ol><li>控制能够直接在主机操作系统中进行，给我们使用 Docker Desktop 系列软件提供了极大的方便。除此之外，文件的挂载也是 Docker Desktop 所提供的大幅简化我们工作效率且简化使用的功能之一。</li><li>之前我们谈到了，Docker 容器中能够通过数据卷的方式挂载宿主操作系统中的文件或目录，宿主操作系统在 Windows 和 macOS 环境下的 Docker Desktop 中，指的是虚拟的 Linux 系统。</li><li>当然，如果只能从虚拟的 Linux 系统中进行挂载，显然不足以达到我们的期望，因为最方便的方式必然是直接从 Windows 和 macOS 里挂载文件了。</li><li>要实现我们所期望的效果，也就是 Docker 容器直接挂载主机系统的目录，我们可以先将目录挂载到虚拟 Linux 系统上，再利用 Docker 挂载到容器之中。这个过程被集成在了 Docker Desktop 系列软件中，我们不需要人工进行任何操作，整个过程已经实现了自动化…</li></ol><p><img src="https://user-gold-cdn.xitu.io/2018/9/11/165c8400bf8f809e" alt=""></p><blockquote><p><code>Docker Desktop</code> 对 <code>Windows</code> 和 <code>macOS</code> 到虚拟 <code>Linux</code> 系统，再到 <code>Docker</code> 容器中的挂载进行了实现，我们只需要直接选择能够被挂载的主机目录 ( 这个过程更多也是为了安全所考虑 )，剩下的过程全部由 Docker Desktop 代替我们完成。…</p></blockquote><h2 id="四、使用容器：镜像与容器"><a href="#四、使用容器：镜像与容器" class="headerlink" title="四、使用容器：镜像与容器"></a>四、使用容器：镜像与容器</h2><h3 id="4-1-Docker-镜像"><a href="#4-1-Docker-镜像" class="headerlink" title="4.1 Docker 镜像"></a>4.1 Docker 镜像</h3><ol><li>如果进行形象的表述，我们可以将 <code>Docker</code> 镜像理解为包含应用程序以及其相关依赖的一个基础文件系统，在 <code>Docker</code> 容器启动的过程中，它以只读的方式被用于创建容器的运行环境。</li><li>从另一个角度看，在之前的小节里我们讲到了，<code>Docker</code> 镜像其实是由基于 <code>UnionFS</code> 文件系统的一组镜像层依次挂载而得，而每个镜像层包含的其实是对上一镜像层的修改，这些修改其实是发生在容器运行的过程中的。所以，我们也可以反过来理解，镜像是对容器运行环境进行持久化存储的结果…</li></ol><h3 id="4-2-查看镜像"><a href="#4-2-查看镜像" class="headerlink" title="4.2 查看镜像"></a>4.2 查看镜像</h3><ol><li>镜像是由 <code>Docker</code> 进行管理的，所以它们的存储位置和存储方式等我们并不需要过多的关心，我们只需要利用 <code>Docker</code> 所提供的一些接口或命令对它们进行控制即可。</li><li>如果要查看当前连接的 <code>docker daemon</code> 中存放和管理了哪些镜像，我们可以使用 <code>docker images</code>这个命令 ( <code>Linux</code>、<code>macOS</code> 还是 <code>Windows</code> 上都是一致的 )</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">php                 7-fpm               f214b5c48a25        9 days ago          368MB</span><br><span class="line">redis               3.2                 2fef532eadb3        11 days ago         76MB</span><br><span class="line">redis               4.0                 e1a73233e3be        11 days ago         83.4MB</span><br><span class="line">cogset/cron         latest              c01d5ac6fc8a        15 months ago       125MB...</span><br></pre></td></tr></table></figure><blockquote><p>在 <code>docker images</code> 命令的结果中，我们可以看到镜像的 <code>ID</code> ( <code>IMAGE ID</code>)、构建时间 ( <code>CREATED</code> )、占用空间 ( <code>SIZE</code> ) 等数据</p></blockquote><p>这里需要注意一点，我们发现在结果中镜像 <code>ID</code> 的长度只有 <code>12</code> 个字符，这和我们之前说的 <code>64</code> 个字符貌似不一致。其实为了避免屏幕的空间都被这些看似“乱码”的镜像 <code>ID</code> 所挤占，所以 <code>Docker</code> 只显示了镜像 <code>ID</code> 的前 <code>12</code> 个字符，大部分情况下，它们已经能够让我们在单一主机中识别出不同的镜像了…</p><h3 id="4-3-镜像命名"><a href="#4-3-镜像命名" class="headerlink" title="4.3 镜像命名"></a>4.3 镜像命名</h3><ul><li>镜像层的 <code>ID</code> 既可以识别每个镜像层，也可以用来直接识别镜像 ( 因为根据最上层镜像能够找出所有依赖的下层镜像，所以最上层进行的镜像层 ID 就能表示镜像的 <code>ID</code> )，但是使用这种无意义的超长哈希码显然是违背人性的，所以这里我们还要介绍镜像的命名，通过镜像名我们能够更容易的识别镜像…</li><li>在 <code>docker images</code> 命令打印出的内容中，我们还能看到两个与镜像命名有关的数据：<code>REPOSITORY</code> 和 <code>TAG</code>，这两者其实就组成了 <code>docker</code> 对镜像的命名规则</li></ul><p><img src="https://user-gold-cdn.xitu.io/2018/9/12/165cc15252cc5e51" alt=""></p><p><strong>准确的来说，镜像的命名我们可以分成三个部分：username、repository 和 tag</strong></p><ul><li><code>username</code>： 主要用于识别上传镜像的不同用户，与 GitHub 中的用户空间类似。</li><li><code>repository</code>：主要用于识别进行的内容，形成对镜像的表意描述。</li><li><code>tag</code>：主要用户表示镜像的版本，方便区分进行内容的不同细节</li></ul><blockquote><p>对于 <code>username</code> 来说，在上面我们展示的 <code>docker images</code> 结果中，有的镜像有 <code>username</code> 这个部分，而有的镜像是没有的。没有 <code>username</code> 这个部分的镜像，表示镜像是由 <code>Docker</code> 官方所维护和提供的，所以就不单独标记用户了…</p></blockquote><h3 id="4-4-容器的生命周期"><a href="#4-4-容器的生命周期" class="headerlink" title="4.4 容器的生命周期"></a>4.4 容器的生命周期</h3><p><strong>容器运行的状态流转图</strong></p><p><img src="https://user-gold-cdn.xitu.io/2018/9/17/165e53743e730432" alt=""></p><blockquote><p>图中展示了几种常见对 <code>Docker</code> 容器的操作命令，以及执行它们之后容器运行状态的变化。这里我们撇开命令，着重看看容器的几个核心状态，也就是图中色块表示的：<code>Created</code>、<code>Running</code>、<code>Paused</code>、<code>Stopped</code>、<code>Deleted</code></p></blockquote><p>在这几种状态中，<code>Running</code> 是最为关键的状态，在这种状态中的容器，就是真正正在运行的容器了</p><h3 id="4-5-主进程"><a href="#4-5-主进程" class="headerlink" title="4.5 主进程"></a>4.5 主进程</h3><ol><li>如果单纯去看容器的生命周期会有一些难理解的地方，而 <code>Docker</code> 中对容器生命周期的定义其实并不是独立存在的。</li><li>在 <code>Docker</code> 的设计中，容器的生命周期其实与容器中 <code>PID</code> 为 <code>1</code> 这个进程有着密切的关系。更确切的说，它们其实是共患难，同生死的兄弟。容器的启动，本质上可以理解为这个进程的启动，而容器的停止也就意味着这个进程的停止，反过来理解亦然。</li><li>当我们启动容器时，<code>Docker</code> 其实会按照镜像中的定义，启动对应的程序，并将这个程序的主进程作为容器的主进程 ( 也就是 <code>PID</code> 为 <code>1</code> 的进程 )。而当我们控制容器停止时，<code>Docker</code> 会向主进程发送结束信号，通知程序退出。</li><li>而当容器中的主进程主动关闭时 ( 正常结束或出错停止 )，也会让容器随之停止。</li><li>通过之前提到的几个方面来看，<code>Docker</code> 不仅是从设计上推崇轻量化的容器，也是许多机制上是以此为原则去实现的。所以，我们最佳的 <code>Docker</code> 实践方法是遵循着它的逻辑，逐渐习惯这种容器即应用，应用即容器的虚拟化方式。虽然在 <code>Docker</code> 中我们也能够实现在同一个容器中运行多个不同类型的程序，但这么做的话，<code>Docker</code> 就无法跟踪不同应用的生命周期，有可能造成应用的非正常关闭，进而影响系统、数据的稳定性…</li></ol><h2 id="五、使用容器：从镜像仓库获得镜像"><a href="#五、使用容器：从镜像仓库获得镜像" class="headerlink" title="五、使用容器：从镜像仓库获得镜像"></a>五、使用容器：从镜像仓库获得镜像</h2><h3 id="5-1-镜像仓库"><a href="#5-1-镜像仓库" class="headerlink" title="5.1 镜像仓库"></a>5.1 镜像仓库</h3><blockquote><p>如果说我们把镜像的结构用 <code>Git</code> 项目的结构做类比，那么镜像仓库就可以看似 <code>GitLab</code>、<code>GitHub</code> 等的托管平台，只不过 <code>Docker</code> 的镜像仓库托管的不是代码项目，而是镜像</p></blockquote><p>当然，存储镜像并不是镜像仓库最值得炫耀的功能，其最大的作用是实现了 <code>Docker</code> 镜像的分发。借助镜像仓库，我们得到了一个镜像的中转站，我们可以将开发环境上所使用的镜像推送至镜像仓库，并在测试或生产环境上拉取到它们，而这个过程仅需要几个命令，甚至自动化完成…</p><p><img src="https://user-gold-cdn.xitu.io/2018/9/18/165eacb6b1b2c1ac" alt=""></p><h3 id="5-2-获取镜像"><a href="#5-2-获取镜像" class="headerlink" title="5.2 获取镜像"></a>5.2 获取镜像</h3><blockquote><p>虽然有很多种方式将镜像引入到 <code>Docker</code> 之中，但我们最为常用的获取现有镜像的方式还是直接从镜像仓库中拉取，因为这种方式简单、快速、有保障</p></blockquote><p>要拉取镜像，我们可以使用 <code>docker pull</code> 命令，命令的参数就是我们之前所提到的镜像仓库名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker pull ubuntu</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/ubuntu</span><br><span class="line">124c757242f8: Downloading [===============================================&gt;   ]  30.19MB/31.76MB</span><br><span class="line">9d866f8bde2a: Download complete </span><br><span class="line">fa3f2f277e67: Download complete </span><br><span class="line">398d32b153e8: Download complete </span><br><span class="line">afde35469481: Download complete...</span><br></pre></td></tr></table></figure><ul><li>当我们运行这个命令后，<code>Docker</code> 就会开始从镜像仓库中拉取我们所指定的镜像了，在控制台中，我们可以看到镜像拉取的进度。下载进度会分为几行，其实每一行代表的就是一个镜像层。<code>Docker</code> 首先会拉取镜像所基于的所有镜像层，之后再单独拉取每一个镜像层并组合成这个镜像。当然，如果在本地已经存在相同的镜像层 ( 共享于其他的镜像 )，那么 <code>Docker</code> 就直接略过这个镜像层的拉取而直接采用本地的内容。</li><li>上面是一个拉取官方镜像并且没有给出镜像标签的例子，大家注意到，当我们没有提供镜像标签时，<code>Docker</code> 会默认使用 <code>latest</code> 这个标签…</li></ul><p>我们也能够使用完整的镜像命名来拉取镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker pull openresty/openresty:1.13.6.2-alpine</span><br><span class="line">1.13.6.2-alpine: Pulling from openresty/openresty</span><br><span class="line">ff3a5c916c92: Pull complete </span><br><span class="line">ede0a2a1012b: Pull complete </span><br><span class="line">0e0a11843023: Pull complete </span><br><span class="line">246b2c6f4992: Pull complete </span><br><span class="line">Digest: sha256:23ff32a1e7d5a10824ab44b24a0daf86c2df1426defe8b162d8376079a548bf2</span><br><span class="line">Status: Downloaded newer image for openresty/openresty:1.13.6.2-alpine...</span><br></pre></td></tr></table></figure><p>镜像在被拉取之后，就存放到了本地，接受当前这个 <code>Docker</code> 实例管理了，我们可以通过 <code>docker images</code> 命令看到它们</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker images</span><br><span class="line">REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">ubuntu                latest              cd6d8154f1e1        12 days ago         84.1MB</span><br><span class="line">openresty/openresty   1.13.6.2-alpine     08d5c926e4b6        3 months ago        49.3MB...</span><br></pre></td></tr></table></figure><h3 id="5-3-Docker-Hub"><a href="#5-3-Docker-Hub" class="headerlink" title="5.3 Docker Hub"></a>5.3 Docker Hub</h3><blockquote><p><code>Docker Hub</code> 是 <code>Docker</code> 官方建立的中央镜像仓库，除了普通镜像仓库的功能外，它内部还有更加细致的权限管理，支持构建钩子和自动构建，并且有一套精致的 Web 操作页面</p></blockquote><p>Docker Hub 的地址是：hub.docker.com/</p><p><img src="https://user-gold-cdn.xitu.io/2018/9/19/165efa8f3a706682" alt=""></p><ul><li>由于定位是 <code>Docker</code> 的中央镜像仓库系统，同时也是 <code>Docker Engine</code> 的默认镜像仓库，所以 <code>Docker Hub</code> 是开发者共享镜像的首选，那么也就意味着其中的镜像足够丰富</li><li>常用服务软件的镜像，我们都能在 <code>Docker Hub</code> 中找到，甚至能找到针对它们不同用法的不同镜像。</li><li>同时，<code>Docker Hub</code> 也允许我们将我们制作好的镜像上传到其中，与广大 <code>Docker</code> 用户共享你的成果</li></ul><h3 id="5-4-搜索镜像"><a href="#5-4-搜索镜像" class="headerlink" title="5.4 搜索镜像"></a>5.4 搜索镜像</h3><ul><li>由于 <code>Docker Hub</code> 提供了一套完整的 <code>Web</code> 操作界面，所以我们搜索其中的镜像会非常方便</li></ul><p><img src="https://user-gold-cdn.xitu.io/2018/9/19/165efb39b6076f2e" alt=""></p><blockquote><p>在 Docker Hub 的搜索结果中，有几项关键的信息有助于我们选择合适的镜像：</p></blockquote><ul><li><code>OFFICIAL</code>代表镜像为 <code>Docker</code> 官方提供和维护，相对来说稳定性和安全性较高</li><li><code>STARS</code> 代表镜像的关注人数，这类似 <code>GitHub</code> 的 <code>Stars</code>，可以理解为热度</li><li><code>PULLS</code> 代表镜像被拉取的次数，基本上能够表示镜像被使用的频度…</li></ul><blockquote><p>除了直接通过 <code>Docker Hub</code> 网站搜索镜像这种方式外，我们还可以用 docker CLI 中的 <code>docker search</code> 这个命令搜索 <code>Docker Hub</code> 中的镜像</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker search ubuntu</span><br><span class="line">NAME                                                   DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">ubuntu                                                 Ubuntu is a Debian-based Linux operating sys…   8397                [OK]                </span><br><span class="line">dorowu/ubuntu-desktop-lxde-vnc                         Ubuntu with openssh-server and NoVNC            220                                     [OK]</span><br><span class="line">rastasheep/ubuntu-sshd                                 Dockerized SSH service, built on top of offi…   171                                     [OK]</span><br><span class="line">consol/ubuntu-xfce-vnc                                 Ubuntu container with &quot;headless&quot; VNC session…   129                                     [OK]</span><br><span class="line">ansible/ubuntu14.04-ansible                            Ubuntu 14.04 LTS with ansible                   95                                      [OK]</span><br><span class="line">ubuntu-upstart                                         Upstart is an event-based replacement for th…   89  ...</span><br></pre></td></tr></table></figure><h3 id="5-5-管理镜像"><a href="#5-5-管理镜像" class="headerlink" title="5.5 管理镜像"></a>5.5 管理镜像</h3><blockquote><p>对镜像的管理要比搜索和获取镜像更常用，所以了解镜像管理相关的操作以及知识是非常有必要的</p></blockquote><p>除了之前我们所提到的 <code>docker images</code>可以列出本地 <code>Docker</code> 中的所有镜像外，如果我们要获得镜像更详细的信息，我们可以通过 <code>docker inspect</code> 这个命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker inspect redis:3.2</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;sha256:2fef532eadb328740479f93b4a1b7595d412b9105ca8face42d3245485c39ddc&quot;,</span><br><span class="line">        &quot;RepoTags&quot;: [</span><br><span class="line">            &quot;redis:3.2&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;RepoDigests&quot;: [</span><br><span class="line">            &quot;redis@sha256:745bdd82bad441a666ee4c23adb7a4c8fac4b564a1c7ac4454aa81e91057d977&quot;</span><br><span class="line">        ],</span><br><span class="line">## ......</span><br><span class="line">    &#125;</span><br><span class="line">]...</span><br></pre></td></tr></table></figure><blockquote><p>在 <code>docker inspect</code> 的结果中我们可以看到关于镜像相当完备的信息</p></blockquote><p>除了能够查看镜像的信息外，·<code>docker inspect·</code> 还能查看容器等之前我们所提到的 <code>Docker</code> 对象的信息，而传参的方式除了传递镜像或容器的名称外，还可以传入镜像 ID 或容器 <code>ID</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker inspect redis:4.0</span><br><span class="line">$ sudo docker inspect 2fef532e</span><br></pre></td></tr></table></figure><p><strong>参数识别</strong></p><blockquote><p>之前我们所谈到镜像 <code>ID</code> 是 <code>64</code> 个字符，而 <code>docker images</code> 命令里的缩写也有 <code>12</code>个字符，为什么我这里展示的操作命令里只填写了 <code>8</code> 个字符呢</p></blockquote><ul><li>不论我们是通过镜像名还是镜像 <code>ID</code> 传递到 <code>docker inspect</code> 或者其他类似的命令 ( 需要指定 <code>Docker</code> 对象的命令 ) 里，<code>Docker</code> 都会根据我们传入的内容去寻找与之匹配的内容，只要我们所给出的内容能够找出唯一的镜像，那么 <code>Docker</code> 就会对这个镜像执行给定的操作。反之，如果找不到唯一的镜像，那么操作不会进行，<code>Docker</code> 也会显示错误</li><li>也就是说，只要我们提供了能够唯一识别镜像或容器的信息，即使它短到只有 1 个字符，<code>Docker</code> 都是可以处理的</li></ul><blockquote><p>例如我们有五个镜像：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">php                   7-fpm               f214b5c48a25        11 days ago         368MB</span><br><span class="line">ubuntu                latest              cd6d8154f1e1        13 days ago         84.1MB</span><br><span class="line">redis                 3.2                 2fef532eadb3        13 days ago         76MB</span><br><span class="line">redis                 4.0                 e1a73233e3be        13 days ago         83.4MB</span><br><span class="line">openresty/openresty   1.13.6.2-alpine     08d5c926e4b6        3 months ago        49.3MB</span><br><span class="line">cogset/cron           latest              c01d5ac6fc8a        16 months ago       125MB...</span><br></pre></td></tr></table></figure><blockquote><p>我们注意到镜像 <code>ID</code> 前缀为<code>2</code> 的只有 <code>redis:3.2</code> 这个镜像，那么我们就可以使用 2 来指代这个镜像</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker inspect 2</span><br></pre></td></tr></table></figure><blockquote><p>而前缀为 <code>c</code> 的镜像有两个，这时候如果我们直接使用 <code>c</code> 来指代镜像的话，<code>Docker</code> 会提示未能匹配到镜像</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker inspect c</span><br><span class="line">[]</span><br><span class="line">Error: No such object: c</span><br></pre></td></tr></table></figure><h3 id="5-6-删除镜像"><a href="#5-6-删除镜像" class="headerlink" title="5.6 删除镜像"></a>5.6 删除镜像</h3><blockquote><p>虽然 <code>Docker</code> 镜像占用的空间比较小，但日渐冗杂的镜像和凌乱的镜像版本会让管理越来越困难，所以有时候我们需要清理一些无用的镜像，将它们从本地的 <code>Docker Engine</code> 中移除</p></blockquote><p>删除镜像的命令是 <code>docker rmi</code>，参数是镜像的名称或 <code>ID</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker rmi ubuntu:latest</span><br><span class="line">Untagged: ubuntu:latest</span><br><span class="line">Untagged: ubuntu@sha256:de774a3145f7ca4f0bd144c7d4ffb2931e06634f11529653b23eba85aef8e378</span><br><span class="line">Deleted: sha256:cd6d8154f1e16e38493c3c2798977c5e142be5e5d41403ca89883840c6d51762</span><br><span class="line">Deleted: sha256:2416e906f135eea2d08b4a8a8ae539328482eacb6cf39100f7c8f99e98a78d84</span><br><span class="line">Deleted: sha256:7f8291c73f3ecc4dc9317076ad01a567dd44510e789242368cd061c709e0e36d</span><br><span class="line">Deleted: sha256:4b3d88bd6e729deea28b2390d1ddfdbfa3db603160a1129f06f85f26e7bcf4a2</span><br><span class="line">Deleted: sha256:f51700a4e396a235cee37249ffc260cdbeb33268225eb8f7345970f5ae309312</span><br><span class="line">Deleted: sha256:a30b835850bfd4c7e9495edf7085cedfad918219227c7157ff71e8afe2661f63...</span><br></pre></td></tr></table></figure><blockquote><ul><li>删除镜像的过程其实是删除镜像内的镜像层，在删除镜像命令打印的结果里，我们可以看到被删除的镜像层以及它们的 <code>ID</code>。当然，如果存在两个镜像共用一个镜像层的情况，你也不需要担心 <code>Docker</code> 会删除被共享的那部分镜像层，只有当镜像层只被当前被删除的镜像所引用时，<code>Docker</code>才会将它们从硬盘空间中移除…</li><li><code>docker rmi</code> 命令也支持同时删除多个镜像，只需要通过空格传递多个镜像 <code>ID</code> 或镜像名即可</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker rmi redis:3.2 redis:4.0</span><br><span class="line">Untagged: redis:3.2</span><br><span class="line">Untagged: redis@sha256:745bdd82bad441a666ee4c23adb7a4c8fac4b564a1c7ac4454aa81e91057d977</span><br><span class="line">Deleted: sha256:2fef532eadb328740479f93b4a1b7595d412b9105ca8face42d3245485c39ddc</span><br><span class="line">## ......</span><br><span class="line">Untagged: redis:4.0</span><br><span class="line">Untagged: redis@sha256:b77926b30ca2f126431e4c2055efcf2891ebd4b4c4a86a53cf85ec3d4c98a4c9</span><br><span class="line">Deleted: sha256:e1a73233e3beffea70442fc2cfae2c2bab0f657c3eebb3bdec1e84b6cc778b75</span><br><span class="line">## .........</span><br></pre></td></tr></table></figure><h2 id="六、使用容器：运行和管理容器"><a href="#六、使用容器：运行和管理容器" class="headerlink" title="六、使用容器：运行和管理容器"></a>六、使用容器：运行和管理容器</h2><h3 id="6-1-容器的创建和启动"><a href="#6-1-容器的创建和启动" class="headerlink" title="6.1 容器的创建和启动"></a>6.1 容器的创建和启动</h3><p>在了解容器的各项操作之前，我们再来回顾一下之前我们所提及的容器状态流转。</p><p><img src="https://user-gold-cdn.xitu.io/2018/9/17/165e53743e730432" alt=""></p><blockquote><p>在这幅图中，我们可以看到，Docker 容器的生命周期里分为五种状态，其分别代表着：</p></blockquote><ul><li><code>Created</code>：容器已经被创建，容器所需的相关资源已经准备就绪，但容器中的程序还未处于运行状态。</li><li><code>Running</code>：容器正在运行，也就是容器中的应用正在运行。</li><li><code>Paused</code>：容器已暂停，表示容器中的所有程序都处于暂停 ( 不是停止 ) 状态。</li><li><code>Stopped</code>：容器处于停止状态，占用的资源和沙盒环境都依然存在，只是容器中的应用程序均已停止。</li><li><code>Deleted</code>：容器已删除，相关占用的资源及存储在 <code>Docker</code> 中的管理信息也都已释放和移除…</li></ul><h3 id="6-2-创建容器"><a href="#6-2-创建容器" class="headerlink" title="6.2 创建容器"></a>6.2 创建容器</h3><blockquote><p>当我们选择好镜像以后，就可以通过 <code>docker create</code>这个命令来创建容器了</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker create nginx:1.12</span><br><span class="line">34f277e22be252b51d204acbb32ce21181df86520de0c337a835de6932ca06c3</span><br></pre></td></tr></table></figure><blockquote><p>执行<code>docker create</code> 后，<code>Docker</code> 会根据我们所给出的镜像创建容器，在控制台中会打印出 <code>Docker</code> 为容器所分配的容器 <code>ID</code>，此时容器是处于 <code>Created</code> 状态的</p></blockquote><ul><li>之后我们对容器的操作可以通过这个容器 <code>ID</code> 或者它的缩略形式进行，但用容器 <code>ID</code> 操作容器就和用镜像 <code>ID</code> 操作镜像一样烦闷，所以我们更习惯于使用容器名来操作容器。</li><li>要使用容器名操作容器，就先得给容器命名，在创建容器时，我们可以通过 <code>--name</code> 这个选项来配置容器名…</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker create --name nginx nginx:1.12</span><br></pre></td></tr></table></figure><h3 id="6-3-启动容器"><a href="#6-3-启动容器" class="headerlink" title="6.3 启动容器"></a>6.3 启动容器</h3><blockquote><p>通过 <code>docker create</code> 创建的容器，是处于 <code>Created</code> 状态的，其内部的应用程序还没有启动，所以我们需要通过<code>docker start</code> 命令来启动它。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker start nginx</span><br></pre></td></tr></table></figure><ol><li>由于我们为容器指定了名称，这样的操作会更加自然，所以我们非常推荐为每个被创建的容器都进行命名</li><li>当容器启动后，其中的应用就会运行起来，容器的几个生命周期也会绑定到了这个应用上，这个之前我们已经提及，这里就不在赘述。只要应用程序还在运行，那么容器的状态就会是 <code>Running</code>，除非进行一些修改容器的操作。</li><li>在 <code>Docker</code> 里，还允许我们通过 <code>docker run</code> 这个命令将 <code>docker create</code> 和 <code>docker start</code> 这两步操作合成为一步，进一步提高工作效率…</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run --name nginx -d nginx:1.12</span><br><span class="line">89f2b769498a50f5c35a314ab82300ce9945cbb69da9cda4b022646125db8ca7</span><br></pre></td></tr></table></figure><ul><li>通过 <code>docker run</code> 创建的容器，在创建完成之后会直接启动起来，不需要我们再使用 <code>docker start</code> 去启动了。</li><li>这里需要注意的一点是，通常来说我们启动容器会期望它运行在“后台”，而 <code>docker</code> run 在启动容器时，会采用“前台”运行这种方式，这时候我们的控制台就会衔接到容器上，不能再进行其他操作了。我们可以通过 <code>-d</code> 或 <code>--detach</code> 这个选项告诉 <code>Docker</code> 在启动后将程序与控制台分离，使其进入“后台”运行…</li></ul><h3 id="6-4-管理容器"><a href="#6-4-管理容器" class="headerlink" title="6.4 管理容器"></a>6.4 管理容器</h3><ul><li>容器创建和启动后，除了关注应用程序是否功能正常外，我们也会关注容器的状态等内容。</li><li>通过 <code>docker ps</code>这个命令，我们可以罗列出 <code>Docker</code> 中的容器</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class="line">89f2b769498a        nginx:1.12          &quot;nginx -g &apos;daemon of…&quot;   About an hour ago   Up About an hour    80/tcp              nginx...</span><br></pre></td></tr></table></figure><blockquote><p>默认情况下，<code>docker ps</code> 列出的容器是处于运行中的容器，如果要列出所有状态的容器，需要增加 <code>-a</code> 或 <code>--all</code>选项</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class="line">425a0d3cd18b        redis:3.2           &quot;docker-entrypoint.s…&quot;   2 minutes ago       Created                                 redis</span><br><span class="line">89f2b769498a        nginx:1.12          &quot;nginx -g &apos;daemon of…&quot;   About an hour ago   Up About an hour    80/tcp              nginx...</span><br></pre></td></tr></table></figure><ol><li>在 <code>docker ps</code> 的结果中，我们可以看到几项关于容器的信息。其中 <code>CONTAINER ID</code>、<code>IMAGE</code>、<code>CREATED</code>、<code>NAMES</code> 大家都比较容易理解，分别表示容器 <code>ID</code>，容器所基于的镜像，容器的创建时间和容器的名称。</li><li>结果中的 <code>COMMAND</code> 表示的是容器中主程序 ( 也就是与容器生命周期所绑定进程所关联的程序 ) 的启动命令，这条命令是在镜像内定义的，而容器的启动其实质就是启动这条命令</li><li>结果中的 <code>STATUS</code> 表示容器所处的状态，其值和我们之前所谈到的状态有所区别，主要是因为这里还记录了其他的一些信息。在这里，常见的状态表示有三种：</li></ol><ul><li><code>Created</code> 此时容器已创建，但还没有被启动过。</li><li><code>Up [ Time ]</code> 这时候容器处于正在运行状态，而这里的 <code>Time</code> 表示容器从开始运行到查看时的时间。</li><li><code>Exited ([ Code ]) [ Time ]</code> 容器已经结束运行，这里的 <code>Code</code> 表示容器结束运行时，主程序返回的程序退出码，而 <code>Time</code> 则表示容器结束到查看时的时间…</li></ul><blockquote><p>当然，在 <code>Docker</code> 逐渐成熟后，命令的命名也没有原来那么随意了，已经逐渐转换为使用大家广泛认可的形式。只是 <code>docker ps</code> 这条命令，还保留着复古的风格。</p></blockquote><h3 id="6-5-停止和删除容器"><a href="#6-5-停止和删除容器" class="headerlink" title="6.5 停止和删除容器"></a>6.5 停止和删除容器</h3><blockquote><p>要将正在运行的容器停止，我们可以使用 <code>docker stop</code> 命令</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker stop nginx</span><br></pre></td></tr></table></figure><p>正在运行中的容器默认情况下是不能被删除的，我们可以通过增加 <code>-f</code> 或 <code>--force</code> 选项来让 <code>docker rm</code> 强制停止并删除容器，不过这种做法并不妥当</p><h3 id="6-6-随手删除容器"><a href="#6-6-随手删除容器" class="headerlink" title="6.6 随手删除容器"></a>6.6 随手删除容器</h3><blockquote><p>与其他虚拟机不同，<code>Docker</code> 的轻量级容器设计，讲究随用随开，随关随删。也就是说，当我们短时间内不需要使用容器时，最佳的做法是删除它而不是仅仅停止它</p></blockquote><h3 id="6-7-进入容器"><a href="#6-7-进入容器" class="headerlink" title="6.7 进入容器"></a>6.7 进入容器</h3><ul><li>很多时间，我们需要的操作并不仅仅是按镜像所给出的命令启动容器而已，我们还会希望进一步了解容器或操作容器，这时候最佳的方式就是让我们进入到容器了。</li><li>我们知道，容器是一个隔离运行环境的东西，它里面除了镜像所规定的主进程外，其他的进程也是能够运行的，<code>Docker</code> 为我们提供了一个命令 <code>docker exec</code> 来让容器运行我们所给出的命令…</li></ul><p>这里我们试试用容器中的 <code>more</code> 命令查看容器的主机名定义。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker exec nginx more /etc/hostname</span><br><span class="line">::::::::::::::</span><br><span class="line">/etc/hostname</span><br><span class="line">::::::::::::::</span><br><span class="line">83821ea220ed...</span><br></pre></td></tr></table></figure><ul><li><code>docker exec</code> 命令能帮助我们在正在运行的容器中运行指定命令，这对于服务控制，运维监控等有着不错的应用场景。但是在开发过程中，我们更常使用它来作为我们进入容器的桥梁</li><li>熟悉 <code>Linux</code> 的朋友们知道，我们操作 <code>Linux</code>这个过程，并不是 <code>Linux</code> 内部的某些机能，而是通过控制台软件来完成的。控制台软件分析我们的命令，将其转化为对 <code>Linux</code> 的系统调用，实现了我们对 <code>Linux</code> 的操作。若不是这样，生涩的系统调用方法对普通开发者来说简直就是黑洞一般的存在，更别提用它们控制系统了…</li><li>在 <code>Linux</code> 中，大家熟悉的控制台软件应该是 <code>Shell</code> 和 <code>Bash</code>了，它们分别由 <code>sh</code> 和 <code>bash</code> 这两个程序启动</li><li>由于 <code>bash</code> 的功能要比 <code>sh</code>丰富，所以在能够使用 <code>bash</code> 的容器里，我们优先选择它作为控制台程序。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker exec -it nginx bash</span><br><span class="line">root@83821ea220ed:/#</span><br></pre></td></tr></table></figure><blockquote><p>在借助 <code>docker exec</code> 进入容器的时候，我们需要特别注意命令中的两个选项不可或缺，即 <code>-i</code> 和 <code>-t</code>( 它们俩可以利用简写机制合并成 <code>-it</code> )。</p></blockquote><p>其中 <code>-i</code> ( <code>--interactive</code> ) 表示保持我们的输入流，只有使用它才能保证控制台程序能够正确识别我们的命令。而 <code>-t</code> ( <code>--tty</code> ) 表示启用一个伪终端，形成我们与 <code>bash</code> 的交互，如果没有它，我们无法看到 <code>bash</code> 内部的执行结果…</p><h3 id="6-8-衔接到容器"><a href="#6-8-衔接到容器" class="headerlink" title="6.8 衔接到容器"></a>6.8 衔接到容器</h3><blockquote><p><code>Docker</code> 为我们提供了一个 <code>docker attach</code> 命令，用于将当前的输入输出流连接到指定的容器上。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker attach nginx</span><br></pre></td></tr></table></figure><ul><li>这个命令最直观的效果可以理解为我们将容器中的主程序转为了“前台”运行 ( 与 <code>docker run</code> 中的 <code>-d</code> 选项有相反的意思 )。</li><li>由于我们的输入输出流衔接到了容器的主程序上，我们的输入输出操作也就直接针对了这个程序，而我们发送的 <code>Linux</code> 信号也会转移到这个程序上。例如我们可以通过 <code>Ctrl + C</code> 来向程序发送停止信号，让程序停止 ( 从而容器也会随之停止 )。…</li></ul><h2 id="七、为容器配置网络"><a href="#七、为容器配置网络" class="headerlink" title="七、为容器配置网络"></a>七、为容器配置网络</h2><h3 id="7-1-容器网络"><a href="#7-1-容器网络" class="headerlink" title="7.1 容器网络"></a>7.1 容器网络</h3><blockquote><p>在之前介绍 <code>Docker</code> 核心组成的时候，我们已经简单谈到了容器网络的相关知识。容器网络实质上也是由 <code>Docker</code> 为应用程序所创造的虚拟环境的一部分，它能让应用从宿主机操作系统的网络环境中独立出来，形成容器自有的网络设备、IP 协议栈、端口套接字、IP 路由表、防火墙等等与网络相关的模块…</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/9/5/165a810ad2c81714" alt=""></p><blockquote><p>还是回归上面这幅之前展示过的关于 <code>Docker</code> 网络的图片。在 Docker 网络中，有三个比较核心的概念，也就是：沙盒 ( Sandbox )、网络 ( Network )、端点 ( Endpoint )</p></blockquote><ul><li>沙盒提供了容器的虚拟网络栈，也就是之前所提到的端口套接字、<code>IP</code> 路由表、防火墙等的内容。其实现隔离了容器网络与宿主机网络，形成了完全独立的容器网络环境。</li><li>网络可以理解为 <code>Docker</code> 内部的虚拟子网，网络内的参与者相互可见并能够进行通讯。<code>Docker</code> 的这种虚拟网络也是于宿主机网络存在隔离关系的，其目的主要是形成容器间的安全通讯环境。</li><li>端点是位于容器或网络隔离墙之上的洞，其主要目的是形成一个可以控制的突破封闭的网络环境的出入口。当容器的端点与网络的端点形成配对后，就如同在这两者之间搭建了桥梁，便能够进行数据传输了</li></ul><h3 id="7-2-浅析-Docker-的网络实现"><a href="#7-2-浅析-Docker-的网络实现" class="headerlink" title="7.2 浅析 Docker 的网络实现"></a>7.2 浅析 Docker 的网络实现</h3><ul><li>容器网络模型为容器引擎提供了一套标准的网络对接范式，而在 <code>Docker</code> 中，实现这套范式的是 <code>Docker</code> 所封装的 <code>libnetwork</code> 模块。</li><li>而对于网络的具体实现，在 <code>Docker</code> 的发展过程中也逐渐抽象，形成了统一的抽象定义。进而通过这些抽象定义，便可以对 <code>Docker</code> 网络的实现方式进行不同的变化…</li></ul><p><img src="https://user-gold-cdn.xitu.io/2018/9/23/166042a49627f8a6" alt=""></p><blockquote><p>目前 <code>Docker</code> 官方为我们提供了五种 <code>Docker</code>网络驱动，分别是：<code>Bridge Driver</code>、<code>Host Driver</code>、<code>Overlay Driver</code>、<code>MacLan Driver</code>、<code>one Driver</code>。</p></blockquote><p>其中，<code>Bridge</code> 网络是 <code>Docker</code> 容器的默认网络驱动，简而言之其就是通过网桥来实现网络通讯 ( 网桥网络的实现可以基于硬件，也可以基于软件 )。而 <code>Overlay</code> 网络是借助 <code>Docker</code> 集群模块 <code>Docker Swarm</code>来搭建的跨 <code>Docker Daemon</code> 网络，我们可以通过它搭建跨物理主机的虚拟网络，进而让不同物理机中运行的容器感知不到多个物理机的存在。</p><blockquote><p><code>Bridge Driver</code> 和 <code>Overlay Driver</code> 在开发中使用频率较高</p></blockquote><h3 id="7-4-容器互联"><a href="#7-4-容器互联" class="headerlink" title="7.4 容器互联"></a>7.4 容器互联</h3><ul><li>由于 <code>Docker</code> 提倡容器与应用共生的轻量级容器理念，所以容器中通常只包含一种应用程序，但我们知道，如今纷繁的系统服务，没有几个是可以通过单一的应用程序支撑的。拿最简单的 <code>Web</code> 应用为例，也至少需要业务应用、数据库应用、缓存应用等组成。也就是说，在 <code>Docker</code> 里我们需要通过多个容器来组成这样的系统。</li><li>而这些互联网时代的应用，其间的通讯方式主要以网络为主，所以打通容器间的网络，是使它们能够互相通讯的关键所在。</li><li>要让一个容器连接到另外一个容器，我们可以在容器通过 <code>docker create</code> 或 <code>docker run</code> 创建时通过 <code>--link</code> 选项进行配置。</li><li>例如，这里我们创建一个 <code>MySQL</code> 容器，将运行我们 <code>Web</code> 应用的容器连接到这个 <code>MySQL</code> 容器上，打通两个容器间的网络，实现它们之间的网络互通…</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -d --name mysql -e MYSQL_RANDOM_ROOT_PASSWORD=yes mysql</span><br><span class="line">$ sudo docker run -d --name webapp --link mysql webapp:latest...</span><br></pre></td></tr></table></figure><ul><li>容器间的网络已经打通，那么我们要如何在<code>Web</code>应用中连接到 <code>MySQL</code> 数据库呢？<code>Docker</code> 为容器间连接提供了一种非常友好的方式，我们只需要将容器的网络命名填入到连接地址中，就可以访问需要连接的容器了。</li><li>假设我们在 <code>Web</code> 应用中使用的是 <code>JDBC</code> 进行数据库连接的，我们可以这么填写连接…</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String url = &quot;jdbc:mysql://mysql:3306/webapp&quot;;</span><br></pre></td></tr></table></figure><ul><li>在这里，连接地址中的 <code>mysql</code> 就好似我们常见的域名解析，<code>Docker</code> 会将其指向 <code>MySQL</code> 容器的 <code>IP</code> 地址。</li><li>看到这里，读者们有没有发现 <code>Docker</code> 在容器互通中为我们带来的一项便利，也就是我们不再需要真实的知道另外一个容器的 <code>IP</code> 地址就能进行连接。再具体来对比，在以往的开发中，我们每切换一个环境 ( 例如将程序从开发环境提交到测试环境 )，都需要重新配置程序中的各项连接地址等参数，而在 <code>Docker</code> 里，我们并不需要关心这个，只需要程序中配置被连接容器的别名，映射<code>IP</code> 的工作就交给 <code>Docker</code> 完成了…</li></ul><h3 id="7-5-暴露端口"><a href="#7-5-暴露端口" class="headerlink" title="7.5 暴露端口"></a>7.5 暴露端口</h3><ul><li>需要注意的是，虽然容器间的网络打通了，但并不意味着我们可以任意访问被连接容器中的任何服务。<code>Docker</code> 为容器网络增加了一套安全机制，只有容器自身允许的端口，才能被其他容器所访问。</li><li>这个容器自我标记端口可被访问的过程，我们通常称为暴露端口。我们在 <code>docker ps</code> 的结果中可以看到容器暴露给其他容器访问的端口</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                 NAMES</span><br><span class="line">95507bc88082        mysql:5.7           &quot;docker-entrypoint.s…&quot;   17 seconds ago      Up 16 seconds       3306/tcp, 33060/tcp   mysql...</span><br></pre></td></tr></table></figure><ul><li>这里我们看到，<code>MySQL</code> 这个容器暴露的端口是 <code>3306</code> 和 <code>33060</code>。所以我们连接到 <code>MySQL</code> 容器后，只能对这两个端口进行访问。</li><li>端口的暴露可以通过 <code>Docker</code> 镜像进行定义，也可以在容器创建时进行定义。在容器创建时进行定义的方法是借助 <code>--expose</code> 这个选项…</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -d --name mysql -e MYSQL_RANDOM_ROOT_PASSWORD=yes --expose 13306 --expose 23306 mysql:5.7</span><br></pre></td></tr></table></figure><blockquote><p>这里我们为 <code>MySQL</code> 暴露了 <code>13306</code> 和 <code>23306</code> 这两个端口，暴露后我们可以在 <code>docker ps</code> 中看到这两个端口已经成功的打开</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker ps </span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                                       NAMES</span><br><span class="line">3c4e645f21d7        mysql:5.7           &quot;docker-entrypoint.s…&quot;   4 seconds ago       Up 3 seconds        3306/tcp, 13306/tcp, 23306/tcp, 33060/tcp   mysql...</span><br></pre></td></tr></table></figure><blockquote><p>容器暴露了端口只是类似我们打开了容器的防火墙，具体能不能通过这个端口访问容器中的服务，还需要容器中的应用监听并处理来自这个端口的请求。</p></blockquote><h3 id="7-6-通过别名连接"><a href="#7-6-通过别名连接" class="headerlink" title="7.6 通过别名连接"></a>7.6 通过别名连接</h3><blockquote><p>纯粹的通过容器名来打开容器间的网络通道缺乏一定的灵活性，在 <code>Docker</code> 里还支持连接时使用别名来使我们摆脱容器名的限制。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -d --name webapp --link mysql:database webapp:latest</span><br></pre></td></tr></table></figure><blockquote><p>在这里，我们使用 <code>--link &lt;name&gt;:&lt;alias&gt;</code> 的形式，连接到 <code>MySQL</code> 容器，并设置它的别名为 <code>database</code>。当我们要在 <code>Web</code> 应用中使用 <code>MySQL</code> 连接时，我们就可以使用 <code>database</code> 来代替连接地址了</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String url = &quot;jdbc:mysql://database:3306/webapp&quot;;</span><br></pre></td></tr></table></figure><h3 id="7-7-管理网络"><a href="#7-7-管理网络" class="headerlink" title="7.7 管理网络"></a>7.7 管理网络</h3><ul><li>容器能够互相连接的前提是两者同处于一个网络中 ( 这里的网络是指容器网络模型中的网络 )。这个限制很好理解，刚才我们说了，网络这个概念我们可以理解为 <code>Docker</code> 所虚拟的子网，而容器网络沙盒可以看做是虚拟的主机，只有当多个主机在同一子网里时，才能互相看到并进行网络数据交换。</li><li>当我们启动 <code>Docker</code> 服务时，它会为我们创建一个默认的 <code>bridge</code> 网络，而我们创建的容器在不专门指定网络的情况下都会连接到这个网络上。所以我们刚才之所以能够把 <code>webapp</code> 容器连接到 <code>mysql</code>容器上，其原因是两者都处于 <code>bridge</code> 这个网络上。</li><li>我们通过 <code>docker inspect</code>命令查看容器，可以在 <code>Network</code> 部分看到容器网络相关的信息…</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker inspect mysql</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">## ......</span><br><span class="line">        &quot;NetworkSettings&quot;: &#123;</span><br><span class="line">## ......</span><br><span class="line">            &quot;Networks&quot;: &#123;</span><br><span class="line">                &quot;bridge&quot;: &#123;</span><br><span class="line">                    &quot;IPAMConfig&quot;: null,</span><br><span class="line">                    &quot;Links&quot;: null,</span><br><span class="line">                    &quot;Aliases&quot;: null,</span><br><span class="line">                    &quot;NetworkID&quot;: &quot;bc14eb1da66b67c7d155d6c78cb5389d4ffa6c719c8be3280628b7b54617441b&quot;,</span><br><span class="line">                    &quot;EndpointID&quot;: &quot;1e201db6858341d326be4510971b2f81f0f85ebd09b9b168e1df61bab18a6f22&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;,</span><br><span class="line">                    &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,</span><br><span class="line">                    &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">                    &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">                    &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,</span><br><span class="line">                    &quot;DriverOpts&quot;: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">## ......</span><br><span class="line">        &#125;</span><br><span class="line">## ......</span><br><span class="line">    &#125;</span><br><span class="line">]...</span><br></pre></td></tr></table></figure><ul><li>这里我们能够看到 <code>mysql</code> 容器在 <code>bridge</code>网络中所分配的 <code>IP</code> 地址，其自身的端点、<code>Mac</code> 地址，<code>bridge</code> 网络的网关地址等信息。</li><li><code>Docker</code> 默认创建的这个 <code>bridge</code> 网络是非常重要的，理由自然是在没有明确指定容器网络时，容器都会连接到这个网络中。在之前讲解 <code>Docker for Win</code> 和 <code>Docker for Mac</code> 安装的时候，我们提到过这两个软件的配置中都有一块配置 <code>Docker</code> 中默认网络的内容，这块所指的默认网络就是这个 <code>bridge</code> 网络…</li></ul><h3 id="7-8-创建网络"><a href="#7-8-创建网络" class="headerlink" title="7.8 创建网络"></a>7.8 创建网络</h3><ul><li>在 <code>Docker</code> 里，我们也能够创建网络，形成自己定义虚拟子网的目的。</li><li><code>docker CLI</code> 里与网络相关的命令都以 <code>network</code> 开头，其中创建网络的命令是 <code>docker network create</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker network create -d bridge individual</span><br></pre></td></tr></table></figure><ul><li>通过 <code>-d</code> 选项我们可以为新的网络指定驱动的类型，其值可以是刚才我们所提及的 <code>bridge</code>、<code>host</code>、<code>overlay</code>、<code>maclan</code>、<code>none</code>，也可以是其他网络驱动插件所定义的类型。这里我们使用的是 <code>Bridge Driver</code> ( 当我们不指定网络驱动时，<code>Docker</code>也会默认采用 <code>Bridge Driver</code>作为网络驱动 )。</li><li>通过 <code>docker network ls</code> 或是 <code>docker network list</code> 可以查看 <code>Docker</code> 中已经存在的网络…</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">bc14eb1da66b        bridge              bridge              local</span><br><span class="line">35c3ef1cc27d        individual          bridge              local...</span><br></pre></td></tr></table></figure><blockquote><p>之后在我们创建容器时，可以通过 <code>--network</code> 来指定容器所加入的网络，一旦这个参数被指定，容器便不会默认加入到 <code>bridge</code> 这个网络中了 ( 但是仍然可以通过 <code>--network bridge</code> 让其加入 )。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -d --name mysql -e MYSQL_RANDOM_ROOT_PASSWORD=yes --network individual mysql:5.7</span><br></pre></td></tr></table></figure><blockquote><p>我们通过 <code>docker inspect</code> 观察一下此时的容器网络</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker inspect mysql</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">## ......</span><br><span class="line">        &quot;NetworkSettings&quot;: &#123;</span><br><span class="line">## ......</span><br><span class="line">            &quot;Networks&quot;: &#123;</span><br><span class="line">                &quot;individual&quot;: &#123;</span><br><span class="line">                    &quot;IPAMConfig&quot;: null,</span><br><span class="line">                    &quot;Links&quot;: null,</span><br><span class="line">                    &quot;Aliases&quot;: [</span><br><span class="line">                        &quot;2ad678e6d110&quot;</span><br><span class="line">                    ],</span><br><span class="line">                    &quot;NetworkID&quot;: &quot;35c3ef1cc27d24e15a2b22bdd606dc28e58f0593ead6a57da34a8ed989b1b15d&quot;,</span><br><span class="line">                    &quot;EndpointID&quot;: &quot;41a2345b913a45c3c5aae258776fcd1be03b812403e249f96b161e50d66595ab&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;172.18.0.1&quot;,</span><br><span class="line">                    &quot;IPAddress&quot;: &quot;172.18.0.2&quot;,</span><br><span class="line">                    &quot;IPPrefixLen&quot;: 16,</span><br><span class="line">                    &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">                    &quot;MacAddress&quot;: &quot;02:42:ac:12:00:02&quot;,</span><br><span class="line">                    &quot;DriverOpts&quot;: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">## ......</span><br><span class="line">        &#125;</span><br><span class="line">## ......</span><br><span class="line">    &#125;</span><br><span class="line">]...</span><br></pre></td></tr></table></figure><ul><li>可以看到，容器所加入网络已经变成了 <code>individual</code>这个网络了。</li><li>这时候我们通过<code>--link</code> 让处于另外一个网络的容器连接到这个容器上，看看会发生什么样的效果</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -d --name webapp --link mysql --network bridge webapp:latest</span><br><span class="line">docker: Error response from daemon: Cannot link to /mysql, as it does not belong to the default network.</span><br><span class="line">ERRO[0000] error waiting for container: context canceled...</span><br></pre></td></tr></table></figure><ul><li>可以看到容器并不能正常的启动，而 <code>Docker</code> 提醒我们两个容器处于不同的网络，之间是不能相互连接引用的。</li><li>我们来改变一下，让运行 <code>Web</code>应用的容器加入到 <code>individual</code> 这个网络，就可以成功建立容器间的网络连接了</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -d --name webapp --link mysql --network individual webapp:latest</span><br></pre></td></tr></table></figure><h3 id="7-9-端口映射"><a href="#7-9-端口映射" class="headerlink" title="7.9 端口映射"></a>7.9 端口映射</h3><blockquote><p>刚才我们提及的都是容器直接通过 <code>Docker</code> 网络进行的互相访问，在实际使用中，还有一个非常常见的需求，就是我们需要在容器外通过网络访问容器中的应用。最简单的一个例子，我们提供了 Web 服务，那么我们就需要提供一种方式访问运行在容器中的 Web 应用。</p></blockquote><ul><li>在 <code>Docker</code> 中，提供了一个端口映射的功能实现这样的需求…</li></ul><p><img src="https://user-gold-cdn.xitu.io/2018/9/23/16605128077de72a" alt=""></p><ul><li>通过 <code>Docker</code> 端口映射功能，我们可以把容器的端口映射到宿主操作系统的端口上，当我们从外部访问宿主操作系统的端口时，数据请求就会自动发送给与之关联的容器端口</li><li>要映射端口，我们可以在创建容器时使用 <code>-p</code> 或者是 <code>--publish</code>选项…</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -d --name nginx -p 80:80 -p 443:443 nginx:1.12</span><br></pre></td></tr></table></figure><blockquote><p>使用端口映射选项的格式是 <code>-p &lt;ip&gt;:&lt;host-port&gt;:&lt;container-port&gt;</code>，其中 <code>ip</code> 是宿主操作系统的监听 <code>ip</code>，可以用来控制监听的网卡，默认为 <code>0.0.0.0</code>，也就是监听所有网卡。<code>host-port</code> 和 <code>container-port</code> 分别表示映射到宿主操作系统的端口和容器的端口，这两者是可以不一样的，我们可以将容器的 <code>80</code> 端口映射到宿主操作系统的 8080 端口，传入 <code>-p 8080:80</code> 即可。</p></blockquote><ul><li>我们可以在容器列表里看到端口映射的配置…</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                                      NAMES</span><br><span class="line">bc79fc5d42a6        nginx:1.12          &quot;nginx -g &apos;daemon of…&quot;   4 seconds ago       Up 2 seconds        0.0.0.0:80-&gt;80/tcp, 0.0.0.0:443-&gt;443/tcp   nginx...</span><br></pre></td></tr></table></figure><ul><li>打印的结果里用 <code>-&gt;</code> 标记了端口的映射关系。</li></ul><h3 id="7-10-在-Windows-和-macOS-中使用映射"><a href="#7-10-在-Windows-和-macOS-中使用映射" class="headerlink" title="7.10 在 Windows 和 macOS 中使用映射"></a>7.10 在 Windows 和 macOS 中使用映射</h3><blockquote><p><code>Docker</code> 的端口映射功能是将容器端口映射到宿主操作系统的端口上，实际来说就是映射到了 <code>Linux</code> 系统的端口上。而我们知道，在 <code>Windows</code> 和 <code>macOS</code> 中运行的 Docker，其 Linux 环境是被虚拟出来的，如果我们仅仅是将端口映射到 <code>Linux</code> 上，由于虚拟环境还有一层隔离，我们依然不能通过<code>Windows</code> 或<code>macOS</code> 的端口来访问容器。</p></blockquote><ul><li>解决这种问题的方法很简单，只需要再加一次映射，将虚拟 <code>Linux</code> 系统中的端口映射到 <code>Windows</code> 或 <code>macOS</code> 的端口即可。…</li></ul><p><img src="https://user-gold-cdn.xitu.io/2018/9/23/166053965573b1f4" alt=""></p><ul><li>如果我们使用 <code>Docker for Windows</code> 或 <code>Docker for</code> Mac，这个端口映射的操作程序会自动帮助我们完成，所以我们不需要做任何额外的事情，就能够直接使用 <code>Windows</code> 或 <code>macOS</code> 的端口访问容器端口了。</li><li>而当我们使用 <code>Docker Toolbox</code> 时，由于其自动化能力比较差，所以需要我们在 <code>VirtualBox</code> 里单独配置这个操作系统端口到 <code>Linux</code> 端口的映射关系…</li></ul><p><img src="https://user-gold-cdn.xitu.io/2018/9/23/166053d78b8b1f5c" alt=""></p><blockquote><p>在 <code>VirtualBox</code> 配置中的端口转发一栏里，进行相关的配置即可</p></blockquote><h2 id="八、管理和存储数据"><a href="#八、管理和存储数据" class="headerlink" title="八、管理和存储数据"></a>八、管理和存储数据</h2><h3 id="8-1-数据管理实现方式"><a href="#8-1-数据管理实现方式" class="headerlink" title="8.1 数据管理实现方式"></a>8.1 数据管理实现方式</h3><p><strong>Docker 容器中的文件系统于我们这些开发使用者来说，虽然有很多优势，但也有很多弊端，其中显著的两点就是</strong></p><ul><li>沙盒文件系统是跟随容器生命周期所创建和移除的，数据无法直接被持久化存储。</li><li>由于容器隔离，我们很难从容器外部获得或操作容器内部文件中的数据</li></ul><blockquote><p>当然，<code>Docker</code> 很好的解决了这些问题，这主要还是归功于 <code>Docker</code> 容器文件系统是基于 <code>UnionFS</code>。由于 <code>UnionFS</code> 支持挂载不同类型的文件系统到统一的目录结构中，所以我们只需要将宿主操作系统中，文件系统里的文件或目录挂载到容器中，便能够让容器内外共享这个文件。</p></blockquote><ul><li>由于通过这种方式可以互通容器内外的文件，那么文件数据持久化和操作容器内文件的问题就自然而然的解决了。</li><li>同时，<code>UnionFS</code> 带来的读写性能损失是可以忽略不计的，所以这种实现可以说是相当优秀的…</li></ul><h3 id="8-2-挂载方式"><a href="#8-2-挂载方式" class="headerlink" title="8.2 挂载方式"></a>8.2 挂载方式</h3><blockquote><p>基于底层存储实现，<code>Docker</code> 提供了三种适用于不同场景的文件系统挂载方式：Bind <code>Mount</code>、<code>Volume</code> 和 <code>Tmpfs Mount</code></p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/9/25/1660eff4b182c891" alt=""></p><ul><li><code>Bind Mount</code> 能够直接将宿主操作系统中的目录和文件挂载到容器内的文件系统中，通过指定容器外的路径和容器内的路径，就可以形成挂载映射关系，在容器内外对文件的读写，都是相互可见的。</li><li><code>Volume</code> 也是从宿主操作系统中挂载目录到容器内，只不过这个挂载的目录由 Docker 进行管理，我们只需要指定容器内的目录，不需要关心具体挂载到了宿主操作系统中的哪里。</li><li><code>Tmpfs Mount</code> 支持挂载系统内存中的一部分到容器的文件系统里，不过由于内存和容器的特征，它的存储并不是持久的，其中的内容会随着容器的停止而消失…</li></ul><h3 id="8-3-挂载文件到容器"><a href="#8-3-挂载文件到容器" class="headerlink" title="8.3 挂载文件到容器"></a>8.3 挂载文件到容器</h3><blockquote><p>要将宿主操作系统中的目录挂载到容器之后，我们可以在容器创建的时候通过传递 -v 或 –volume 选项来指定内外挂载的对应目录或文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -d --name nginx -v /webapp/html:/usr/share/nginx/html nginx:1.12</span><br></pre></td></tr></table></figure><ul><li>使用 <code>-v</code>或 <code>--volume</code> 来挂载宿主操作系统目录的形式是 <code>-v &lt;host-path&gt;:&lt;container-path&gt;</code> 或 <code>--volume &lt;host-path&gt;:&lt;container-path&gt;</code>，其中 <code>host-path</code> 和 <code>container-path</code> 分别代表宿主操作系统中的目录和容器中的目录。这里需要注意的是，为了避免混淆，<code>Docker</code>这里强制定义目录时必须使用绝对路径，不能使用相对路径。</li><li>我们能够指定目录进行挂载，也能够指定具体的文件来挂载，具体选择何种形式来挂载，大家可以根据具体的情况来选择。</li><li>当挂载了目录的容器启动后，我们可以看到我们在宿主操作系统中的文件已经出现在容器中了…</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker exec nginx ls /usr/share/nginx/html</span><br><span class="line">index.html</span><br></pre></td></tr></table></figure><blockquote><p>在 <code>docker inspect</code> 的结果里，我们可以看到有关容器数据挂载相关的信息</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker inspect nginx</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">## ......</span><br><span class="line">        &quot;Mounts&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;bind&quot;,</span><br><span class="line">                &quot;Source&quot;: &quot;/webapp/html&quot;,</span><br><span class="line">                &quot;Destination&quot;: &quot;/usr/share/nginx/html&quot;,</span><br><span class="line">                &quot;Mode&quot;: &quot;&quot;,</span><br><span class="line">                &quot;RW&quot;: true,</span><br><span class="line">                &quot;Propagation&quot;: &quot;rprivate&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">## ......</span><br><span class="line">    &#125;</span><br><span class="line">]...</span><br></pre></td></tr></table></figure><blockquote><p>在关于挂载的信息中我们可以看到一个 <code>RW</code> 字段，这表示挂载目录或文件的读写性 ( <code>Read and Write</code> )。实际操作中，<code>Docker</code> 还支持以只读的方式挂载，通过只读方式挂载的目录和文件，只能被容器中的程序读取，但不接受容器中程序修改它们的请求。在挂载选项 <code>-v</code>后再接上 <code>:ro</code> 就可以只读挂载了…</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -d --name nginx -v /webapp/html:/usr/share/nginx/html:ro nginx:1.12</span><br></pre></td></tr></table></figure><h3 id="8-4-挂载临时文件目录"><a href="#8-4-挂载临时文件目录" class="headerlink" title="8.4 挂载临时文件目录"></a>8.4 挂载临时文件目录</h3><ul><li><code>Tmpfs Mount</code> 是一种特殊的挂载方式，它主要利用内存来存储数据。由于内存不是持久性存储设备，所以其带给 <code>Tmpfs Mount</code> 的特征就是临时性挂载。</li><li>与挂载宿主操作系统目录或文件不同，挂载临时文件目录要通过 <code>--tmpfs</code> 这个选项来完成。由于内存的具体位置不需要我们来指定，这个选项里我们只需要传递挂载到容器内的目录即可。…</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -d --name webapp --tmpfs /webapp/cache webapp:latest</span><br></pre></td></tr></table></figure><blockquote><p>容器已挂载的临时文件目录我们也可以通过 <code>docker inspect</code> 命令查看。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker inspect webapp</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">## ......</span><br><span class="line">         &quot;Tmpfs&quot;: &#123;</span><br><span class="line">            &quot;/webapp/cache&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">## ......</span><br><span class="line">    &#125;</span><br><span class="line">]...</span><br></pre></td></tr></table></figure><ul><li>挂载临时文件首先要注意它不是持久存储这一特性，在此基础上，它有几种常见的适应场景。</li><li>应用中使用到，但不需要进行持久保存的敏感数据，可以借助内存的非持久性和程序隔离性进行一定的安全保障。</li><li>读写速度要求较高，数据变化量大，但不需要持久保存的数据，可以借助内存的高读写速度减少操作的时间…</li></ul><h3 id="8-5-使用数据卷"><a href="#8-5-使用数据卷" class="headerlink" title="8.5 使用数据卷"></a>8.5 使用数据卷</h3><ul><li>除了与其他虚拟机工具近似的宿主操作系统目录挂载的功能外，<code>Docker</code> 还创造了数据卷 ( <code>Volume</code> ) 这个概念。数据卷的本质其实依然是宿主操作系统上的一个目录，只不过这个目录存放在<code>Docker</code> 内部，接受 <code>Docker</code>的管理。</li><li>在使用数据卷进行挂载时，我们不需要知道数据具体存储在了宿主操作系统的何处，只需要给定容器中的哪个目录会被挂载即可。</li><li>我们依然可以使用 <code>-v</code>或 <code>--volume</code> 选项来定义数据卷的挂载。…</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -d --name webapp -v /webapp/storage webapp:latest</span><br></pre></td></tr></table></figure><blockquote><p>数据卷挂载到容器后，我们可以通过 <code>docker inspect</code> 看到容器中数据卷挂载的信息。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker inspect webapp</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">## ......</span><br><span class="line">        &quot;Mounts&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;volume&quot;,</span><br><span class="line">                &quot;Name&quot;: &quot;2bbd2719b81fbe030e6f446243386d763ef25879ec82bb60c9be7ef7f3a25336&quot;,</span><br><span class="line">                &quot;Source&quot;: &quot;/var/lib/docker/volumes/2bbd2719b81fbe030e6f446243386d763ef25879ec82bb60c9be7ef7f3a25336/_data&quot;,</span><br><span class="line">                &quot;Destination&quot;: &quot;/webapp/storage&quot;,</span><br><span class="line">                &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">                &quot;Mode&quot;: &quot;&quot;,</span><br><span class="line">                &quot;RW&quot;: true,</span><br><span class="line">                &quot;Propagation&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">## ......</span><br><span class="line">    &#125;</span><br><span class="line">]...</span><br></pre></td></tr></table></figure><ul><li>这里我们所得到的信息与绑定挂载有所区别，除了 <code>Type</code> 中的类型不一样之外，在数据卷挂载中，我们还要关注一下<code>Name</code> 和 <code>Source</code> 这两个信息。</li><li>其中 <code>Source</code> 是 <code>Docker</code> 为我们分配用于挂载的宿主机目录，其位于 <code>Docker</code> 的资源区域 ( 这里是默认的<code>/var/lib/docker</code> ) 内。当然，我们并不需要关心这个目录，一切对它的管理都已经在 <code>Docker</code>内实现了。</li><li>为了方便识别数据卷，我们可以像命名容器一样为数据卷命名，这里的 <code>Name</code> 就是数据卷的命名。在我们未给出数据卷命名的时候，<code>Docker</code>会采用数据卷的 <code>ID</code> 命名数据卷。我们也可以通过 <code>-v &lt;name&gt;:&lt;container-path&gt;</code> 这种形式来命名数据卷…</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -d --name webapp -v appdata:/webapp/storage webapp:latest</span><br></pre></td></tr></table></figure><blockquote><p>由于 <code>-v</code> 选项既承载了 <code>Bind Mount</code> 的定义，又参与了 <code>Volume</code> 的定义，所以其传参方式需要特别留意。前面提到了<code>，-v</code> 在定义绑定挂载时必须使用绝对路径，其目的主要是为了避免与数据卷挂载中命名这种形式的冲突。</p></blockquote><h2 id="九、操作镜像：保存和共享镜像"><a href="#九、操作镜像：保存和共享镜像" class="headerlink" title="九、操作镜像：保存和共享镜像"></a>九、操作镜像：保存和共享镜像</h2><h3 id="9-1-提交容器更改"><a href="#9-1-提交容器更改" class="headerlink" title="9.1 提交容器更改"></a>9.1 提交容器更改</h3><ul><li>之前我们已经介绍过了，<code>Docker</code> 镜像的本质是多个基于 <code>UnionFS</code> 的镜像层依次挂载的结果，而容器的文件系统则是在以只读方式挂载镜像后增加的一个可读可写的沙盒环境。</li><li>基于这样的结构，<code>Docker</code> 中为我们提供了将容器中的这个可读可写的沙盒环境持久化为一个镜像层的方法。更浅显的说，就是我们能够很轻松的在 <code>Docker</code> 里将容器内的修改记录下来，保存为一个新的镜像。</li><li>将容器修改的内容保存为镜像的命令是 <code>docker</code> commit，由于镜像的结构很像代码仓库里的修改记录，而记录容器修改的过程又像是在提交代码，所以这里我们更形象的称之为提交容器的更改…</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker commit webapp</span><br><span class="line">sha256:0bc42f7ff218029c6c4199ab5c75ab83aeaaed3b5c731f715a3e807dda61d19e</span><br></pre></td></tr></table></figure><ul><li><code>Docker</code> 执行将容器内沙盒文件系统记录成镜像层的时候，会先暂停容器的运行，以保证容器内的文件系统处于一个相对稳定的状态，确保数据的一致性。</li><li>在使用 <code>docker commit</code> 提交镜像更新后，我们可以得到 <code>Docker</code>创建的新镜像的 <code>ID</code>，之后我们也能够从本地镜像列表中找到它…</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker images</span><br><span class="line">REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">&lt;none&gt;                &lt;none&gt;              0bc42f7ff218        3 seconds ago       372MB</span><br><span class="line">## .........</span><br></pre></td></tr></table></figure><blockquote><p>像通过 <code>Git</code> 等代码仓库软件提交代码一样，我们还能在提交容器更改的时候给出一个提交信息，方便以后查询</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker commit -m &quot;Configured&quot; webapp</span><br></pre></td></tr></table></figure><h3 id="9-2-为镜像命名"><a href="#9-2-为镜像命名" class="headerlink" title="9.2 为镜像命名"></a>9.2 为镜像命名</h3><ul><li>在上面的例子里，我们发现提交容器更新后产生的镜像并没 <code>REPOSITORY</code> 和 <code>TAG</code> 的内容，也就是说，这个新的镜像还没有名字。</li><li>之前我们谈到过，使用没有名字的镜像并不是很好的选择，因为我们无法直观的看到我们正在使用什么。好在 <code>Docker</code> 为我们提供了一个为镜像取名的命令，也就是 <code>docker tag</code> 命令…</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker tag 0bc42f7ff218 webapp:1.0</span><br></pre></td></tr></table></figure><blockquote><p>使用 <code>docker tag</code> 能够为未命名的镜像指定镜像名，也能够对已有的镜像创建一个新的命名</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker tag webapp:1.0 webapp:latest</span><br></pre></td></tr></table></figure><blockquote><p>当我们对未命名的镜像进行命名后，<code>Docker</code> 就不会在镜像列表里继续显示这个镜像，取而代之的是我们新的命名。而如果我们对以后镜像使用 <code>docker tag</code>，旧的镜像依然会存在于镜像列表中。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker images</span><br><span class="line">REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">webapp                1.0                 0bc42f7ff218        29 minutes ago      372MB</span><br><span class="line">webapp                latest              0bc42f7ff218        29 minutes ago      372MB</span><br><span class="line">## .........</span><br></pre></td></tr></table></figure><ul><li>由于镜像是对镜像层的引用记录，所以我们对镜像进行命名后，虽然能够在镜像列表里同时看到新老两个镜像，实质是它们其实引用着相同的镜像层，这个我们能够从镜像 ID 中看得出来 ( 因为镜像 <code>ID</code> 就是最上层镜像层的 <code>ID</code> )。正是这个原因，我们虽然创建了新的镜像，但对物理存储的占用空间却不是镜像大小直接翻倍，并且创建也在霎那之间。</li><li>除了使用 <code>docker tag</code> 在容器提交为新的镜像后为镜像命名这种方式外，我们还可以直接在 <code>docker commit</code> 命令里指定新的镜像名，这种方式在使用容器提交时会更加方便。…</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker commit -m &quot;Upgrade&quot; webapp webapp：2.0</span><br></pre></td></tr></table></figure><h3 id="9-3-镜像的迁移"><a href="#9-3-镜像的迁移" class="headerlink" title="9.3 镜像的迁移"></a>9.3 镜像的迁移</h3><ul><li>在我们将更新导出为镜像后，就可以开始迁移镜像的工作了。</li><li>由于 <code>Docker</code> 是以集中的方式管理镜像的，所以在迁移之前，我们要先从 <code>Docker</code> 中取出镜像。<code>docker save</code> 命令可以将镜像输出，提供了一种让我们保存镜像到 Docker 外部的方式…</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker save webapp:1.0 &gt; webapp-1.0.tar</span><br></pre></td></tr></table></figure><ul><li>在默认定义下，<code>docker save</code> 命令会将镜像内容放入输出流中，这就需要我们使用管道进行接收 ( 也就是命令中的 &gt; 符号 )，这属于 <code>Linux</code>等系统控制台中的用法，这里我们不做详细讲解。</li><li>管道这种用法有时候依然不太友好，<code>docker save</code> 命令还为我们提供了 <code>-o</code> 选项，用来指定输出文件，使用这个选项可以让命令更具有统一性。…</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker save -o ./webapp-1.0.tar webapp:1.0</span><br></pre></td></tr></table></figure><blockquote><p>在镜像导出之后，我们就可以找到已经存储镜像内容的 <code>webapp-1.0.tar</code> 这个文件了。有兴趣的朋友，可以使用解压软件查看其中的内容，你会看到里面其实就是镜像所基于的几个镜像层的记录文件</p></blockquote><h3 id="9-4-导入镜像"><a href="#9-4-导入镜像" class="headerlink" title="9.4 导入镜像"></a>9.4 导入镜像</h3><ul><li>我们可以通过很多种方式将导出的镜像文件复制到另一台机器上，在这么操作之后，我们就要将镜像导入到这台新机器中运行的 <code>Docker</code> 中</li><li>导入镜像的方式也很简单，使用与 <code>docker save</code> 相对的 <code>docker load</code> 命令即可</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker load &lt; webapp-1.0.tar</span><br></pre></td></tr></table></figure><blockquote><p>相对的，<code>docker load</code> 命令是从输入流中读取镜像的数据，所以我们这里也要使用管道来传输内容。当然，我们也能够使用 <code>-i</code> 选项指定输入文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker load -i webapp-1.0.tar</span><br></pre></td></tr></table></figure><blockquote><p>镜像导入后，我们就可以通过 <code>docker images</code> 看到它了，导入的镜像会延用原有的镜像名称</p></blockquote><h3 id="9-5-批量迁移"><a href="#9-5-批量迁移" class="headerlink" title="9.5 批量迁移"></a>9.5 批量迁移</h3><blockquote><p>通过 <code>docker save</code> 和 <code>docker load</code>命令我们还能够批量迁移镜像，只要我们在 <code>docker save</code> 中传入多个镜像名作为参数，它就能够将这些镜像都打成一个包，便于我们一次性迁移多个镜像。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker save -o ./images.tar webapp:1.0 nginx:1.12 mysql:5.7</span><br></pre></td></tr></table></figure><blockquote><p>装有多个镜像的包可以直接被 <code>docker load</code> 识别和读取，我们将这个包导入后，所有其中装载的镜像都会被导入到 <code>Docker</code>之中。</p></blockquote><h3 id="9-6-导出和导入容器"><a href="#9-6-导出和导入容器" class="headerlink" title="9.6 导出和导入容器"></a>9.6 导出和导入容器</h3><ul><li>也许 <code>Docker</code> 的开发者认为，提交镜像修改，再导出镜像进行迁移的方法还不够效率，所以还为我们提供了一个导出容器的方法。</li><li>使用 <code>docker export</code> 命令我们可以直接导出容器，我们可以把它简单的理解为 <code>docker commit</code> 与 <code>docker save</code> 的结合体…</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker export -o ./webapp.tar webapp</span><br></pre></td></tr></table></figure><blockquote><p>相对的，使用 <code>docker export</code> 导出的容器包，我们可以使用 <code>docker import</code> 导入。这里需要注意的是，使用 <code>docker import</code> 并非直接将容器导入，而是将容器运行时的内容以镜像的形式导入。所以导入的结果其实是一个镜像，而不是容器。在 <code>docker import</code> 的参数里，我们可以给这个镜像命名…</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker import ./webapp.tar webapp:1.0</span><br></pre></td></tr></table></figure><blockquote><p>在开发的过程中，使用 <code>docker save</code> 和 <code>docker load</code>，或者是使用 <code>docker export</code>和 <code>docker import</code> 都可以达到迁移容器或者镜像的目的</p></blockquote><h2 id="十、操作镜像：通过-Dockerfile-创建镜像"><a href="#十、操作镜像：通过-Dockerfile-创建镜像" class="headerlink" title="十、操作镜像：通过 Dockerfile 创建镜像"></a>十、操作镜像：通过 Dockerfile 创建镜像</h2><h3 id="10-1-关于-Dockerfile"><a href="#10-1-关于-Dockerfile" class="headerlink" title="10.1 关于 Dockerfile"></a>10.1 关于 Dockerfile</h3><blockquote><p><code>Dockerfile</code> 是 <code>Docker</code>中用于定义镜像自动化构建流程的配置文件，在 <code>Dockerfile</code> 中，包含了构建镜像过程中需要执行的命令和其他操作。通过 <code>Dockerfile</code> 我们可以更加清晰、明确的给定 <code>Docker</code> 镜像的制作过程，而由于其仅是简单、小体积的文件，在网络等其他介质中传递的速度极快，能够更快的帮助我们实现容器迁移和集群部署…</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/10/1/1662ee4fdf802776" alt=""></p><blockquote><p>通常来说，我们对 <code>Dockerfile</code> 的定义就是针对一个名为<code>Dockerfile</code> 的文件，其虽然没有扩展名，但本质就是一个文本文件，所以我们可以通过常见的文本编辑器或者 <code>IDE</code> 创建和编辑它。</p></blockquote><ul><li><code>Dockerfile</code> 的内容很简单，主要以两种形式呈现，一种是注释行，另一种是指令行…</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Comment</span><br><span class="line">INSTRUCTION arguments</span><br></pre></td></tr></table></figure><blockquote><p>在 <code>Dockerfile</code> 中，拥有一套独立的指令语法，其用于给出镜像构建过程中所要执行的过程。<code>Dockerfile</code> 里的指令行，就是由指令与其相应的参数所组成</p></blockquote><h3 id="10-2-环境搭建与镜像构建"><a href="#10-2-环境搭建与镜像构建" class="headerlink" title="10.2 环境搭建与镜像构建"></a>10.2 环境搭建与镜像构建</h3><ul><li>如果具体来说 <code>Dockerfile</code> 的作用和其实际运转的机制，我们可以用一个我们开发中的常见流程来比较。</li><li>在一个完整的开发、测试、部署过程中，程序运行环境的定义通常是由开发人员来进行的，因为他们更加熟悉程序运转的各个细节，更适合搭建适合程序的运行环境。</li><li>在这样的前提下，为了方便测试和运维搭建相同的程序运行环境，常用的做法是由开发人员编写一套环境搭建手册，帮助测试人员和运维人员了解环境搭建的流程。</li><li>而 <code>Dockerfile</code> 就很像这样一个环境搭建手册，因为其中包含的就是一个构建容器的过程。</li><li>而比环境搭建手册更好的是，<code>Dockerfile</code> 在容器体系下能够完成自动构建，既不需要测试和运维人员深入理解环境中各个软件的具体细节，也不需要人工执行每一个搭建流程。…</li></ul><h3 id="10-3-编写-Dockerfile"><a href="#10-3-编写-Dockerfile" class="headerlink" title="10.3 编写 Dockerfile"></a>10.3 编写 Dockerfile</h3><blockquote><p>相对于之前我们介绍的提交容器修改，再进行镜像迁移的方式相比，使用 <code>Dockerfile</code> 进行这项工作有很多优势，我总结了几项尤为突出的。</p></blockquote><ul><li><code>Dockerfile</code> 的体积远小于镜像包，更容易进行快速迁移和部署。</li><li>环境构建流程记录了<code>Dockerfile</code>中，能够直观的看到镜像构建的顺序和逻辑。</li><li>使用 <code>Dockerfile</code> 来构建镜像能够更轻松的实现自动部署等自动化流程。</li><li>在修改环境搭建细节时，修改 <code>Dockerfile</code> 文件要比从新提交镜像来的轻松、简单。…</li></ul><blockquote><p>纸上得来终觉浅，光说很多关于 <code>Dockerfile</code> 的概念其实对我们开发使用来说意义不大，这里我们直接学习如何编写一个用于构建镜像的 <code>Dockerfile</code>。</p></blockquote><ul><li>首先我们来看一个完整的 <code>Dockerfile</code>的例子，这是用于构建 <code>Docker</code>官方所提供的 <code>Redis</code>镜像的 <code>Dockerfile</code> 文件…</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">FROM debian:stretch-slim</span><br><span class="line"></span><br><span class="line"># add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added</span><br><span class="line">RUN groupadd -r redis &amp;&amp; useradd -r -g redis redis</span><br><span class="line"></span><br><span class="line"># grab gosu for easy step-down from root</span><br><span class="line"># https://github.com/tianon/gosu/releases</span><br><span class="line">ENV GOSU_VERSION 1.10</span><br><span class="line">RUN set -ex; \</span><br><span class="line">\</span><br><span class="line">fetchDeps=&quot; \</span><br><span class="line">ca-certificates \</span><br><span class="line">dirmngr \</span><br><span class="line">gnupg \</span><br><span class="line">wget \</span><br><span class="line">&quot;; \</span><br><span class="line">apt-get update; \</span><br><span class="line">apt-get install -y --no-install-recommends $fetchDeps; \</span><br><span class="line">rm -rf /var/lib/apt/lists/*; \</span><br><span class="line">\</span><br><span class="line">dpkgArch=&quot;$(dpkg --print-architecture | awk -F- &apos;&#123; print $NF &#125;&apos;)&quot;; \</span><br><span class="line">wget -O /usr/local/bin/gosu &quot;https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch&quot;; \</span><br><span class="line">wget -O /usr/local/bin/gosu.asc &quot;https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc&quot;; \</span><br><span class="line">export GNUPGHOME=&quot;$(mktemp -d)&quot;; \</span><br><span class="line">gpg --keyserver ha.pool.sks-keyservers.net --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \</span><br><span class="line">gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \</span><br><span class="line">gpgc...</span><br></pre></td></tr></table></figure><blockquote><p>其中可以很明确的见到我们之前说的 <code>Dockerfile</code> 文件的两种行结构，也就是指令行和注释行，接下来我们着重关注指令行，因为这是构建镜像的关键</p></blockquote><h3 id="10-4-Dockerfile-的结构"><a href="#10-4-Dockerfile-的结构" class="headerlink" title="10.4 Dockerfile 的结构"></a>10.4 Dockerfile 的结构</h3><blockquote><p>总体上来说，我们可以将 <code>Dockerfile</code> 理解为一个由上往下执行指令的脚本文件。当我们调用构建命令让 <code>Docker</code> 通过我们给出的<code>Dockerfile</code> 构建镜像时，Docker 会逐一按顺序解析 <code>Dockerfile</code> 中的指令，并根据它们不同的含义执行不同的操作。</p></blockquote><p>如果进行细分，我们可以将 <code>Dockerfile</code> 的指令简单分为五大类。…</p><ul><li><strong>基础指令</strong>：用于定义新镜像的基础和性质。</li><li><strong>控制指令</strong>：是指导镜像构建的核心部分，用于描述镜像在构建过程中需要执行的命令。</li><li><strong>引入指令</strong>：用于将外部文件直接引入到构建镜像内部。</li><li><strong>执行指令</strong>：能够为基于镜像所创建的容器，指定在启动时需要执行的脚本或命令。</li><li><strong>配置指令</strong>：对镜像以及基于镜像所创建的容器，可以通过配置指令对其网络、用户等内容进行配置…</li></ul><h3 id="10-5-常见-Dockerfile-指令"><a href="#10-5-常见-Dockerfile-指令" class="headerlink" title="10.5 常见 Dockerfile 指令"></a>10.5 常见 Dockerfile 指令</h3><blockquote><p>熟悉 <code>Dockerfile</code> 的指令是编写 <code>Dockerfile</code> 的前提，这里我们先来介绍几个最常见的 <code>Dockerfile</code> 指令，它们基本上囊括了所有 <code>Dockerfile</code> 中<code>90%</code>以上的工作。</p></blockquote><p><strong>FROM</strong></p><ul><li>通常来说，我们不会从零开始搭建一个镜像，而是会选择一个已经存在的镜像作为我们新镜像的基础，这种方式能够大幅减少我们的时间。</li><li>在 <code>Dockerfile</code> 里，我们可以通过 <code>FROM</code> 指令指定一个基础镜像，接下来所有的指令都是基于这个镜像所展开的。在镜像构建的过程中，<code>Docker</code> 也会先获取到这个给出的基础镜像，再从这个镜像上进行构建操作。</li><li><code>FROM</code> 指令支持三种形式，不管是哪种形式，其核心逻辑就是指出能够被 <code>Docker</code> 识别的那个镜像，好让 <code>Docker</code>从那个镜像之上开始构建工作…</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM &lt;image&gt; [AS &lt;name&gt;]</span><br><span class="line">FROM &lt;image&gt;[:&lt;tag&gt;] [AS &lt;name&gt;]</span><br><span class="line">FROM &lt;image&gt;[@&lt;digest&gt;] [AS &lt;name&gt;]</span><br></pre></td></tr></table></figure><ul><li>既然选择一个基础镜像是构建新镜像的根本，那么 <code>Dockerfile</code> 中的第一条指令必须是<code>FROM</code> 指令，因为没有了基础镜像，一切构建过程都无法开展。</li><li>当然，一个 <code>Dockerfile</code> 要以 <code>FROM</code> 指令作为开始并不意味着 <code>FROM</code>只能是 <code>Dockerfile</code>中的第一条指令。在 <code>Dockerfile</code> 中可以多次出现 <code>FROM</code>指令，当 <code>FROM</code> 第二次或者之后出现时，表示在此刻构建时，要将当前指出镜像的内容合并到此刻构建镜像的内容里。这对于我们直接合并两个镜像的功能很有帮助…</li></ul><p><strong>RUN</strong></p><ul><li>镜像的构建虽然是按照指令执行的，但指令只是引导，最终大部分内容还是控制台中对程序发出的命令，而 <code>RUN</code> 指令就是用于向控制台发送命令的指令。</li><li>在<code>RUN</code>指令之后，我们直接拼接上需要执行的命令，在构建时，<code>Docker</code> 就会执行这些命令，并将它们对文件系统的修改记录下来，形成镜像的变化。…</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RUN &lt;command&gt;</span><br><span class="line">RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</span><br></pre></td></tr></table></figure><blockquote><p><code>RUN</code> 指令是支持<code>\</code> 换行的，如果单行的长度过长，建议对内容进行切割，方便阅读。而事实上，我们会经常看到 <code>\</code> 分割的命令，例如在上面我们贴出的 <code>Redis</code> 镜像的 <code>Dockerfile</code> 里</p></blockquote><p><strong>ENTRYPOINT 和 CMD</strong></p><blockquote><p>基于镜像启动的容器，在容器启动时会根据镜像所定义的一条命令来启动容器中进程号为 <code>1</code> 的进程。而这个命令的定义，就是通过 <code>Dockerfile</code> 中的 <code>NTRYPOINT</code> 和 <code>CMD</code> 实现的。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</span><br><span class="line">ENTRYPOINT command param1 param2</span><br><span class="line"></span><br><span class="line">CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</span><br><span class="line">CMD [&quot;param1&quot;,&quot;param2&quot;]</span><br><span class="line">CMD command param1 param2...</span><br></pre></td></tr></table></figure><ul><li><code>ENTRYPOINT</code> 指令和 <code>CMD</code> 指令的用法近似，都是给出需要执行的命令，并且它们都可以为空，或者说是不在 <code>Dockerfile</code> 里指出。</li><li>当 <code>ENTRYPOINT</code> 与 <code>CMD</code> 同时给出时，<code>CMD</code> 中的内容会作为 <code>ENTRYPOINT</code> 定义命令的参数，最终执行容器启动的还是 <code>ENTRYPOINT</code> 中给出的命令…</li></ul><p><strong>EXPOSE</strong></p><blockquote><p>由于我们构建镜像时更了解镜像中应用程序的逻辑，也更加清楚它需要接收和处理来自哪些端口的请求，所以在镜像中定义端口暴露显然是更合理的做法。</p></blockquote><ul><li>通过 <code>EXPOSE</code> 指令就可以为镜像指定要暴露的端口。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPOSE &lt;port&gt; [&lt;port&gt;/&lt;protocol&gt;...]</span><br></pre></td></tr></table></figure><blockquote><p>当我们通过<code>EXPOSE</code>指令配置了镜像的端口暴露定义，那么基于这个镜像所创建的容器，在被其他容器通过 <code>--link</code> 选项连接时，就能够直接允许来自其他容器对这些端口的访问了</p></blockquote><p><strong>VOLUME</strong></p><ul><li>在一些程序里，我们需要持久化一些数据，比如数据库中存储数据的文件夹就需要单独处理。在之前的小节里，我们提到可以通过数据卷来处理这些问题。</li><li>但使用数据卷需要我们在创建容器时通过 <code>-v</code> 选项来定义，而有时候由于镜像的使用者对镜像了解程度不高，会漏掉数据卷的创建，从而引起不必要的麻烦。</li><li>还是那句话，制作镜像的人是最清楚镜像中程序工作的各项流程的，所以它来定义数据卷也是最合适的。所以在 <code>Dockerfile</code> 里，提供了 <code>VOLUME</code> 指令来定义基于此镜像的容器所自动建立的数据卷…</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VOLUME [&quot;/data&quot;]</span><br></pre></td></tr></table></figure><blockquote><p>在 <code>VOLUME</code> 指令中定义的目录，在基于新镜像创建容器时，会自动建立为数据卷，不需要我们再单独使用<code>-v</code>选项来配置了</p></blockquote><p><strong>COPY 和 ADD</strong></p><blockquote><p>在制作新的镜像的时候，我们可能需要将一些软件配置、程序代码、执行脚本等直接导入到镜像内的文件系统里，使用 <code>COPY</code> 或<code>ADD</code> 指令能够帮助我们直接从宿主机的文件系统里拷贝内容到镜像里的文件系统中。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;src&gt;... &lt;dest&gt;</span><br><span class="line">ADD [--chown=&lt;user&gt;:&lt;group&gt;] &lt;src&gt;... &lt;dest&gt;</span><br><span class="line"></span><br><span class="line">COPY [--chown=&lt;user&gt;:&lt;group&gt;] [&quot;&lt;src&gt;&quot;,... &quot;&lt;dest&gt;&quot;]</span><br><span class="line">ADD [--chown=&lt;user&gt;:&lt;group&gt;] [&quot;&lt;src&gt;&quot;,... &quot;&lt;dest&gt;&quot;]...</span><br></pre></td></tr></table></figure><ul><li><code>COPY</code> 与<code>ADD</code> 指令的定义方式完全一样，需要注意的仅是当我们的目录中存在空格时，可以使用后两种格式避免空格产生歧义。</li><li>对比<code>COPY</code> 与 <code>ADD</code>，两者的区别主要在于 <code>ADD</code> 能够支持使用网络端的<code>URL</code> 地址作为 <code>src</code> 源，并且在源文件被识别为压缩包时，自动进行解压，而<code>COPY</code> 没有这两个能力。</li><li>虽然看上去 <code>COPY</code> 能力稍弱，但对于那些不希望源文件被解压或没有网络请求的场景，<code>COPY</code>指令是个不错的选择。…</li></ul><h3 id="10-6-构建镜像"><a href="#10-6-构建镜像" class="headerlink" title="10.6 构建镜像"></a>10.6 构建镜像</h3><blockquote><p>在编写好 <code>Dockerfile</code> 之后，我们就可以构建我们所定义的镜像了，构建镜像的命令为 <code>docker build</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker build ./webapp</span><br></pre></td></tr></table></figure><ul><li><code>docker build</code> 可以接收一个参数，需要特别注意的是，这个参数为一个目录路径 ( 本地路径或 URL 路径 )，而并非 Dockerfile<code>文件的路径。在</code>docker build` 里，这个我们给出的目录会作为构建的环境目录，我们很多的操作都是基于这个目录进行的。</li><li>例如，在我们使用 <code>COPY</code> 或是 <code>ADD</code> 拷贝文件到构建的新镜像时，会以这个目录作为基础目录。</li><li>在默认情况下，<code>docker build</code> 也会从这个目录下寻找名为 <code>Dockerfile</code> 的文件，将它作为 <code>Dockerfile</code>内容的来源。如果我们的 <code>Dockerfile</code> 文件路径不在这个目录下，或者有另外的文件名，我们可以通过 <code>-f</code>选项单独给出 <code>Dockerfile</code>文件的路径。…</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker build -t webapp:latest -f ./webapp/a.Dockerfile ./webapp</span><br></pre></td></tr></table></figure><blockquote><p>当然，在构建时我们最好总是携带上 <code>-t</code> 选项，用它来指定新生成镜像的名称。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker build -t webapp:latest ./webapp</span><br></pre></td></tr></table></figure><h2 id="十一、常见-Dockerfile-使用技巧"><a href="#十一、常见-Dockerfile-使用技巧" class="headerlink" title="十一、常见 Dockerfile 使用技巧"></a>十一、常见 Dockerfile 使用技巧</h2><h3 id="11-1-构建中使用变量"><a href="#11-1-构建中使用变量" class="headerlink" title="11.1 构建中使用变量"></a>11.1 构建中使用变量</h3><blockquote><p>在实际编写 <code>Dockerfile</code> 时，与搭建环境相关的指令会是其中占有大部分比例的指令。在搭建程序所需运行环境时，难免涉及到一些可变量，例如依赖软件的版本，编译的参数等等。我们可以直接将这些数据写入到 <code>Dockerfile</code> 中完全没有问题，有问题的是这些可变量我们会经常调整，在调整时就需要我们到 <code>Dockerfile</code> 中找到它们并进行更改，如果只是简单的 <code>Dockerfile</code> 文件尚且好说，但如果是相对复杂或是存在多处变量的 <code>Dockerfile</code> 文件，这个工作就变得繁琐而让人烦躁了。</p></blockquote><ul><li>在 <code>Dockerfile</code> 里，我们可以用 <code>ARG</code> 指令来建立一个参数变量，我们可以在构建时通过构建指令传入这个参数变量，并且在 <code>Dockerfile</code>里使用它。</li><li>例如，我们希望通过参数变量控制 <code>Dockerfile</code> 中某个程序的版本，在构建时安装我们指定版本的软件，我们可以通过 <code>ARG</code> 定义的参数作为占位符，替换版本定义的部分…</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">FROM debian:stretch-slim</span><br><span class="line"></span><br><span class="line">## ......</span><br><span class="line"></span><br><span class="line">ARG TOMCAT_MAJOR</span><br><span class="line">ARG TOMCAT_VERSION</span><br><span class="line"></span><br><span class="line">## ......</span><br><span class="line"></span><br><span class="line">RUN wget -O tomcat.tar.gz &quot;https://www.apache.org/dyn/closer.cgi?action=download&amp;filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz&quot;</span><br><span class="line"></span><br><span class="line">## .........</span><br></pre></td></tr></table></figure><ul><li>在这个例子里，我们将 <code>Tomcat</code> 的版本号通过 <code>ARG</code> 指令定义为参数变量，在调用下载 <code>Tomcat</code> 包时，使用变量替换掉下载地址中的版本号。通过这样的定义，就可以让我们在不对 <code>Dockerfile</code> 进行大幅修改的前提下，轻松实现对 <code>Tomcat</code> 版本的切换并重新构建镜像了。</li></ul><blockquote><p>如果我们需要通过这个 <code>Dockerfile</code>文件构建 <code>Tomcat</code> 镜像，我们可以在构建时通过 <code>docker build</code>的 <code>--build-arg</code> 选项来设置参数变量…</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker build --build-arg TOMCAT_MAJOR=8 --build-arg TOMCAT_VERSION=8.0.53 -t tomcat:8.0 ./tomcat</span><br></pre></td></tr></table></figure><h3 id="11-2-环境变量"><a href="#11-2-环境变量" class="headerlink" title="11.2 环境变量"></a>11.2 环境变量</h3><blockquote><p>环境变量也是用来定义参数的东西，与 <code>ARG</code>指令相类似，环境变量的定义是通过 <code>ENV</code> 这个指令来完成的</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">FROM debian:stretch-slim</span><br><span class="line"></span><br><span class="line">## ......</span><br><span class="line"></span><br><span class="line">ENV TOMCAT_MAJOR 8</span><br><span class="line">ENV TOMCAT_VERSION 8.0.53</span><br><span class="line"></span><br><span class="line">## ......</span><br><span class="line"></span><br><span class="line">RUN wget -O tomcat.tar.gz &quot;https://www.apache.org/dyn/closer.cgi?action=download&amp;filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz&quot;...</span><br></pre></td></tr></table></figure><ul><li>环境变量的使用方法与参数变量一样，也都是能够直接替换指令参数中的内容。</li><li>与参数变量只能影响构建过程不同，环境变量不仅能够影响构建，还能够影响基于此镜像创建的容器。环境变量设置的实质，其实就是定义操作系统环境变量，所以在运行的容器里，一样拥有这些变量，而容器中运行的程序也能够得到这些变量的值。</li><li>另一个不同点是，环境变量的值不是在构建指令中传入的，而是在 <code>Dockerfile</code> 中编写的，所以如果我们要修改环境变量的值，我们需要到 <code>Dockerfile</code> 修改。不过即使这样，只要我们将 <code>ENV</code> 定义放在 <code>Dockerfile</code> 前部容易查找的地方，其依然可以很快的帮助我们切换镜像环境中的一些内容。</li><li>由于环境变量在容器运行时依然有效，所以运行容器时我们还可以对其进行覆盖，在创建容器时使用 <code>-e</code>或是 <code>--env</code> 选项，可以对环境变量的值进行修改或定义新的环境变量…</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:5.7</span><br></pre></td></tr></table></figure><ul><li>事实上，这种用法在我们开发中是非常常见的。也正是因为这种允许运行时配置的方法存在，环境变量和定义它的 <code>ENV</code> 指令，是我们更常使用的指令，我们会优先选择它们来实现对变量的操作。</li><li>关于环境变量是如何能够帮助我们更轻松的处理 <code>Docker</code> 镜像和容器使用等问题，我们会在下一节中进行实际展示，通过例子大家能够更容易理解它的原理。</li><li>另外需要说明一点，通过 <code>ENV</code> 指令和 <code>ARG</code> 指令所定义的参数，在使用时都是采用 <code>$ + NAME</code> 这种形式来占位的，所以它们之间的定义就存在冲突的可能性。对于这种场景，大家只需要记住，<code>ENV</code>指令所定义的变量，永远会覆盖<code>ARG</code> 所定义的变量，即使它们定时的顺序是相反的…</li></ul><h3 id="11-3-合并命令"><a href="#11-3-合并命令" class="headerlink" title="11.3 合并命令"></a>11.3 合并命令</h3><p>在上一节我们展示的完整的官方 <code>Redis</code> 镜像的 <code>Dockerfile</code> 中，我们会发现 RUN 等指令里会聚合下大量的代码。</p><p>事实上，下面两种写法对于搭建的环境来说是没有太大区别的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RUN apt-get update; \</span><br><span class="line">    apt-get install -y --no-install-recommends $fetchDeps; \</span><br><span class="line">    rm -rf /var/lib/apt/lists/*;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RUN apt-get update</span><br><span class="line">RUN apt-get install -y --no-install-recommends $fetchDeps</span><br><span class="line">RUN rm -rf /var/lib/apt/lists/*</span><br></pre></td></tr></table></figure><p>那为什么我们更多见的是第一种形式而非第二种呢？这就要从镜像构建的过程说起了。</p><p>看似连续的镜像构建过程，其实是由多个小段组成。每当一条能够形成对文件系统改动的指令在被执行前，<code>Docker</code> 先会基于上条命令的结果启动一个容器，在容器中运行这条指令的内容，之后将结果打包成一个镜像层，如此反复，最终形成镜像…</p><p><img src="https://user-gold-cdn.xitu.io/2018/10/3/166377aa670bb4a4" alt=""></p><p>所以说，我们之前谈到镜像是由多个镜像层叠加而得，而这些镜像层其实就是在我们 <code>Dockerfile</code>中每条指令所生成的。</p><p>了解了这个原理，大家就很容易理解为什么绝大多数镜像会将命令合并到一条指令中，因为这种做法不但减少了镜像层的数量，也减少了镜像构建过程中反复创建容器的次数，提高了镜像构建的速度…</p><h3 id="11-4-构建缓存"><a href="#11-4-构建缓存" class="headerlink" title="11.4 构建缓存"></a>11.4 构建缓存</h3><ul><li><code>Docker</code> 在镜像构建的过程中，还支持一种缓存策略来提高镜像的构建速度。</li><li>由于镜像是多个指令所创建的镜像层组合而得，那么如果我们判断新编译的镜像层与已经存在的镜像层未发生变化，那么我们完全可以直接利用之前构建的结果，而不需要再执行这条构建指令，这就是镜像构建缓存的原理。</li><li>那么 <code>Docker</code> 是如何判断镜像层与之前的镜像间不存在变化的呢？这主要参考两个维度，第一是所基于的镜像层是否一样，第二是用于生成镜像层的指令的内容是否一样- 基于这个原则，我们在条件允许的前提下，更建议将不容易发生变化的搭建过程放到 <code>Dockerfile</code> 的前部，充分利用构建缓存提高镜像构建的速度。另外，指令的合并也不宜过度，而是将易变和不易变的过程拆分，分别放到不同的指令里。</li><li>在另外一些时候，我们可能不希望 <code>Docker</code> 在构建镜像时使用构建缓存，这时我们可以通过 <code>--no-cache</code>选项来禁用它…</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker build --no-cache ./webapp</span><br></pre></td></tr></table></figure><h3 id="11-5-搭配-ENTRYPOINT-和-CMD"><a href="#11-5-搭配-ENTRYPOINT-和-CMD" class="headerlink" title="11.5 搭配 ENTRYPOINT 和 CMD"></a>11.5 搭配 ENTRYPOINT 和 CMD</h3><blockquote><p>上一节我们谈到了 <code>ENTRYPOINT</code> 和 <code>CMD</code> 这两个命令，也解释了这两个命令的目的，即都是用来指定基于此镜像所创建容器里主进程的启动命令的。</p></blockquote><ul><li>两个指令的区别在于，<code>ENTRYPOINT</code> 指令的优先级高于 <code>CMD</code>指令。当 <code>ENTRYPOINT</code> 和 <code>CMD</code>同时在镜像中被指定时，<code>CMD</code> 里的内容会作为 <code>ENTRYPOINT</code> 的参数，两者拼接之后，才是最终执行的命令。</li><li>为了更好的让大家理解，这里索性列出所有的 <code>ENTRYPOINT</code> 与<code>CMD</code> 的组合，供大家参考…</li></ul><table><thead><tr><th>ENTRYPOINT</th><th>CMD</th><th>实际执行</th></tr></thead><tbody><tr><td>ENTRYPOINT [“/bin/ep”, “arge”]</td><td></td><td>/bin/ep arge</td></tr><tr><td>ENTRYPOINT /bin/ep arge</td><td></td><td>/bin/sh -c /bin/ep arge</td></tr><tr><td></td><td>CMD [“/bin/exec”, “args”]</td><td>/bin/exec args</td></tr><tr><td></td><td>CMD /bin/exec args</td><td>/bin/sh -c /bin/exec args</td></tr><tr><td>ENTRYPOINT [“/bin/ep”, “arge”]</td><td>CMD [“/bin/exec”, “argc”]</td><td>/bin/ep arge /bin/exec argc</td></tr><tr><td>ENTRYPOINT [“/bin/ep”, “arge”]</td><td>CMD /bin/exec args</td><td>/bin/ep arge /bin/sh -c /bin/exec args</td></tr><tr><td>ENTRYPOINT /bin/ep arge</td><td>CMD [“/bin/exec”, “argc”]</td><td>/bin/sh -c /bin/ep arge /bin/exec argc</td></tr><tr><td>ENTRYPOINT /bin/ep arge</td><td>CMD /bin/exec args</td><td>/bin/sh -c /bin/ep arge /bin/sh -c /bin/exec args</td></tr></tbody></table><p>有的读者会存在疑问，既然两者都是用来定义容器启动命令的，为什么还要分成两个，合并为一个指令岂不是更方便吗？</p><ul><li>这其实在于 <code>ENTRYPOINT</code> 和<code>CMD</code>设计的目的是不同的。<code>ENTRYPOINT</code> 指令主要用于对容器进行一些初始化，而 <code>CMD</code> 指令则用于真正定义容器中主程序的启动命令。</li><li>另外，我们之前谈到创建容器时可以改写容器主程序的启动命令，而这个覆盖只会覆盖 <code>CMD</code> 中定义的内容，而不会影响 <code>ENTRYPOINT</code>中的内容。</li><li>我们依然以之前的 <code>Redis</code> 镜像为例，这是 <code>Redis</code> 镜像中对 <code>ENTRYPOINT</code> 和 <code>CMD</code> 的定义…</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">## ......</span><br><span class="line"></span><br><span class="line">COPY docker-entrypoint.sh /usr/local/bin/</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;docker-entrypoint.sh&quot;]</span><br><span class="line"></span><br><span class="line">## ......</span><br><span class="line"></span><br><span class="line">CMD [&quot;redis-server&quot;]...</span><br></pre></td></tr></table></figure><ul><li>可以很清晰的看到，<code>CMD</code> 指令定义的正是启动 Redis 的服务程序，而 <code>ENTRYPOINT</code>使用的是一个外部引入的脚本文件。</li><li>事实上，使用脚本文件来作为 <code>ENTRYPOINT</code> 的内容是常见的做法，因为对容器运行初始化的命令相对较多，全部直接放置在 <code>ENTRYPOINT</code> 后会特别复杂。</li><li>我们来看看 <code>Redis</code> 中的<code>ENTRYPOINT</code> 脚本，可以看到其中会根据脚本参数进行一些处理，而脚本的参数，其实就是 <code>CMD</code> 中定义的内容。…</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">set -e</span><br><span class="line"></span><br><span class="line"># first arg is `-f` or `--some-option`</span><br><span class="line"># or first arg is `something.conf`</span><br><span class="line">if [ &quot;$&#123;1#-&#125;&quot; != &quot;$1&quot; ] || [ &quot;$&#123;1%.conf&#125;&quot; != &quot;$1&quot; ]; then</span><br><span class="line">set -- redis-server &quot;$@&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># allow the container to be started with `--user`</span><br><span class="line">if [ &quot;$1&quot; = &apos;redis-server&apos; -a &quot;$(id -u)&quot; = &apos;0&apos; ]; then</span><br><span class="line">find . \! -user redis -exec chown redis &apos;&#123;&#125;&apos; +</span><br><span class="line">exec gosu redis &quot;$0&quot; &quot;$@&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">exec &quot;$@&quot;...</span><br></pre></td></tr></table></figure><ul><li>这里我们要关注脚本最后的一条命令，也就是<code>exec &quot;$@&quot;</code>。在很多镜像的 <code>ENTRYPOINT</code> 脚本里，我们都会看到这条命令，其作用其实很简单，就是运行一个程序，而运行命令就是 <code>ENTRYPOINT</code>脚本的参数。反过来，由于 <code>ENTRYPOINT</code> 脚本的参数就是 <code>CMD</code> 指令中的内容，所以实际执行的就是 <code>CMD</code>里的命令。</li><li>所以说，虽然 <code>Docker</code> 对容器启动命令的结合机制为<code>CMD</code> 作为 <code>ENTRYPOINT</code> 的参数，合并后执行 <code>ENTRYPOINT</code>中的定义，但实际在我们使用中，我们还会在 <code>ENTRYPOINT</code> 的脚本里代理到 <code>CMD</code> 命令上。</li><li>相对来说，<code>Redis</code> 的 <code>ENTRYPOINT</code> 内容还是简单的，在掌握了 <code>ENTRYPOINT</code> 的相关作用后，大家可以尝试阅读和编写一些复杂的 <code>ENTRYPOINT</code> 脚本…</li></ul><h3 id="11-6-临摹案例"><a href="#11-6-临摹案例" class="headerlink" title="11.6 临摹案例"></a>11.6 临摹案例</h3><blockquote><p>上面提及的几项只是几个比较常见的 <code>Dockerfile</code> 最佳实践，其实在编写 Dockerfile 时，还有很多不成文的小技巧。</p></blockquote><ul><li>想要学好 <code>Dockerfile</code> 的编写，阅读和思考前人的作品是必不可少的。</li><li>前面我们介绍了，<code>Docker</code> 官方提供的 <code>Docker Hub</code> 是<code>Docker</code> 镜像的中央仓库，它除了镜像丰富之外，给我们带来的另一项好处就是其大部分镜像都是能够直接提供 <code>Dockerfile</code> 文件给我们参考的。</li></ul><blockquote><p>要得到镜像的 <code>Dockerfile</code> 文件，我们可以进入到镜像的详情页面，在介绍中，镜像作者们通常会直接把 <code>Dockerfile</code> 的连接放在那里。…</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/10/3/16637944f4705632" alt=""></p><p>除此之外，进入到<code>Dockerfile</code> 这个栏目下，我们也能够直接看到镜像 <code>Dockerfile</code> 的内容。在页面的右侧，还有进入<code>Dockerfile</code> 源文件的连接，如果在 <code>Dockerfile</code> 中有引入其他的文件，我们可以通过这个连接访问到。…</p><p><img src="https://user-gold-cdn.xitu.io/2018/10/3/166379581300d9e0" alt=""></p><blockquote><p>另外，我自己也制作了一些软件的镜像，大家可以访问 <code>GitHub</code> 上的项目地址，查阅其中的<code>Dockerfile</code> 内容：github.com/cogset</p></blockquote><h2 id="十二、使用-Docker-Hub-中的镜像"><a href="#十二、使用-Docker-Hub-中的镜像" class="headerlink" title="十二、使用 Docker Hub 中的镜像"></a>十二、使用 Docker Hub 中的镜像</h2><h3 id="12-1-选择镜像与程序版本"><a href="#12-1-选择镜像与程序版本" class="headerlink" title="12.1 选择镜像与程序版本"></a>12.1 选择镜像与程序版本</h3><ul><li>由于 <code>Docker</code> 的容器设计是程序即容器的，所以组成我们服务系统的多个程序一般会搭建在多个容器里，互相之间协作提供服务。例如一套最简单的  服务，我们可能会需要 <code>Java</code> 容器来运行基于 <code>Spring Boot</code>的程序，需要 <code>MySQL</code> 容器来提供数据库支持，需要 <code>Redis</code> 容器来作为高速 KV 存储等等。装有这些程序的镜像我们都可以很容易的在 <code>Docker Hub</code> 上找到并直接使用，但在我们使用前，光选择镜像还是不够的，我们还得根据需要选择对应程序版本的镜像。</li><li>虽然我们常把软件的版本放在 <code>Tag</code> 里作为镜像名的一部分，但对于一些复杂的应用，除了版本外，还存在很多的变量，镜像的维护者们也喜欢将这些变量一同组合到镜像的 <code>Tag</code> 里，所以我们在使用镜像前，一定要先了解不同 <code>Tag</code> 对应的不同内容。</li><li>这里我们来看个例子，下面是由 Docker 官方提供的 OpenJDK 镜像的说明页面…</li></ul><p><img src="https://user-gold-cdn.xitu.io/2018/10/3/166387eaadcb9fe1" alt=""></p><ul><li>通常来说，镜像的维护者会在镜像介绍中展示出镜像所有的 Tag，如果没有，我们也能够从页面上的 <code>Tags</code> 导航里进入到镜像标签列表页面。</li><li>在 <code>OpenJDK</code> 镜像的 <code>Tag</code> 列表里，我们可以看到同样版本号的镜像就存在多种标签。在这些不同的标签上，除了定义 <code>OpenJDK</code> 的版本，还有操作系统，软件提供者等信息。</li><li>镜像维护者为我们提供这么多的标签进行选择，其实方便了我们在不同场景下选择不同环境实现细节时，都能直接用到这个镜像，而不需要再单独编写 <code>Dockerfile</code> 并构建。</li><li>但是换句话说，正是有这么多不同标签的镜像存在，所以我们在选择的时候，更要仔细认真，找到我们想要的那个镜像。…</li></ul><h3 id="12-2-Alpine-镜像"><a href="#12-2-Alpine-镜像" class="headerlink" title="12.2 Alpine 镜像"></a>12.2 Alpine 镜像</h3><blockquote><p>如果大家多接触几个镜像，就会发现带有 <code>Alpine</code> 的版本是许多镜像中都常见的标签。带有<code>Alpine</code> 标签的镜像到底是什么样的存在呢？它与相同软件不同标签的镜像又有什么样的区别呢？</p></blockquote><ul><li><p>镜像标签中的 <code>Alpine</code> 其实指的是这个镜像内的文件系统内容，是基于 <code>Alpine Linux</code> 这个操作系统的。<code>Alpine Linux</code>是一个相当精简的操作系统，而基于它的 <code>Docker</code>镜像可以仅有数 MB 的尺寸。如果软件基于这样的系统镜像之上构建而得，可以想象新的镜像也是十分小巧的。</p></li><li><p>在 <code>Docker</code> 里，<code>Alpine</code> 系统的镜像到底有多小，我们不妨来与其他系统镜像做一个比较…</p></li></ul><table><thead><tr><th>操作系统镜像</th><th>占用空间</th></tr></thead><tbody><tr><td>alpine:latest</td><td>4.4 MB</td></tr><tr><td>ubuntu:latest</td><td>84.1 MB</td></tr><tr><td>debian:latest</td><td>101 MB</td></tr><tr><td>centos:latest</td><td>200 MB</td></tr></tbody></table><blockquote><p>可以看到，<code>Alpine</code> 系统镜像的尺寸要远小于其他常见的系统镜像。让我们再来比较同一个软件在基于普通系统的镜像和基于 Alpine 系统的镜像后尺寸上的区别</p></blockquote><table><thead><tr><th>镜像标签</th><th>占用空间</th></tr></thead><tbody><tr><td>python:3.6-alpine</td><td>74.2 MB</td></tr><tr><td>python:3.6-jessie</td><td>697 MB</td></tr></tbody></table><ul><li>由于基于 <code>Alpine</code> 系统建立的软件镜像远远小于基于其他系统的软件镜像，它在网络传输上的优势尤为明显。如果我们选择这类的镜像，不但可以节约网络传输的时间，也能减少镜像对硬盘空间的占用。</li><li>当然，有优点也会有缺点，<code>Alpine</code> 镜像的缺点就在于它实在过于精简，以至于麻雀虽小，也无法做到五脏俱全了。在 Alpine 中缺少很多常见的工具和类库，以至于如果我们想基于软件 <code>Alpine</code> 标签的镜像进行二次构建，那搭建的过程会相当烦琐。所以如果你想要对软件镜像进行改造，并基于其构建新的镜像，那么 <code>Alpine</code> 镜像不是一个很好的选择 (这时候我们更提倡基于 <code>Ubuntu</code>、<code>Debian</code>、<code>CentOS</code> 这类相对完整的系统镜像来构建)。…</li></ul><h3 id="12-3-对容器进行配置"><a href="#12-3-对容器进行配置" class="headerlink" title="12.3 对容器进行配置"></a>12.3 对容器进行配置</h3><ul><li>除了合理选择镜像外，许多镜像还为我们提供了更加方便的功能，这些细节我们通常都可以在镜像的详情里阅读到。</li><li>这里我们以 <code>MySQL</code>为例，看看通常我们是怎样阅读和使用镜像的特殊功能的。</li><li>自己安装过 <code>MySQL</code> 的朋友一定知道，搭建 <code>MySQL</code> 最麻烦的地方并不是安装的过程，而是安装后进行初始化配置的过程。就拿更改 root 账号的密码来说，在初始的 <code>MySQL</code> 里就要耗费不少工作量。</li><li>如果我们拿到一个 <code>MySQL</code> 镜像，运行起来的 MySQL 也就约等于一个刚刚安装好的程序，面临的正好是复杂的初始化过程。</li><li>好在 <code>MySQL</code> 镜像的维护者们为我们打造了一些自动化脚本，通过它们，我们只需要简单的传入几个参数，就能够快速实现对 <code>MySQL</code> 数据库的初始化。</li><li>在 MySQL 镜像的详情里，描述了我们要如何传入这些参数来启动 MySQL 容器。…</li></ul><p><img src="https://user-gold-cdn.xitu.io/2018/10/3/16639074fdc48422" alt=""></p><blockquote><p>对于 <code>MySQL</code> 镜像来说，进行软件配置的方法是通过环境变量的方式来实现的 ( 在其他的镜像里，还有通过启动命令、挂载等方式来实现的 )。我们只需要通过这些给出的环境变量，就可以初始化 <code>MySQL</code> 的配置了。</p></blockquote><p>例如，我们可以通过下面的命令来直接建立 <code>MySQL</code> 中的用户和数据库。…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run --name mysql -e MYSQL_DATABASE=webapp -e MYSQL_USER=www -e MYSQL_PASSWORD=my-secret-pw -d mysql:5.7</span><br></pre></td></tr></table></figure><p>通过这条命令启动的 <code>MySQL</code> 容器，在内部就已经完成了用户的创建和数据库的创建，我们通过 <code>MySQL</code> 客户端就能够直接登录这个用户和访问对应的数据库了。</p><p>如果深究 <code>MySQL</code> 是如何实现这样复杂的功能的，大家可以到 <code>MySQL</code>镜像的 <code>Dockerfile</code> 源码库里，找到 <code>docker-entrypoint.sh</code> 这个脚本，所有的秘密正暗藏在其中。<code>MySQL</code> 正是利用了 <code>ENTRYPOINT</code> 指令进行初始化这种任务安排，对容器中的 <code>MySQL</code> 进行初始化的。</p><p>通过 <code>MySQL</code>镜像这样的逻辑，大家还可以举一反三，了解其他镜像所特用的使用方法，甚至可以参考编写、构建一些能够提供这类方法的 <code>Dockerfile</code> 和镜像…</p><h3 id="12-4-共享自己的镜像"><a href="#12-4-共享自己的镜像" class="headerlink" title="12.4 共享自己的镜像"></a>12.4 共享自己的镜像</h3><p>如果我们希望将我们镜像公开给网络上的开发者们，那通过 <code>Docker Hub</code> 无疑是最佳的方式。</p><p>要在<code>Docker Hub</code> 上共享镜像，我们必须有一个<code>Docker Hub</code> 的账号，这自不必说了。在登录到我们账号的控制面板后，我们能够找到创建的按钮，在这里选择 Create Automated Build ( 创建自动构建 )。…</p><p><img src="https://user-gold-cdn.xitu.io/2018/10/3/16638f7a60c3c8a9" alt=""></p><p>自动构建镜像是 <code>Docker Hub</code>为我们提供的一套镜像构建服务，我们只需要提供 <code>Dockerfile</code> 和相关的基本文件，<code>Docker Hub</code> 就能够在云端自动将它们构建成镜像，之后便可以让其他开发者通过 docker pull 命令拉取到这一镜像。</p><p>自动构建让不需要我们再用本机进行镜像的构建，既能节约时间，又能享受高速的云端机器构建。…</p><p><img src="https://user-gold-cdn.xitu.io/2018/10/3/16638fbdcfee0b77" alt=""></p><p>在 <code>Docker Hub</code> 中并不直接存放我们用于构建的 <code>Dockerfile</code> 和相关文件，我们必须将 <code>Docker Hub</code> 账号授权到 <code>GitHub</code> 或是 <code>Bitbucket</code> 来从这些代码库中获取 <code>Dockerfile</code>和相关文件。</p><p><img src="https://user-gold-cdn.xitu.io/2018/10/3/16638fbc9c1ac1c2" alt=""></p><p>在连接到 <code>GitHub</code> 或 <code>Bitbucket</code> 后，我们就可以选择我们存放 <code>Dockerfile</code> 和相关文件的代码仓库用来创建自动构建了。</p><p><img src="https://user-gold-cdn.xitu.io/2018/10/3/16638fbbd4f6d20a" alt=""></p><p>在基本信息填写完成，点击创建按钮后，<code>Docker Hub</code> 就会开始根据我们 <code>Dockerfile</code> 的内容构建镜像了。而此时，我们也能够访问我们镜像专有的详情页面了。</p><p><img src="https://user-gold-cdn.xitu.io/2018/10/3/16638fb9fa6cd7f7" alt=""></p><h2 id="十三、组合操作：使用-Docker-Compose-管理容器"><a href="#十三、组合操作：使用-Docker-Compose-管理容器" class="headerlink" title="十三、组合操作：使用 Docker Compose 管理容器"></a>十三、组合操作：使用 Docker Compose 管理容器</h2><h3 id="13-1-解决容器管理问题"><a href="#13-1-解决容器管理问题" class="headerlink" title="13.1 解决容器管理问题"></a>13.1 解决容器管理问题</h3><blockquote><p>拿任何一个相对完整的应用系统来说，都不可能是由一个程序独立支撑的，而对于使用 Docker 来部署的分布式计算服务更是这样。随着时代的发展和技术演进，我们越来越推崇将大型服务拆分成较小的微服务，分别部署到独立的机器或容器中。也就是说，我们的应用系统往往由数十个甚至上百个应用程序或微服务组成。即使是一个小的微服务模块，通常都需要多个应用协作完成工作。</p></blockquote><ul><li>我们编写一个小型的微服务模块，虽然我们编写代码主要针对的是其中的应用部分，但如果我们要完整的进行开发、测试，与应用相关的周边软件必然是必不可少的。</li><li>虽然 Docker Engine 帮助我们完成了对应用运行环境的封装，我们可以不需要记录复杂的应用环境搭建过程，通过简单的配置便可以将应用运行起来了，但这只是针对单个容器或单个应用程序来说的。如果延伸到由多个应用组成的应用系统，那情况就稍显复杂了。</li><li>就拿最简单的例子来说吧，如果我们要为我们的应用容器准备一个 <code>MySQL</code> 容器和一个 <code>Redis</code>容器，那么在每次启动时，我们先要将 <code>MySQL</code> 容器和 <code>Redis</code> 容器启动起来，再将应用容器运行起来。这其中还不要忘了在创建应用容器时将容器网络连接到<code>MySQL</code> 容器和 <code>Redis</code> 容器上，以便应用连接上它们并进行数据交换。</li><li>这还不够，如果我们还对容器进行了各种配置，我们最好还得将容器创建和配置的命令保存下来，以便下次可以直接使用。</li></ul><blockquote><p>如果我们要想让这套体系像 <code>docker run</code> 和 <code>docker rm</code> 那样自如的进行无痕切换，那就更加麻烦了，我们可能需要编写一些脚本才能不至于被绕到命令的毛线球里。</p></blockquote><p>说了这么多，其实核心还是缺少一个对容器组合进行管理的东西…</p><p><strong>Docker Compose</strong></p><ul><li>针对这种情况，我们就不得不引出在我们开发中最常使用的多容器定义和运行软件，也就是 <code>Docker Compose</code>了。</li><li>如果说 <code>Dockerfile</code>是将容器内运行环境的搭建固化下来，那么 <code>Docker Compose</code> 我们就可以理解为将多个容器运行的方式和配置固化下来…</li></ul><p><img src="https://user-gold-cdn.xitu.io/2018/10/4/1663e6a38cd88368" alt=""></p><blockquote><p>在 <code>Docker Compose</code> 里，我们通过一个配置文件，将所有与应用系统相关的软件及它们对应的容器进行配置，之后使用 <code>Docker Compose</code> 提供的命令进行启动，就能让 <code>Docker Compose</code> 将刚才我们所提到的那些复杂问题解决掉…</p></blockquote><h3 id="13-2-安装-Docker-Compose"><a href="#13-2-安装-Docker-Compose" class="headerlink" title="13.2 安装 Docker Compose"></a>13.2 安装 Docker Compose</h3><ul><li>虽然 <code>Docker Compose</code> 目前也是由 <code>Docker</code>官方主要维护，但其却不属于 <code>Docker Engine</code> 的一部分，而是一个独立的软件。所以如果我们要在 Linux 中使用它，还必须要单独下载使用。</li><li><code>Docker Compose</code> 是一个由 <code>Python</code> 编写的软件，在拥有 <code>Python</code> 运行环境的机器上，我们可以直接运行它，不需要其它的操作。</li><li>我们可以通过下面的命令下载 <code>Docker Compose</code> 到应用执行目录，并附上运行权限，这样<code>Docker Compose</code>就可以在机器中使用了…</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br><span class="line">$ sudo chmod +x /usr/local/bin/docker-compose</span><br><span class="line">$</span><br><span class="line">$ sudo docker-compose version</span><br><span class="line">docker-compose version 1.21.2, build a133471</span><br><span class="line">docker-py version: 3.3.0</span><br><span class="line">CPython version: 3.6.5</span><br><span class="line">OpenSSL version: OpenSSL 1.0.1t  3 May 2016...</span><br></pre></td></tr></table></figure><p>我们也能够通过 <code>Python</code> 的包管理工具 <code>pip</code>来安装<code>Docker Compose</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip install docker-compose</span><br></pre></td></tr></table></figure><p><strong>在 Windows 和 macOS 中的 Docker Compose</strong></p><blockquote><p>在我们更常用于开发的 Windows 和 macOS 中，使用 Docker Compose 会来得更加方便。不论你是使用 Docker for Win 还是 Docker for Mac，亦或是 Docker Toolbox 来搭建 Docker 运行环境，你都可以直接使用 docker-compose 这个命令。这三款软件都已经将 Docker Compose 内置在其中，供我们使用…</p></blockquote><h3 id="13-3-Docker-Compose-的基本使用逻辑"><a href="#13-3-Docker-Compose-的基本使用逻辑" class="headerlink" title="13.3 Docker Compose 的基本使用逻辑"></a>13.3 Docker Compose 的基本使用逻辑</h3><blockquote><p>如果将使用 <code>Docker Compose</code>的步骤简化来说，可以分成三步。</p></blockquote><ul><li>如果需要的话，编写容器所需镜像的 <code>Dockerfile</code>；( 也可以使用现有的镜像 )</li><li>编写用于配置容器的 <code>docker-compose.yml</code>；</li><li>使用 <code>docker-compose</code> 命令启动应用</li></ul><p><strong>编写 Docker Compose 配置</strong></p><ul><li>配置文件是 <code>Docker Compose</code> 的核心部分，我们正是通过它去定义组成应用服务容器群的各项配置，而编写配置文件，则是使用 <code>Docker Compose</code>过程中最核心的一个步骤。</li><li><code>Docker Compose</code>的配置文件是一个基于 <code>YAML</code>格式的文件。关于 <code>YAML</code> 的语法大家可以在网上找到，这里不再细说，总的来说，<code>YAML</code> 是一种清晰、简单的标记语言，你甚至都可以在看过几个例子后摸索出它的语法。</li><li>与<code>Dockerfile</code>采用 <code>Dockerfile</code> 这个名字作为镜像构建定义的默认文件名一样，<code>Docker Compose</code> 的配置文件也有一个缺省的文件名，也就是 docker-compose.yml<code>，如非必要，我建议大家直接使用这个文件名来做</code>Docker Compose` 项目的定义。</li></ul><blockquote><p>这里我们来看一个简单的 <code>Docker Compose</code>配置文件内容…</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">version: &apos;3&apos;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line"></span><br><span class="line">  webapp:</span><br><span class="line">    build: ./image/webapp</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;5000:5000&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - ./code:/code</span><br><span class="line">      - logvolume:/var/log</span><br><span class="line">    links:</span><br><span class="line">      - mysql</span><br><span class="line">      - redis</span><br><span class="line"></span><br><span class="line">  redis:</span><br><span class="line">    image: redis:3.2</span><br><span class="line">  </span><br><span class="line">  mysql:</span><br><span class="line">    image: mysql:5.7</span><br><span class="line">    environment:</span><br><span class="line">      - MYSQL_ROOT_PASSWORD=my-secret-pw</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  logvolume: &#123;&#125;...</span><br></pre></td></tr></table></figure><ul><li><code>Docker Compose</code>配置文件里可以包含许多内容，从每个容器的各个细节控制，到网络、数据卷等的定义。</li><li>这里我们看几个主要的细节。首先是 <code>version</code> 这个配置，这代表我们定义的 <code>docker-compose.yml</code> 文件内容所采用的版本，目前 <code>Docker Compose</code> 的配置文件已经迭代至了第三版，其所支持的功能也越来越丰富，所以我们建议使用最新的版本来定义。</li><li>接下来我们来看 <code>services</code>这块，这是整个 <code>-compose.yml</code> 的核心部分，其定义了容器的各项细节。</li><li>在 <code>Docker Compose</code> 里不直接体现容器这个概念，这是把 <code>service</code> 作为配置的最小单元。虽然我们看上去每个 <code>service</code> 里的配置内容就像是在配置容器，但其实 <code>service</code> 代表的是一个应用集群的配置。每个 <code>service</code> 定义的内容，可以通过特定的配置进行水平扩充，将同样的容器复制数份形成一个容器集群。而 <code>Docker Compose</code> 能够对这个集群做到黑盒效果，让其他的应用和容器无法感知它们的具体结构。</li></ul><p><strong>启动和停止</strong></p><ul><li>对于开发来说，最常使用的 <code>Docker Compose</code> 命令就是 <code>docker-compose up</code> 和 <code>docker-compose down</code> 了。</li><li><code>docker-compose up</code> 命令类似于<code>Docker Engine</code> 中的 <code>docker run</code>，它会根据 <code>docker-compose.yml</code> 中配置的内容，创建所有的容器、网络、数据卷等等内容，并将它们启动。与 <code>docker run</code>一样，默认情况下 <code>docker-compose up</code> 会在“前台”运行，我们可以用 <code>-d</code> 选项使其“后台”运行。事实上，我们大多数情况都会加上<code>-d</code>选项…</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker-compose up -d</span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是，<code>docker-compose</code>命令默认会识别当前控制台所在目录内的 <code>docker-compose.yml</code> 文件，而会以这个目录的名字作为组装的应用项目的名称。如果我们需要改变它们，可以通过选项 -f 来修改识别的 <code>Docker Compose</code> 配置文件，通过 -p 选项来定义项目名。…</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker-compose -f ./compose/docker-compose.yml -p myapp up -d</span><br></pre></td></tr></table></figure><blockquote><p>与 <code>docker-compose up</code> 相反，<code>docker-compose down</code> 命令用于停止所有的容器，并将它们删除，同时消除网络等配置内容，也就是几乎将这个 <code>Docker Compose</code> 项目的所有影响从<code>Docker</code>中清除</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker-compose down</span><br></pre></td></tr></table></figure><ul><li>如果条件允许，我更建议大家像容器使用一样对待 <code>Docker Compose</code> 项目，做到随用随启，随停随删。也就是使用的时候通过<code>docker-compose up</code> 进行，而短时间内不再需要时，通过 <code>docker-compose down</code> 清理它。</li><li>借助 <code>Docker</code>容器的秒级启动和停止特性，我们在使用 <code>docker-compose up</code> 和<code>docker-compose down</code> 时可以非常快的完成操作。这就意味着，我们可以在不到半分钟的时间内停止一套环境，切换到另外一套环境，这对于经常进行多个项目开发的朋友来说，绝对是福音。</li><li>通过 <code>Docker</code> 让我们能够在开发过程中搭建一套不受干扰的独立环境，让开发过程能够基于稳定的环境下进行。而 <code>Docker Compose</code> 则让我们更近一步，同时让我们处理好多套开发环境，并进行快速切换。…</li></ul><p><strong>容器命令</strong></p><ul><li>除了启动和停止命令外，<code>Docker Compose</code> 还为我们提供了很多直接操作服务的命令。之前我们说了，服务可以看成是一组相同容器的集合，所以操作服务就有点像操作容器一样。</li><li>这些命令看上去都和 <code>Docker Engine</code> 中对单个容器进行操作的命令类似，我们来看几个常见的。</li><li>在<code>Docker Engine</code> 中，如果我们想要查看容器中主进程的输出内容，可以使用 <code>docker logs</code> 命令。而由于在 <code>Docker Compose</code>下运行的服务，其命名都是由 <code>Docker Compose</code> 自动完成的，如果我们直接使用 <code>docker logs</code> 就需要先找到容器的名字，这显然有些麻烦了。我们可以直接使用 <code>docker-compose logs</code> 命令来完成这项工作…</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker-compose logs nginx</span><br></pre></td></tr></table></figure><ul><li>在 <code>docker-compose logs</code>衔接的是 <code>Docker Compose</code> 中所定义的服务的名称。</li><li>同理，在 <code>Docker Compose</code> 还有几个类似的命令可以单独控制某个或某些服务。</li><li>通过 <code>docker-compose create</code>，<code>docker-compose start</code> 和 <code>docker-compose stop</code> 我们可以实现与 <code>docker create</code>，<code>docker start</code>和 <code>docker stop</code> 相似的效果，只不过操作的对象由 Docker Engine 中的容器变为了 <code>Docker Compose</code> 中的服务。…</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker-compose create webapp</span><br><span class="line">$ sudo docker-compose start webapp</span><br><span class="line">$ sudo docker-compose stop webapp</span><br></pre></td></tr></table></figure><h2 id="十四、组合操作：常用的-Docker-Compose-配置项"><a href="#十四、组合操作：常用的-Docker-Compose-配置项" class="headerlink" title="十四、组合操作：常用的 Docker Compose 配置项"></a>十四、组合操作：常用的 Docker Compose 配置项</h2><h3 id="14-1-定义服务"><a href="#14-1-定义服务" class="headerlink" title="14.1 定义服务"></a>14.1 定义服务</h3><blockquote><p>为了理解在开发中常用的 <code>Docker Compose</code> 配置，我们通过一个在开发中使用的 <code>Docker Compose</code> 文件来进行下面的讲解</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line"></span><br><span class="line">  redis:</span><br><span class="line">    image: redis:3.2</span><br><span class="line">    networks:</span><br><span class="line">      - backend</span><br><span class="line">    volumes:</span><br><span class="line">      - ./redis/redis.conf:/etc/redis.conf:ro</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;6379:6379&quot;</span><br><span class="line">    command: [&quot;redis-server&quot;, &quot;/etc/redis.conf&quot;]</span><br><span class="line"></span><br><span class="line">  database:</span><br><span class="line">    image: mysql:5.7</span><br><span class="line">    networks:</span><br><span class="line">      - backend</span><br><span class="line">    volumes:</span><br><span class="line">      - ./mysql/my.cnf:/etc/mysql/my.cnf:ro</span><br><span class="line">      - mysql-data:/var/lib/mysql</span><br><span class="line">    environment:</span><br><span class="line">      - MYSQL_ROOT_PASSWORD=my-secret-pw</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;3306:3306&quot;</span><br><span class="line"></span><br><span class="line">  webapp:</span><br><span class="line">    build: ./webapp</span><br><span class="line">    networks:</span><br><span class="line">      - frontend</span><br><span class="line">      - backend</span><br><span class="line">    volumes:</span><br><span class="line">      - ./webapp:/webapp</span><br><span class="line">    depends_on:</span><br><span class="line">      - redis</span><br><span class="line">      - database</span><br><span class="line"></span><br><span class="line">  nginx:</span><br><span class="line">    image: nginx:1.12</span><br><span class="line">    networks:</span><br><span class="line">      - frontend</span><br><span class="line">    volumes:</span><br><span class="line">      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro</span><br><span class="line">      - ./nginx/conf.d:/etc/nginx/conf.d:ro</span><br><span class="line">      - ./webapp/html:/webapp/html</span><br><span class="line">    depends_on:</span><br><span class="line">      - webapp</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;80:80&quot;</span><br><span class="line">      - &quot;443:443&quot;</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  frontend:</span><br><span class="line">  backend:</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  mysql-data:...</span><br></pre></td></tr></table></figure><ul><li>在这个 <code>Docker Compose</code> 的示例中，我们看到占有大量篇幅的就是 <code>services</code> 部分，也就是服务定义的部分了。在上一节里，我们已经说到了，<code>Docker Compose</code> 中的服务，是对一组相同容器集群统一配置的定义，所以可见，在 <code>Docker Compose</code> 里，主要的内容也是对容器配置的定义。</li><li>在 <code>Docker Compose</code> 的配置文件里，对服务的定义与我们之前谈到的创建和启动容器中的选项非常相似，或者说 <code>Docker Compose</code> 就是从配置文件中读取出这些内容，代我们创建和管理这些容器的。</li><li>在使用时，我们首先要为每个服务定义一个名称，用以区别不同的服务。在这个例子里，<code>redi</code>s<code>、</code>database<code>、</code>webapp<code>、</code>nginx `就是服务的名称…</li></ul><p><strong>指定镜像</strong></p><ul><li>容器最基础的就是镜像了，所以每个服务必须指定镜像。在 <code>Docker Compose</code> 里，我们可以通过两种方式为服务指定所采用的镜像。一种是通过 <code>image</code> 这个配置，这个相对简单，给出能在镜像仓库中找到镜像的名称即可。</li><li>另外一种指定镜像的方式就是直接采用 <code>Dockerfile</code> 来构建镜像，通过<code>build</code> 这个配置我们能够定义构建的环境目录，这与 <code>docker build</code> 中的环境目录是同一个含义。如果我们通过这种方式指定镜像，那么 <code>Docker Compose</code> 先会帮助我们执行镜像的构建，之后再通过这个镜像启动容器。</li></ul><blockquote><p>当然，在 <code>docker build</code>里我们还能通过选项定义许多内容，这些在 <code>Docker Compose</code> 里我们依然可以…</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">## ......</span><br><span class="line">  webapp:</span><br><span class="line">    build:</span><br><span class="line">      context: ./webapp</span><br><span class="line">      dockerfile: webapp-dockerfile</span><br><span class="line">      args:</span><br><span class="line">        - JAVA_VERSION=1.6</span><br><span class="line">## .........</span><br></pre></td></tr></table></figure><ul><li>在配置文件里，我们还能用<code>Map</code> 的形式来定义 <code>build</code>，在这种格式下，我们能够指定更多的镜像构建参数，例如 <code>Dockerfile</code> 的文件名，构建参数等等。</li><li>当然，对于一些可以不通过重新构建镜像的方式便能修改的内容，我们还是不建议重新构建镜像，而是使用原有的镜像做简单的修改。</li><li>例如上面的配置里，我们希望修改 <code>Redis</code> 的启动命令，加入配置文件以便对<code>Redis</code> 服务进行配置，那么我们可以直接通过<code>command</code> 配置来修改。而在 <code>MySQL</code> 的定义，我们通过 <code>environment</code> 配置为 <code>MySQL</code>设置了初始密码。</li></ul><blockquote><p>这些对镜像的使用方法我们在之前都已经谈到过了，只不过我们之前用的是 <code>Docker Engine</code> 的命令以及其选项来控制的，而在 <code>Docker Compose</code> 里，我们直接通过配置文件来定义它们。</p></blockquote><p>由于 <code>Docker Compose</code> 的配置已经固化下来，所以我们不需要担心忘记之前执行了哪些命令来启动容器，当每次需要开启或关闭环境时，只需要 <code>docker-compose up -d</code>和 <code>docker-compose down</code> 命令，就能轻松完成操作…</p><p><strong>依赖声明</strong></p><ul><li>虽然我们在 <code>Docker Compose</code> 的配置文件里定义服务，在书写上有由上至下的先后关系，但实际在容器启动中，由于各种因素的存在，其顺序还是无法保障的。</li><li>所以，如果我们的服务间有非常强的依赖关系，我们就必须告知 <code>Docker Compose</code> 容器的先后启动顺序。只有当被依赖的容器完全启动后，<code>Docker Compose</code> 才会创建和启动这个容器。</li><li>定义依赖的方式很简单，在上面的例子里我们已经看到了，也就是 <code>depends_on</code> 这个配置项，我们只需要通过它列出这个服务所有依赖的其他服务即可。在<code>Docker Compose</code> 为我们启动项目的时候，会检查所有依赖，形成正确的启动顺序并按这个顺序来依次启动容器。…</li></ul><h3 id="14-2-文件挂载"><a href="#14-2-文件挂载" class="headerlink" title="14.2 文件挂载"></a>14.2 文件挂载</h3><ul><li>在 <code>Docker Compose</code> 里定义文件挂载的方式与 <code>Docker Engine</code> 里也并没有太多的区别，使用 <code>volumes</code> 配置可以像 <code>docker CLI</code> 里的 <code>-v</code> 选项一样来指定外部挂载和数据卷挂载。</li><li>在上面的例子里，我们看到了定义几种常用挂载的方式。我们能够直接挂载宿主机文件系统中的目录，也可以通过数据卷的形式挂载内容。</li><li>在使用外部文件挂载的时候，我们可以直接指定相对目录进行挂载，这里的相对目录是指相对于 <code>docker-compose.yml</code> 文件的目录。</li><li>由于有相对目录这样的机制，我们可以将<code>docker-compose.yml</code> 和所有相关的挂载文件放置到同一个文件夹下，形成一个完整的项目文件夹。这样既可以很好的整理项目文件，也利于完整的进行项目迁移。</li><li>虽然 <code>Docker</code> 提倡将代码或编译好的程序通过构建镜像的方式打包到镜像里，随整个<code>CI</code> 流部署到服务器中，但对于开发者来说，每次修改程序进行简单测试都要重新构建镜像简直是浪费生命的操作。所以在开发时，我们推荐直接将代码挂载到容器里，而不是通过镜像构建的方式打包成镜像。</li><li>同时，在开发过程中，对于程序的配置等内容，我们也建议直接使用文件挂载的形式挂载到容器里，避免经常修改所带来的麻烦…</li></ul><p><strong>使用数据卷</strong></p><ul><li>如果我们要在项目中使用数据卷来存放特殊的数据，我们也可以让 D<code>ocker Compose</code>自动完成对数据卷的创建，而不需要我们单独进行操作。</li><li>在上面的例子里，独立于 <code>services</code> 的 <code>配置就是用来声明数据卷的。定义数据卷最简单的方式仅需要提供数据卷的名称，对于我们在</code>Docker Engine <code>中创建数据卷时能够使用的其他定义，也能够放入</code>Docker Compose `的数据卷定义中。</li><li>如果我们想把属于 <code>Docker Compose</code> 项目以外的数据卷引入进来直接使用，我们可以将数据卷定义为外部引入，通过 <code>external</code> 这个配置就能完成这个定义…</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">## ......</span><br><span class="line">volumes:</span><br><span class="line">  mysql-data:</span><br><span class="line">    external: true</span><br><span class="line">## ......</span><br></pre></td></tr></table></figure><p>在加入 <code>external</code> 定义后，<code>Docker Compose</code> 在创建项目时不会直接创建数据卷，而是优先从 <code>Docker Engine</code> 中已有的数据卷里寻找并直接采用</p><h3 id="14-3-配置网络"><a href="#14-3-配置网络" class="headerlink" title="14.3 配置网络"></a>14.3 配置网络</h3><ul><li>网络也是容器间互相访问的桥梁，所以网络的配置对于多个容器组成的应用系统来说也是非常重要的。在 <code>Docker Compose</code> 里，我们可以为整个应用系统设置一个或多个网络。</li><li>要使用网络，我们必须先声明网络。声明网络的配置同样独立于 <code>services</code> 存在，是位于根配置下的 <code>networks</code> 配置。在上面的例子里，我们已经看到了声明 <code>frontend</code>和 b<code>ackend</code>这两个网络最简单的方式。</li><li>除了简单的声明网络名称，让 <code>Docker Compose</code> 自动按默认形式完成网络配置外，我们还可以显式的指定网络的参数。…</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">networks:</span><br><span class="line">  frontend:</span><br><span class="line">    driver: bridge</span><br><span class="line">    ipam:</span><br><span class="line">      driver: default</span><br><span class="line">      config:</span><br><span class="line">        - subnet: 10.10.1.0/24</span><br><span class="line">## .........</span><br></pre></td></tr></table></figure><p>在这里，我们为网络定义了网络驱动的类型，并指定了子网的网段。</p><p><strong>使用网络别名</strong></p><p>直接使用容器名或服务名来作为连接其他服务的网络地址，因为缺乏灵活性，常常还不能满足我们的需要。这时候我们可以为服务单独设置网络别名，在其他容器里，我们将这个别名作为网络地址进行访问。</p><p>网络别名的定义方式很简单，这里需要将之前简单的网络 List 定义结构修改成 Map 结构，以便在网络中加入更多的定义…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">## ......</span><br><span class="line">  database:</span><br><span class="line">    networks:</span><br><span class="line">      backend:</span><br><span class="line">        aliases:</span><br><span class="line">          - backend.database</span><br><span class="line">## ......</span><br><span class="line">  webapp:</span><br><span class="line">    networks:</span><br><span class="line">      backend:</span><br><span class="line">        aliases:</span><br><span class="line">          - backend.webapp</span><br><span class="line">      frontend:</span><br><span class="line">        aliases:</span><br><span class="line">          - frontend.webapp</span><br><span class="line">## .........</span><br></pre></td></tr></table></figure><blockquote><p>在我们进行这样的配置后，我们便可以使用这里我们所设置的网络别名对其他容器进行访问了。</p></blockquote><p><strong>端口映射</strong></p><ul><li>在 <code>Docker Compose</code> 的每个服务配置里，我们还看到了 <code>ports</code> 这个配置项，它是用来定义端口映射的。</li><li>我们可以利用它进行宿主机与容器端口的映射，这个配置与<code>docker CLI</code> 中<code>-p</code> 选项的使用方法是近似的。</li><li>需要注意的是，由于<code>YAML</code>格式对<code>xx:yy</code> 这种格式的解析有特殊性，在设置小于 <code>60</code> 的值时，会被当成时间而不是字符串来处理，所以我们最好使用引号将端口映射的定义包裹起来，避免歧义。…</li></ul><h2 id="十五、组合操作：编写-Docker-Compose-项目"><a href="#十五、组合操作：编写-Docker-Compose-项目" class="headerlink" title="十五、组合操作：编写 Docker Compose 项目"></a>十五、组合操作：编写 Docker Compose 项目</h2><h3 id="15-1-设计项目的目录结构"><a href="#15-1-设计项目的目录结构" class="headerlink" title="15.1 设计项目的目录结构"></a>15.1 设计项目的目录结构</h3><blockquote><p>在这一小节里，我们以一个由 <code>MySQL</code>、<code>Redis</code>、<code>PHP-FPM</code> 和 <code>Nginx</code> 组成的小型 PHP 网站为例，介绍通过 Docker 搭建运行这套程序运行环境的方法。</p></blockquote><ul><li>既然我们说到这个小型网站是由 MySQL、Redis、PHP-FPM 和 Nginx 四款软件所组成的，那么自然在 Docker 里，我们要准备四个容器分别来运行它们。而为了更好地管理这四个容器所组成的环境，我们这里还会使用到<code>Docker Compose</code>。</li><li>与搭建一个软件开发项目类似，我们提倡将 <code>Docker Compose</code> 项目的组成内容聚集到一个文件目录中，这样更利于我们进行管理和迁移。</li><li>这里我已经建立好了一个目录结构，虽然我们在实践的过程中不一定要按照这样的结构，但我相信这个结构一定对你有所启发…</li></ul><p><img src="https://user-gold-cdn.xitu.io/2018/10/22/1669c139cbb5b1d8" alt=""></p><blockquote><p>简单说明一下这个结构中主要目录和文件的功能和作用。在这个结构里，我们可以将根目录下的几个目录分为四类</p></blockquote><ul><li>第一类是 Docker 定义目录，也就是 compose 这个目录。在这个目录里，包含了 docker-compose.yml 这个用于定义 Docker Compose 项目的配置文件。此外，还包含了我们用于构建自定义镜像的内容。</li><li>第二类是程序文件目录，在这个项目里是 mysql、nginx、phpfpm、redis 这四个目录。这些目录分别对应着 Docker Compose 中定义的服务，在其中主要存放对应程序的配置，产生的数据或日志等内容。</li><li>第三类是代码目录，在这个项目中就是存放 Web 程序的 website 目录。我们将代码统一放在这个目录中，方便在容器中挂载。</li><li>第四类是工具命令目录，这里指 bin 这个目录。我们在这里存放一些自己编写的命令脚本，我们通过这些脚本可以更简洁地操作整个项目。…</li></ul><h3 id="15-2-编写-Docker-Compose-配置文件"><a href="#15-2-编写-Docker-Compose-配置文件" class="headerlink" title="15.2 编写 Docker Compose 配置文件"></a>15.2 编写 Docker Compose 配置文件</h3><blockquote><p>接下来我们就要编写 <code>docker-compose.yml</code>文件来定义组成这个环境的所有 Docker 容器以及与它们相关的内容了。<code>docker-compose.yml</code> 规则和编写的方法在前两小节中已经谈到，这里我们就不再展开，直接来看看编写好的 docker-compose.yml 配置文件。…</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  frontend:</span><br><span class="line">  backend:</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line"></span><br><span class="line">  redis:</span><br><span class="line">    image: redis:3.2</span><br><span class="line">    networks:</span><br><span class="line">      - backend</span><br><span class="line">    volumes:</span><br><span class="line">      - ../redis/redis.conf:/etc/redis/redis.conf:ro</span><br><span class="line">      - ../redis/data:/data</span><br><span class="line">    command: [&quot;redis-server&quot;, &quot;/etc/redis/redis.conf&quot;]</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;6379:6379&quot;</span><br><span class="line"></span><br><span class="line">  mysql:</span><br><span class="line">    image: mysql:5.7</span><br><span class="line">    networks:</span><br><span class="line">      - backend</span><br><span class="line">    volumes:</span><br><span class="line">      - ../mysql/my.cnf:/etc/mysql/my.cnf:ro</span><br><span class="line">      - ../mysql/data:/var/lib/mysql</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: my-secret-pw</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;3306:3306&quot;</span><br><span class="line"></span><br><span class="line">  phpfpm:</span><br><span class="line">    build: ./phpfpm</span><br><span class="line">    networks:</span><br><span class="line">      - frontend</span><br><span class="line">      - backend</span><br><span class="line">    volumes:</span><br><span class="line">      - ../phpfpm/php.ini:/usr/local/etc/php/php.ini:ro</span><br><span class="line">      - ../phpfpm/php-fpm.conf:/usr/local/etc/php-fpm.conf:ro</span><br><span class="line">      - ../phpfpm/php-fpm.d:/usr/local/etc/php-fpm.d:ro</span><br><span class="line">      - ../phpfpm/crontab:/etc/crontab:ro</span><br><span class="line">      - ../website:/website</span><br><span class="line">    depends_on:</span><br><span class="line">      - redis</span><br><span class="line">      - mysql</span><br><span class="line">  </span><br><span class="line">  nginx:</span><br><span class="line">    image: nginx:1.12</span><br><span class="line">    networks:</span><br><span class="line">      - frontend</span><br><span class="line">    volumes:</span><br><span class="line">      - ../nginx/nginx.c...</span><br></pre></td></tr></table></figure><blockquote><p>使用合适的镜像是提高工作效率的途径之一，这里讲解一下我们在这个项目中选择镜像的原由。</p></blockquote><ul><li>在这个项目里，我们直接采用了 MySQL、Redis 和 Nginx 三个官方镜像，而对于 PHP-FPM 的镜像，我们需要增加一些功能，所以我们通过 Dockerfile 构建的方式来生成。</li><li>对于 MySQL 来说，我们需要为它们设置密码，所以原则上我们是需要对它们进行改造并生成新的镜像来使用的。而由于 MySQL 镜像可以通过我们之前在镜像使用方法一节所提到的环境变量配置的方式，来直接指定 MySQL 的密码及其他一些关键性内容，所以我们就无须单独构建镜像，可以直接采用官方镜像并配合使用环境变量来达到目的。</li><li>对于 Redis 来说，出于安全考虑，我们一样需要设置密码。Redis 设置密码的方法是通过配置文件来完成的，所以我们需要修改 Redis 的配置文件并挂载到 Redis 容器中。这个过程也相对简单，不过需要注意的是，在官方提供的 Redis 镜像里，默认的启动命令是 redis-server，其并没有指定加载配置文件。所以在我们定义 Redis 容器时，要使用 command 配置修改容器的启动命令，使其读取我们挂载到容器的配置文件…</li></ul><p><strong>自定义镜像</strong></p><ul><li>相比较于 MySQL、Redis 这样可以通过简单配置即可直接使用的镜像不同，PHP 的镜像中缺乏了一些我们程序中必要的元素，而这些部分我们推荐使用自定义镜像的方式将它们加入其中。</li><li>在这个例子里，因为需要让 PHP 连接到 MySQL 数据库中，所以我们要为镜像中的 PHP 程序安装和开启 pdo_mysql 这个扩展。</li><li>了解如何安装扩展，这就要考验我们之前在 Docker Hub 镜像使用一节中学到的知识了。我们通过阅读 PHP 镜像的介绍页面，可以找到 PHP 镜像中已经为我们准备好了扩展的安装和启用命令，这让我们可以很轻松地在镜像中加入扩展。…</li></ul><p><img src="https://user-gold-cdn.xitu.io/2018/10/23/166a08aa844baae9" alt=""></p><blockquote><p>在准备好这些使用方法之后，我们就可以开始编写构建 PHP 镜像的 <code>Dockerfile</code> 文件了。这里我已经编写好了一份，供大家参考</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">FROM php:7.2-fpm</span><br><span class="line"></span><br><span class="line">MAINTAINER You Ming &lt;youming@funcuter.org&gt;</span><br><span class="line"></span><br><span class="line">RUN apt-get update \</span><br><span class="line"> &amp;&amp; apt-get install -y --no-install-recommends cron</span><br><span class="line"></span><br><span class="line">RUN docker-php-ext-install pdo_mysql</span><br><span class="line"></span><br><span class="line">COPY docker-entrypoint.sh /usr/local/bin/</span><br><span class="line"></span><br><span class="line">RUN chmod +x /usr/local/bin/docker-entrypoint.sh</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;docker-entrypoint.sh&quot;]</span><br><span class="line"></span><br><span class="line">CMD [&quot;php-fpm&quot;]...</span><br></pre></td></tr></table></figure><ul><li>由于 Docker 官方所提供的镜像比较精简，所以在这个 Dockerfile 里，我们还执行了 cron 的安装命令，来确保我们可以使用定时任务。</li><li>大家注意到，这里除了我们进行功能安装外，还将一个脚本拷入了镜像中，并将其作为 ENTRYPOINT 启动入口。这个文件的作用主要是为了启动 cron 服务，以便我们在容器中可以正常使用它。…</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">service cron start</span><br><span class="line"></span><br><span class="line">exec &quot;$@&quot;</span><br></pre></td></tr></table></figure><blockquote><p>在 <code>docker-entrypoint.sh</code> 里，除了启动 <code>cron</code> 服务的命令外，我们在脚本的最后看到的是 <code>exec &quot;$@&quot;</code> 这行命令。<code>$@</code>是 <code>shell</code> 脚本获取参数的符号，这里获得的是所有传入脚本的参数，而 <code>exec</code> 是执行命令，直接执行这些参数。</p></blockquote><ul><li>如果直接看这条命令大家会有些疑惑，参数怎么拿来执行，这不是有问题么？</li><li>请大家回顾一下，我们之前提到的，如果在镜像里同时定义了 <code>ENTRYPOINT</code>和 <code>CMD</code>两个指令，<code>CMD</code> 指令的内容会以参数的形式传递给 <code>ENTRYPOINT</code> 指令。所以，这里脚本最终执行的，是 <code>CMD</code>中所定义的命令。…</li></ul><p><strong>目录挂载</strong></p><blockquote><p>在这个例子里，我们会把项目中的一些目录或文件挂载到容器里，这样的挂载主要有三种目的</p></blockquote><ul><li>将程序的配置通过挂载的方式覆盖容器中对应的文件，这让我们可以直接在容器外修改程序的配置，并通过直接重启容器就能应用这些配置；</li><li>把目录挂载到容器中应用数据的输出目录，就可以让容器中的程序直接将数据输出到容器外，对于 <code>MySQL</code>、<code>Redi</code>s 中的数据，程序的日志等内容，我们可以使用这种方法来持久保存它们；</li><li>把代码或者编译后的程序挂载到容器中，让它们在容器中可以直接运行，这就避免了我们在开发中反复构建镜像带来的麻烦，节省出大量宝贵的开发时间…</li></ul><blockquote><p>上述的几种方法，对于线上部署来说都是不适用的，但在我们的开发过程中，却可以为我们免去大量不必要的工作，因此建议在开发中使用这些挂载结构</p></blockquote><h3 id="15-3-编写辅助脚本"><a href="#15-3-编写辅助脚本" class="headerlink" title="15.3 编写辅助脚本"></a>15.3 编写辅助脚本</h3><blockquote><p>我们知道，虽然 <code>Docker Compose</code> 简化了许多操作流程，但我们还是需要使用 <code>docker-compose</code> 命令来管理项目。对于这个例子来说，我们要启动它就必须使用这样的 <code>docker-compose</code> 命令来管理项目。对于这个例子来说，我们要启动它就必须使用这样的：…</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker-compose -p website up -d</span><br></pre></td></tr></table></figure><ul><li>而执行的目录必须是 <code>docker-compose.yml</code> 文件所在的目录，这样才能正确地读取 <code>Docker Compose</code>项目的配置内容。</li><li>我编写了一个 <code>compose</code> 脚本，用来简化 <code>docker-compose</code> 的操作命令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">root=$(cd `dirname $0`; dirname `pwd`)</span><br><span class="line"></span><br><span class="line">docker-compose -p website -f $&#123;root&#125;/compose/docker-compose.yml &quot;$@&quot;...</span><br></pre></td></tr></table></figure><blockquote><p>在这个脚本里，我把一些共性的东西包含进去，这样我们就不必每次传入这些参数或选项了。同时，这个脚本还能自适应调用的目录，准确找到 <code>docker-compose.yml</code> 文件，更方便我们直接调用。</p></blockquote><ul><li>通过这个脚本来操作项目，我们的命令就可以简化为：…</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ./bin/compose up -d</span><br><span class="line"></span><br><span class="line">$ sudo ./bin/compose logs nginx</span><br><span class="line"></span><br><span class="line">$ sudo ./bin/compose down</span><br></pre></td></tr></table></figure><p>当然，我们还可以编写像代码部署、服务重启等脚本，来提高我们的开发效率。</p><h2 id="十六、组合操作：应用于服务化开发"><a href="#十六、组合操作：应用于服务化开发" class="headerlink" title="十六、组合操作：应用于服务化开发"></a>十六、组合操作：应用于服务化开发</h2><h3 id="16-1-服务开发环境"><a href="#16-1-服务开发环境" class="headerlink" title="16.1 服务开发环境"></a>16.1 服务开发环境</h3><blockquote><p>在开始之前，我们依然来设定一个场景。在这里，假定我们处于一个<code>Dubbo</code> 治下的微服务系统，而工作是开发系统中某一项微服务。</p></blockquote><ul><li>微服务开发与上一节里我们提到的小型项目开发在环境搭建上有一定的区别，我们要合理地调整 <code>Docker</code> 的使用方法和策略，就必须先了解这些区别。</li><li>在微服务开发中，我们所开发的功能都不是完整的系统，很多功能需要与其他服务之间配合才能正常运转，而我们开发所使用的机器时常无法满足我们在一台机器上将这些相关服务同时运行起来。</li><li>我们仅仅是开发某一部分服务的内容，既对其他服务的运转机制不太了解，又完全没有必要在自己的机器上运行其他的服务。所以我们最佳的实践自然就是让参与系统中服务开发的同事，各自维护自己开发服务的环境，而直接提供给我们对应的连接地址使用服务即可。</li><li>更确切地说，我们在开发中，只需要在本地搭建起自己所开发服务的运行环境，再与其他开发者搭建的环境互联即可…</li></ul><h3 id="16-2-搭建本地环境"><a href="#16-2-搭建本地环境" class="headerlink" title="16.2 搭建本地环境"></a>16.2 搭建本地环境</h3><blockquote><p>在我们的开发机器上，我们只需要运行我们正在开发的服务，这个过程依然可以使用 <code>Docker Compose</code> 来完成。这里我给出了一个简单的例子，表示一个简单的小服务运行环境</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  backend:</span><br><span class="line">  mesh:</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line"></span><br><span class="line">  mysql:</span><br><span class="line">    image: mysql:5.7</span><br><span class="line">    networks:</span><br><span class="line">      - backend</span><br><span class="line">    volumes:</span><br><span class="line">      - ../mysql/my.cnf:/etc/mysql/my.cnf:ro</span><br><span class="line">      - ../mysql/data:/var/lib/mysql</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: my-secret-pw</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;3306:3306&quot;</span><br><span class="line"></span><br><span class="line">  app:</span><br><span class="line">    build: ./spring</span><br><span class="line">    networks:</span><br><span class="line">      - mesh</span><br><span class="line">      - backend</span><br><span class="line">    volumes:</span><br><span class="line">      - ../app:/app</span><br><span class="line">    depends_on:</span><br><span class="line">      - mysql...</span><br></pre></td></tr></table></figure><h3 id="16-3-跨主机网络"><a href="#16-3-跨主机网络" class="headerlink" title="16.3 跨主机网络"></a>16.3 跨主机网络</h3><ul><li>搭建好本地的环境，我们就需要考虑如何与朋友们所搭建的环境进行互联了。</li><li>这时候大家也许会想到，可以将服务涉及的相关端口通过映射的方式暴露到我们机器的端口上，接着我们只需要通过各服务机器的 IP 与对应的端口就可以连接了。</li><li>然而这种方法还不算特别方便，一来除了处理映射外，我们还需要配置防火墙等才能使其他的机器正确访问到容器，二来是这种方式我们依然要记录各个服务的网络地址等配置，而开发中切换它们是个烦琐的过程。</li><li>在介绍<code>Docker Compose</code> 的小节里，我们知道了可以通过设置网络别名 ( <code>alias</code> ) 的方式来更轻松地连接其他容器，如果我们在服务化开发里也能这么做就能减少很多烦琐操作了。</li><li>要实现设置网络别名的目的，自然要先确保所有涉及的容器位于同一个网络中，这时候就需要引出我们之前在网络小节里说到的 <code>Overlay</code>网络了…</li></ul><p><img src="https://user-gold-cdn.xitu.io/2018/10/28/166b9a1165699266" alt=""></p><blockquote><p><code>Overlay Network</code> 能够跨越物理主机的限制，让多个处于不同 <code>Docker daemon</code> 实例中的容器连接到同一个网络，并且让这些容器感觉这个网络与其他类型的网络没有区别。</p></blockquote><p><strong>Docker Swarm</strong></p><blockquote><p>要搭建 <code>Overlay Network</code> 网络，我们就要用到 <code>Docker Swarm</code> 这个工具了。<code>Docker Swarm</code>是 <code>Docker</code>内置的集群工具，它能够帮助我们更轻松地将服务部署到 <code>Docker daemon</code> 的集群之中。</p></blockquote><p><img src="https://user-gold-cdn.xitu.io/2018/10/28/166b9cfc98bedd76" alt=""></p><ul><li>在真实的服务部署里，我们通常是使用 <code>Docker Compose</code> 来定义集群，而通过 <code>Docker Swarm</code> 来部署集群。</li><li><code>Docker Swarm</code>最初是独立的项目，不过目前已经集成到了<code>Docker</code> 之中，我们通过 <code>docker CLI</code>的命令就能够直接操控它。</li><li>对于 <code>Docker Swarm</code>来说，每一个 <code>Docker daemon</code> 的实例都可以成为集群中的一个节点，而在 <code>Docker daemon</code> 加入到集群成为其中的一员后，集群的管理节点就能对它进行控制。我们要搭建的 <code>Overlay</code> 网络正是基于这样的集群实现的。</li><li>既然要将 <code>Docker</code>加入到集群，我们就必须先有一个集群，我们在任意一个 <code>Docker</code>实例上都可以通过 <code>docker swarm init</code> 来初始化集群…</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker swarm init</span><br><span class="line"></span><br><span class="line">Swarm initialized: current node (t4ydh2o5mwp5io2netepcauyl) is now a manager.</span><br><span class="line"></span><br><span class="line">To add a worker to this swarm, run the following command:</span><br><span class="line"></span><br><span class="line">    docker swarm join --token SWMTKN-1-4dvxvx4n7magy5zh0g0de0xoues9azekw308jlv6hlvqwpriwy-cb43z26n5jbadk024tx0cqz5r 192.168.1.5:2377...</span><br></pre></td></tr></table></figure><ul><li>在集群初始化后，这个 <code>Docker</code> 实例就自动成为了集群的管理节点，而其他 <code>Docker</code> 实例可以通过运行这里所打印的 <code>docker swarm join</code> 命令来加入集群。</li><li>加入到集群的节点默认为普通节点，如果要以管理节点的身份加入到集群中，我们可以通过 <code>ocker swarm join-token</code> 命令来获得管理节点的加入命令。…</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker swarm join-token manager</span><br><span class="line">To add a manager to this swarm, run the following command:</span><br><span class="line"></span><br><span class="line">    docker swarm join --token SWMTKN-1-60am9y6axwot0angn1e5inxrpzrj5d6aa91gx72f8et94wztm1-7lz0dth35wywekjd1qn30jtes 192.168.1.5:2377...</span><br></pre></td></tr></table></figure><p>我们通过这些命令来建立用于我们服务开发的 <code>Docker</code> 集群，并将相关开发同事的 <code>Docker</code> 加入到这个集群里，就完成了搭建跨主机网络的第一步</p><p><strong>建立跨主机网络</strong></p><p>接下来，我们就通过 <code>docker network create</code> 命令来建立 <code>Overlay</code> 网络。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker network create --driver overlay --attachable mesh</span><br></pre></td></tr></table></figure><p>在创建 <code>Overlay</code> 网络时，我们要加入<code>--attachable</code> 选项以便不同机器上的 <code>Docker</code> 容器能够正常使用到它。</p><p>在创建了这个网络之后，我们可以在任何一个加入到集群的<code>Docker</code>实例上使用 <code>docker network ls</code> 查看一下其下的网络列表。我们会发现这个网络定义已经同步到了所有集群中的节点上…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker network ls</span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">## ......</span><br><span class="line">y89bt74ld9l8        mesh                overlay             swarm</span><br><span class="line">## .........</span><br></pre></td></tr></table></figure><p>接下来我们要修改 <code>Docker Compose</code> 的定义，让它使用这个我们已经定义好的网络，而不是再重新创建网络。</p><p>我们只需要在<code>Docker Compose</code> 配置文件的网络定义部分，将网络的 <code>external</code> 属性设置为 <code>true</code>，就可以让<code>Docker Compose</code> 将其建立的容器都连接到这个不属于 <code>Docker Compose</code> 的项目上了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">networks:</span><br><span class="line">  mesh:</span><br><span class="line">    external: true</span><br></pre></td></tr></table></figure><blockquote><p>通过这个实现，我们在开发中就使整个服务都处于一个可以使用别名映射网络中，避免了要对不同功能联调时切换服务 IP 的烦琐流程。在这种结构下，我们只需要让我们开发的 <code>Docker</code> 退出和加入不同的集群，就能马上做到切换不同联调项目。…</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;来源掘金小册docker资料&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、Docker-的四大组成对象&quot;&gt;&lt;a href=&quot;#一、Docker-的四大组成对象&quot; class=&quot;headerlink&quot; title=&quot;一、Docker 的四
      
    
    </summary>
    
      <category term="Back-end" scheme="http://blog.poetries.top/categories/Back-end/"/>
    
    
      <category term="Docker" scheme="http://blog.poetries.top/tags/Docker/"/>
    
      <category term="部署" scheme="http://blog.poetries.top/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>pm2使用小结</title>
    <link href="http://blog.poetries.top/2018/11/19/pm2-summary/"/>
    <id>http://blog.poetries.top/2018/11/19/pm2-summary/</id>
    <published>2018-11-19T07:12:08.000Z</published>
    <updated>2018-11-28T12:50:39.021Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、PM2的主要特性"><a href="#一、PM2的主要特性" class="headerlink" title="一、PM2的主要特性"></a>一、PM2的主要特性</h2><ul><li>内建负载均衡（使用<code>Node cluster</code> 集群模块）</li><li>后台运行</li><li><code>0</code>秒停机重载，我理解大概意思是维护升级的时候不需要停机</li><li>具有<code>Ubuntu</code>和<code>CentOS</code> 的启动脚本</li><li>停止不稳定的进程（避免无限循环）</li><li>控制台检测</li><li>提供 <code>HTTP API</code></li><li>远程控制和实时的接口<code>API</code> ( <code>Nodejs</code> 模块,允许和<code>PM2</code>进程管理器交互 )</li></ul><h2 id="二、基本用法"><a href="#二、基本用法" class="headerlink" title="二、基本用法"></a>二、基本用法</h2><ul><li><code>$ npm install -g pm2</code> 命令行全局安装<code>pm2</code></li><li><code>$ pm2 start app.js</code> 启动<code>app</code>项目</li><li><code>$ pm2 list</code> 列出由<code>pm2</code>管理的所有进程信息，还会显示一个进程会被启动多少次，因为没处理的异常</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1480597-be14ef99e4b29407.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li><code>pm2 describe id</code> 查看启动程序的详细信息</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1480597-c7cb95b62468c91f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li><code>$ pm2 monit</code> 监视每个<code>node</code>进程的<code>CPU</code>和内存的使用情况</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1480597-6fdaf82f5a9d8628.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="pm2 monit"></p><ul><li><code>$ pm2 logs</code> 显示所有进程日志</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1480597-5a7ef879798770a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li>强大API： <code>pm2 web</code></li></ul><blockquote><p>你想要监控所有被<code>PM2</code>管理的进程,而且同时还想监控运行这些进程的机器的状态</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-0053e28ded2dc5c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>启动程序的时候顺便在浏览器访问：<code>http://localhost:9615</code>。部署的服务器的信息和程序的信息都显示出来了</p></blockquote><p><strong>常用命令总结</strong></p><ul><li><code>$ pm2 stop all</code> 停止所有进程</li><li><code>$ pm2 restart all</code> 重启所有进程</li><li><code>$ pm2 reload all</code> <code>0</code>秒停机重载进程 (用于 <code>NETWORKED</code> 进程)</li><li><code>$ pm2 stop</code>  停止指定的进程</li><li><code>$ pm2 restart</code>  重启指定的进程</li><li><code>$ pm2 startup</code> 产生 <code>init</code> 脚本 保持进程活着</li><li><code>$ pm2 delete</code>  杀死指定的进程</li><li><code>$ pm2 delete all</code> 杀死全部进程</li></ul><p><strong>运行进程的不同方式</strong></p><ul><li><code>$ pm2 start app.js -i max</code> 根据有效<code>CPU</code>数目启动最大进程数目</li><li><code>$ pm2 start app.js -i 3</code> 启动<code>3</code>个进程</li><li><code>$ pm2 start app.js -x</code>用<code>fork</code>模式启动 <code>app.js</code> 而不是使用 <code>cluster</code></li><li><code>$ pm2 start app.js -x -- -a 23</code> 用fork模式启动 <code>app.js</code> 并且传递参数 (<code>-a 23</code>)</li><li><code>$ pm2 start app.js --name serverone</code> 启动一个进程并把它命名为 <code>serverone</code></li><li><code>$ pm2 stop serverone</code> 停止 <code>serverone</code>进程</li><li><code>$ pm2 start app.json</code>启动进程, 在 <code>app.json</code>里设置选项</li><li><code>$ pm2 start app.js -i max -- -a 23</code> 在<code>--</code>之后给 <code>app.js</code> 传递参数</li><li><code>$ pm2 start app.js -i max -e err.log -o out.log</code>启动 并 生成一个配置文件</li></ul><blockquote><p>推荐使用<code>pm2 start npm --watch --name &lt;taskname&gt; -- run start</code></p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-fb873ab0aeefca60.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="三、配置pm2启动文件"><a href="#三、配置pm2启动文件" class="headerlink" title="三、配置pm2启动文件"></a>三、配置pm2启动文件</h2><blockquote><p>在项目根目录添加一个processes.json： 内容如下</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// apps:json结构，apps是一个数组，每一个数组成员就是对应一个pm2中运行的应用</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"apps"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"goods"</span>,<span class="comment">// 启动任务名</span></span><br><span class="line">      <span class="string">"cwd"</span>: <span class="string">"/srv/node-app/current"</span>,<span class="comment">// 应用程序所在的目录</span></span><br><span class="line">      <span class="string">"script"</span>: <span class="string">"server.js"</span>, <span class="comment">// 启动入口(应用程序的脚本路径)</span></span><br><span class="line">      <span class="string">"log_date_format"</span>: <span class="string">"YYYY-MM-DD HH:mm Z"</span>, <span class="comment">//日志格式化和monent一致</span></span><br><span class="line">      <span class="string">"error_file"</span>: <span class="string">"/var/log/node-app/node-app.stderr.log"</span>,<span class="comment">//自定义应用程序的错误日志文件</span></span><br><span class="line">      <span class="string">"out_file"</span>: <span class="string">"log/node-app.stdout.log"</span>, <span class="comment">// 日志输出路径 </span></span><br><span class="line">      <span class="string">"pid_file"</span>: <span class="string">"pids/node-geo-api.pid"</span>,<span class="comment">//自定义应用程序的pid文件</span></span><br><span class="line">      <span class="string">"instances"</span>: <span class="number">6</span>, </span><br><span class="line">      <span class="comment">//最小运行时间，这里设置的是60s即如果应用程序在60s内退出，pm2会认为程序异常退出，此时触发重启max_restarts设置数量</span></span><br><span class="line">      <span class="string">"min_uptime"</span>: <span class="string">"200s"</span>,</span><br><span class="line">      <span class="comment">//设置应用程序异常退出重启的次数，默认15次（从0开始计数）</span></span><br><span class="line">      <span class="string">"max_restarts"</span>: <span class="number">10</span>,</span><br><span class="line">      <span class="string">"max_memory_restart"</span>: <span class="string">"1M"</span>,</span><br><span class="line">      <span class="comment">// 定时启动，解决重启能解决的问题</span></span><br><span class="line">      <span class="string">"cron_restart"</span>: <span class="string">"1 0 * * *"</span>,</span><br><span class="line">      <span class="comment">// 是否启用监控模式，默认是false。如果设置成true，当应用程序变动时，pm2会自动重载。这里也可以设置你要监控的文件</span></span><br><span class="line">      <span class="string">"watch"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">"merge_logs"</span>: <span class="literal">true</span>, <span class="comment">// 合并多个任务日志</span></span><br><span class="line">      <span class="comment">// 应用程序的脚本类型，这里使用的shell，默认是nodejs</span></span><br><span class="line">      <span class="string">"exec_interpreter"</span>: <span class="string">"node"</span>,</span><br><span class="line">      <span class="comment">// 应用程序启动模式，这里设置的是cluster_mode（集群），默认是fork</span></span><br><span class="line">      <span class="string">"exec_mode"</span>: <span class="string">"fork"</span>,</span><br><span class="line">      <span class="comment">// 启用/禁用应用程序崩溃或退出时自动重启</span></span><br><span class="line">      <span class="string">"autorestart"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="comment">// 启用/禁用vizion特性(版本控制)</span></span><br><span class="line">      <span class="string">"vizion"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以通过<code>pm2 start processes.json</code>来启动。也可以把命令写在<code>package.json</code>里</p></blockquote><p><code>npm run pm2</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"pm2"</span>:<span class="string">"pm2 start processes.json"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、Pm2部署"><a href="#四、Pm2部署" class="headerlink" title="四、Pm2部署"></a>四、Pm2部署</h2><blockquote><p>在项目根目录添加<code>pm2</code>的部署脚本文件 <code>ecosystem.json</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"apps"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"goodsapp"</span>, <span class="comment">//pm2运行的应用名称</span></span><br><span class="line">        <span class="string">"script"</span>: <span class="string">"server.js"</span>,<span class="comment">//服务启动入口</span></span><br><span class="line">        <span class="string">"env"</span>:&#123;</span><br><span class="line">            <span class="string">"COMON_VARIABLE"</span>: <span class="string">"true"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"env_production"</span>: &#123;</span><br><span class="line">            <span class="string">"NODE_ENV"</span>: <span class="string">"production"</span>, <span class="comment">//env</span></span><br><span class="line">            <span class="string">"HOST"</span>: <span class="string">"localhost"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"deploy"</span>: &#123;</span><br><span class="line">      <span class="comment">// 应用名称，可以自定义，最后这样使用 pm2 deploy ecosystem.json goodsapp</span></span><br><span class="line">      <span class="string">"goodsapp"</span>: &#123;</span><br><span class="line">          <span class="string">"user"</span>: <span class="string">"user_00"</span>,<span class="comment">// 服务器用户名</span></span><br><span class="line">          <span class="string">"host"</span>: [<span class="string">'192.68.1.201'</span>],<span class="comment">//服务器ip地址 可写多个</span></span><br><span class="line">          <span class="string">"port"</span>: <span class="string">"9999"</span>,<span class="comment">//服务器端口</span></span><br><span class="line">          <span class="string">"ref"</span>: <span class="string">"origin/master"</span>,<span class="comment">//从指定分支拉取代码</span></span><br><span class="line">          <span class="string">"repo"</span>: <span class="string">"http://p.yesdat.com/diffusion/49/goodsh.git"</span>,</span><br><span class="line">          <span class="string">"path"</span>: <span class="string">"/data/poetry/testDir/prev-goods.yesdat.com"</span>, <span class="comment">//上传本地目录到服务器</span></span><br><span class="line">          <span class="string">"ssh_options"</span>: <span class="string">"StrictHostKeyChecking=no"</span>,</span><br><span class="line">          <span class="string">"post-deploy"</span>: <span class="string">"npm install --registry=https://registry.npm.taobao.org &amp;&amp; npm install &amp;&amp; pm2 startOrRestart ecosystem.json --env production"</span>,<span class="comment">//部署脚本</span></span><br><span class="line">          <span class="string">"env"</span>: &#123;</span><br><span class="line">              <span class="string">"NODE_ENV"</span>: <span class="string">"production"</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>启动</strong></p><ul><li><code>pm2 deploy ecosystem.json goodsapp setup</code> 初始化</li><li><code>pm2 deploy ecosystem.json goodsapp</code> 部署</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://pm2.keymetrics.io/docs/usage/quick-start/#installation" target="_blank" rel="noopener">PM2官方文档</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、PM2的主要特性&quot;&gt;&lt;a href=&quot;#一、PM2的主要特性&quot; class=&quot;headerlink&quot; title=&quot;一、PM2的主要特性&quot;&gt;&lt;/a&gt;一、PM2的主要特性&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;内建负载均衡（使用&lt;code&gt;Node cluster&lt;/cod
      
    
    </summary>
    
      <category term="Back-end" scheme="http://blog.poetries.top/categories/Back-end/"/>
    
    
      <category term="部署" scheme="http://blog.poetries.top/tags/%E9%83%A8%E7%BD%B2/"/>
    
      <category term="pm2" scheme="http://blog.poetries.top/tags/pm2/"/>
    
  </entry>
  
  <entry>
    <title>React16.3新的生命周期详解</title>
    <link href="http://blog.poetries.top/2018/11/18/react-lifecircle/"/>
    <id>http://blog.poetries.top/2018/11/18/react-lifecircle/</id>
    <published>2018-11-18T15:30:12.000Z</published>
    <updated>2018-11-28T12:50:39.021Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、React-v16-0前的生命周期"><a href="#一、React-v16-0前的生命周期" class="headerlink" title="一、React v16.0前的生命周期"></a>一、React v16.0前的生命周期</h2><p><img src="https://upload-images.jianshu.io/upload_images/5287253-bd799f87556b5ecc.png" alt=""></p><h3 id="1-1-第一个是组件初始化-initialization-阶段"><a href="#1-1-第一个是组件初始化-initialization-阶段" class="headerlink" title="1.1 第一个是组件初始化(initialization)阶段"></a>1.1 第一个是组件初始化(initialization)阶段</h3><blockquote><p>也就是以下代码中类的构造方法( <code>constructor()</code> ),Test类继承了react <code>Component</code>这个基类，也就继承这个<code>react</code>的基类，才能有<code>render()</code>,生命周期等方法可以使用，这也说明为什么函数组件不能使用这些方法的原因</p></blockquote><p><code>super(props)</code>用来调用基类的构造方法( <code>constructor()</code> ), 也将父组件的props注入给子组件，功子组件读取(组件中<code>props</code>只读不可变，<code>state</code>可变)而<code>constructor()</code>用来做一些组件的初始化工作，如定义<code>this.state</code>的初始内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-第二个是组件的挂载-Mounting-阶段"><a href="#1-2-第二个是组件的挂载-Mounting-阶段" class="headerlink" title="1.2 第二个是组件的挂载(Mounting)阶段"></a>1.2 第二个是组件的挂载(Mounting)阶段</h3><p><strong>此阶段分为componentWillReceiveProps，shouldComponentUpdate，componentWillUpdate，render，componentDidUpdate</strong></p><h4 id="1-2-1-componentWillMount"><a href="#1-2-1-componentWillMount" class="headerlink" title="1.2.1 componentWillMount"></a>1.2.1 componentWillMount</h4><blockquote><p>在组件挂载到DOM前调用，且只会被调用一次，在这边调用<code>this.setState</code>不会引起组件重新渲染，也可以把写在这边的内容提前到<code>constructor()</code>中，所以项目中很少用</p></blockquote><h4 id="1-2-2-render"><a href="#1-2-2-render" class="headerlink" title="1.2.2 render"></a>1.2.2 render</h4><blockquote><p>根据组件的<code>props</code>和<code>state</code>（无两者的重传递和重赋值，论值是否有变化，都可以引起组件重新<code>render</code>） ，<code>return</code> 一个<code>React</code>元素（描述组件，即<code>UI</code>），不负责组件实际渲染工作，之后由<code>React</code>自身根据此元素去渲染出页面<code>DOM</code>。<code>render</code>是纯函数（<code>Pure function</code>：函数的返回结果只依赖于它的参数；函数执行过程里面没有副作用），不能在里面执行<code>this.setState</code>，会有改变组件状态的副作用</p></blockquote><h4 id="1-2-3-componentDidMount"><a href="#1-2-3-componentDidMount" class="headerlink" title="1.2.3 componentDidMount"></a>1.2.3 componentDidMount</h4><blockquote><p>组件挂载到<code>DOM</code>后调用，且只会被调用一次</p></blockquote><h3 id="1-3-第三个是组件的更新-update-阶段"><a href="#1-3-第三个是组件的更新-update-阶段" class="headerlink" title="1.3 第三个是组件的更新(update)阶段"></a>1.3 第三个是组件的更新(update)阶段</h3><blockquote><p><code>setState</code>引起的<code>state</code>更新或父组件重新<code>render</code>引起的<code>props</code>更新，更新后的<code>state</code>和<code>props</code>相对之前无论是否有变化，都将引起子组件的重新<code>render</code></p></blockquote><h4 id="1-3-1-造成组件更新有两类（三种）情况"><a href="#1-3-1-造成组件更新有两类（三种）情况" class="headerlink" title="1.3.1 造成组件更新有两类（三种）情况"></a>1.3.1 造成组件更新有两类（三种）情况</h4><p><strong>1. 父组件重新render</strong></p><blockquote><p>父组件重新<code>render</code>引起子组件重新<code>render</code>的情况有两种</p></blockquote><ul><li>a. 直接使用,每当父组件重新<code>render</code>导致的重传<code>props</code>，子组件将直接跟着重新渲染，无论<code>props</code>是否有变化。可通过<code>shouldComponentUpdate</code>方法优化</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">   shouldComponentUpdate(nextProps)&#123; <span class="comment">// 应该使用这个方法，否则无论props是否有变化都将会导致组件跟着重新渲染</span></span><br><span class="line">        <span class="keyword">if</span>(nextProps.someThings === <span class="keyword">this</span>.props.someThings)&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.props.someThings&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>b.在<code>componentWillReceiveProps</code>方法中，将<code>props</code>转换成自己的<code>state</code></li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            someThings: props.someThings</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    componentWillReceiveProps(nextProps) &#123; <span class="comment">// 父组件重传props时就会调用这个方法</span></span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;<span class="attr">someThings</span>: nextProps.someThings&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.state.someThings&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在该函数(<code>componentWillReceiveProps</code>)中调用 <code>this.setState()</code> 将不会引起第二次渲染</p></blockquote><p>是因为<code>componentWillReceiveProps</code>中判断<code>props</code>是否变化了，若变化了，<code>this.setState</code>将引起<code>state</code>变化，从而引起<code>render</code>，此时就没必要再做第二次因重传<code>props</code>引起的<code>render</code>了，不然重复做一样的渲染了</p><p><strong>2. 组件本身调用setState，无论state有没有变化。可通过shouldComponentUpdate方法优化</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">   <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">          someThings:<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   shouldComponentUpdate(nextStates)&#123; <span class="comment">// 应该使用这个方法，否则无论state是否有变化都将会导致组件重新渲染</span></span><br><span class="line">        <span class="keyword">if</span>(nextStates.someThings === <span class="keyword">this</span>.state.someThings)&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 虽然调用了setState ，但state并无变化</span></span><br><span class="line">        <span class="keyword">const</span> preSomeThings = <span class="keyword">this</span>.state.someThings</span><br><span class="line">         <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            someThings: preSomeThings</span><br><span class="line">         &#125;)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span> = <span class="string">&#123;this.handleClick&#125;</span>&gt;</span>&#123;this.state.someThings&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-2-componentWillReceiveProps-nextProps"><a href="#1-3-2-componentWillReceiveProps-nextProps" class="headerlink" title="1.3.2 componentWillReceiveProps(nextProps)"></a>1.3.2 componentWillReceiveProps(nextProps)</h4><blockquote><p>此方法只调用于<code>props</code>引起的组件更新过程中，参数<code>nextProps</code>是父组件传给当前组件的新<code>props</code>。但父组件<code>render</code>方法的调用不能保证重传给当前组件的<code>props</code>是有变化的，所以在此方法中根据<code>nextProps</code>和<code>this.props</code>来查明重传的<code>props</code>是否改变，以及如果改变了要执行啥，比如根据新的<code>props</code>调用<code>this.setState</code>出发当前组件的重新<code>render</code></p></blockquote><h4 id="1-3-3-shouldComponentUpdate-nextProps-nextState"><a href="#1-3-3-shouldComponentUpdate-nextProps-nextState" class="headerlink" title="1.3.3 shouldComponentUpdate(nextProps, nextState)"></a>1.3.3 shouldComponentUpdate(nextProps, nextState)</h4><blockquote><p>此方法通过比较<code>nextProps</code>，<code>nextState</code>及当前组件的<code>this.props</code>，<code>this.state</code>，返回<code>true</code>时当前组件将继续执行更新过程，返回<code>false</code>则当前组件更新停止，以此可用来减少组件的不必要渲染，优化组件性能。</p></blockquote><p>ps：这边也可以看出，就算<code>componentWillReceiveProps()</code>中执行了<code>this.setState</code>，更新了<code>state</code>，但在<code>render</code>前（如<code>shouldComponentUpdate</code>，<code>componentWillUpdate</code>），<code>this.state</code>依然指向更新前的<code>state</code>，不然<code>nextState</code>及当前组件的<code>this.state</code>的对比就一直是<code>true</code>了</p><h4 id="1-3-4-componentWillUpdate-nextProps-nextState"><a href="#1-3-4-componentWillUpdate-nextProps-nextState" class="headerlink" title="1.3.4 componentWillUpdate(nextProps, nextState)"></a>1.3.4 componentWillUpdate(nextProps, nextState)</h4><blockquote><p>此方法在调用<code>render</code>方法前执行，在这边可执行一些组件更新发生前的工作，一般较少用</p></blockquote><h4 id="1-3-5-componentDidUpdate-prevProps-prevState"><a href="#1-3-5-componentDidUpdate-prevProps-prevState" class="headerlink" title="1.3.5 componentDidUpdate(prevProps, prevState)"></a>1.3.5 componentDidUpdate(prevProps, prevState)</h4><blockquote><p>此方法在组件更新后被调用，可以操作组件更新的<code>DOM</code>，<code>prevProps</code>和<code>prevState</code>这两个参数指的是组件更新前的<code>props</code>和<code>state</code></p></blockquote><h3 id="1-4-卸载阶段"><a href="#1-4-卸载阶段" class="headerlink" title="1.4 卸载阶段"></a>1.4 卸载阶段</h3><blockquote><p>此阶段只有一个生命周期方法：<code>componentWillUnmount</code></p></blockquote><p>此方法在组件被卸载前调用，可以在这里执行一些清理工作，比如清楚组件中使用的定时器，清除<code>componentDidMount</code>中手动创建的<code>DOM</code>元素等，以避免引起内存泄漏</p><h2 id="二、React-v16-4-的生命周期"><a href="#二、React-v16-4-的生命周期" class="headerlink" title="二、React v16.4 的生命周期"></a>二、React v16.4 的生命周期</h2><p><strong>React v16.4 的生命周期图</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/5287253-82f6af8e0cc9012b.png" alt=""></p><h3 id="2-1-变更缘由"><a href="#2-1-变更缘由" class="headerlink" title="2.1 变更缘由"></a>2.1 变更缘由</h3><blockquote><p>原来（<code>React v16.0</code>前）的生命周期在<code>React v16</code>推出的<code>Fiber</code>之后就不合适了，因为如果要开启<code>async rendering</code>，在<code>render</code>函数之前的所有函数，都有可能被执行多次</p></blockquote><p><strong>原来（React v16.0前）的生命周期有哪些是在render前执行的呢？</strong></p><ul><li><code>componentWillMount</code></li><li><code>componentWillReceiveProps</code></li><li><code>shouldComponentUpdate</code></li><li><code>componentWillUpdate</code></li></ul><blockquote><p>如果开发者开了<code>async rendering</code>，而且又在以上这些<code>render</code>前执行的生命周期方法做<code>AJAX</code>请求的话，那<code>AJAX</code>将被无谓地多次调用。而且在<code>componentWillMount</code>里发起<code>AJAX</code>，不管多快得到结果也赶不上首次<code>render</code>，而且<code>componentWillMount</code>在服务器端渲染也会被调用到</p></blockquote><ul><li>所以除了<code>shouldComponentUpdate</code>，其他在<code>render</code>函数之前的所有函数（<code>componentWillMount</code>，<code>componentWillReceiveProps</code>，<code>componentWillUpdate</code>）都被<code>getDerivedStateFromProps</code>替代</li><li>也就是用一个静态函数<code>getDerivedStateFromProps</code>来取代被<code>deprecate</code>的几个生命周期函数，就是强制开发者在<code>render</code>之前只做无副作用的操作，而且能做的操作局限在根据<code>props</code>和<code>state</code>决定新的<code>state</code></li></ul><blockquote><p>React v16.0刚推出的时候，是增加了一个<code>componentDidCatch</code>生命周期函数，这只是一个增量式修改，完全不影响原有生命周期函数；但是，到了<code>React v16.3</code>，大改动来了，引入了两个新的生命周期函数</p></blockquote><h3 id="2-2-引入了两个新的生命周期函数"><a href="#2-2-引入了两个新的生命周期函数" class="headerlink" title="2.2 引入了两个新的生命周期函数"></a>2.2 引入了两个新的生命周期函数</h3><h4 id="2-2-1-getDerivedStateFromProps"><a href="#2-2-1-getDerivedStateFromProps" class="headerlink" title="2.2.1 getDerivedStateFromProps"></a>2.2.1 getDerivedStateFromProps</h4><blockquote><p><code>getDerivedStateFromProps</code>本来（React v16.3中）是只在创建和更新（由父组件引发部分），也就是不是不由父组件引发，那么<code>getDerivedStateFromProps</code>也不会被调用，如自身<code>setState</code>引发或者<code>forceUpdate</code>引发</p></blockquote><p><strong>React v16.3 的生命周期图</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/5287253-ccb5d35ca1defefc.png" alt=""></p><blockquote><p>这样的话理解起来有点乱，在<code>React v16.4</code>中改正了这一点，让<code>getDerivedStateFromProps</code>无论是<code>Mounting</code>还是<code>Updating</code>，也无论是因为什么引起的<code>Updating</code>，全部都会被调用，具体可看<code>React v16.4</code>的生命周期图</p></blockquote><p><strong>React v16.4后的getDerivedStateFromProps</strong></p><blockquote><p><code>static getDerivedStateFromProps(props, state)</code> 在组件创建时和更新时的render方法之前调用，它应该返回一个对象来更新状态，或者返回<code>null</code>来不更新任何内容</p></blockquote><h4 id="2-2-2-getSnapshotBeforeUpdate"><a href="#2-2-2-getSnapshotBeforeUpdate" class="headerlink" title="2.2.2 getSnapshotBeforeUpdate"></a>2.2.2 getSnapshotBeforeUpdate</h4><blockquote><p><code>getSnapshotBeforeUpdate()</code> 被调用于<code>render</code>之后，可以读取但无法使用DOM的时候。它使您的组件可以在可能更改之前从DOM捕获一些信息（例如滚动位置）。此生命周期返回的任何值都将作为参数传递给<code>componentDidUpdate（）</code></p></blockquote><p>官网给的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScrollingList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.listRef = React.createRef();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getSnapshotBeforeUpdate(prevProps, prevState) &#123;</span><br><span class="line">    <span class="comment">//我们是否要添加新的 items 到列表?</span></span><br><span class="line">    <span class="comment">// 捕捉滚动位置，以便我们可以稍后调整滚动.</span></span><br><span class="line">    <span class="keyword">if</span> (prevProps.list.length &lt; <span class="keyword">this</span>.props.list.length) &#123;</span><br><span class="line">      <span class="keyword">const</span> list = <span class="keyword">this</span>.listRef.current;</span><br><span class="line">      <span class="keyword">return</span> list.scrollHeight - list.scrollTop;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidUpdate(prevProps, prevState, snapshot) &#123;</span><br><span class="line">    <span class="comment">//如果我们有snapshot值, 我们已经添加了 新的items.</span></span><br><span class="line">    <span class="comment">// 调整滚动以至于这些新的items 不会将旧items推出视图。</span></span><br><span class="line">    <span class="comment">// (这边的snapshot是 getSnapshotBeforeUpdate方法的返回值)</span></span><br><span class="line">    <span class="keyword">if</span> (snapshot !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> list = <span class="keyword">this</span>.listRef.current;</span><br><span class="line">      list.scrollTop = list.scrollHeight - snapshot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div ref=&#123;<span class="keyword">this</span>.listRef&#125;&gt;&#123;<span class="comment">/* ...contents... */</span>&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="三、参考"><a href="#三、参考" class="headerlink" title="三、参考"></a>三、参考</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/38030418" target="_blank" rel="noopener">React v16.3之后的组件生命周期函数</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、React-v16-0前的生命周期&quot;&gt;&lt;a href=&quot;#一、React-v16-0前的生命周期&quot; class=&quot;headerlink&quot; title=&quot;一、React v16.0前的生命周期&quot;&gt;&lt;/a&gt;一、React v16.0前的生命周期&lt;/h2&gt;&lt;p&gt;&lt;i
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="React" scheme="http://blog.poetries.top/tags/React/"/>
    
      <category term="生命周期" scheme="http://blog.poetries.top/tags/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    
  </entry>
  
</feed>
